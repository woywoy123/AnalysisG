/**
 * @file lossfx.h
 * @brief Loss function and optimizer management class.
 */
#ifndef LOSSFX_H
#define LOSSFX_H
#include <map>
#include <vector>
#include <string>
#include <tools/tools.h>
#include <torch/torch.h>
#include <structs/enums.h>
#include <structs/optimizer.h>
/**
 * @class lossfx
 * @brief Class responsible for managing loss functions and optimizers.
 *
 * This class provides methods to build and manage various loss functions and optimizers,
 * as well as initialize weights for neural networks.
 */
class lossfx : public tools {
public:
    /**
     * @brief Default constructor.
     */
    lossfx();
    /**
     * @brief Destructor.
     */
    ~lossfx();
    /**
     * @brief Converts a string to a loss enum value.
     *
     * @param name The string representation of the loss function.
     * @return The corresponding loss enum value.
     */
    loss_enum loss_string(std::string name);
    /**
     * @brief Converts a string to an optimizer enum value.
     *
     * @param name The string representation of the optimizer.
     * @return The corresponding optimizer enum value.
     */
    opt_enum optim_string(std::string name);
    /**
     * @brief Computes the loss between two tensors using the specified loss function.
     *
     * @param pred The predicted tensor.
     * @param truth The true tensor.
     * @param lss The loss function to use.
     * @return The computed loss value.
     */
    torch::Tensor loss(torch::Tensor* pred, torch::Tensor* truth, loss_enum lss);
    /**
     * @brief Initializes the weights of a neural network using the specified method.
     *
     * @param data The neural network to initialize.
     * @param method The weight initialization method to use.
     */
    void weight_init(torch::nn::Sequential* data, mlp_init method);
    /**
     * @brief Builds an optimizer instance based on the provided parameters and tensor list.
     *
     * @param op The optimizer parameters.
     * @param params The list of tensors to optimize.
     * @return A pointer to the built optimizer instance.
     */
    torch::optim::Optimizer* build_optimizer(optimizer_params_t* op, std::vector<torch::Tensor>* params);
    /**
     * @brief Builds a loss function instance based on the specified loss enum value.
     *
     * @param lss The loss enum value to use.
     * @return True if the loss function was built successfully, false otherwise.
     */
    bool build_loss_function(loss_enum lss);
    /**
     * @brief Sets the tensor options for this class instance.
     *
     * @param opts The tensor options to set.
     */
    void to(torch::TensorOptions* opts);
private:
    /**
     * @brief Builds an Adam optimizer instance based on the provided parameters and tensor list.
     *
     * @param op The optimizer parameters.
     * @param params The list of tensors to optimize.
     * @return A pointer to the built optimizer instance.
     */
    torch::optim::Optimizer* build_adam(optimizer_params_t* op, std::vector<torch::Tensor>* params);
    /**
     * @brief Builds a BCE loss function instance.
     *
     * @return A pointer to the built loss function instance.
     */
    torch::nn::BCELossImpl* build_bce_loss();
    // ... (similar methods for other loss functions and optimizers)
    // Member variables
    torch::optim::Optimizer* m_adam;
    torch::nn::BCELossImpl* m_bce;
    // ... (similar member variables for other loss functions and optimizers)
};
#endif  // LOSSFX_H

