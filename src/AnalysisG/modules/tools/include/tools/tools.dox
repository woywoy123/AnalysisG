/**
 * @brief A utility class providing various functions for file system operations,
 *        string manipulation and numerical computations.
 */

/**
 * @brief Default constructor for the tools class.
 */
tools::tools();

/**
 * @brief Destructor for the tools class.
 */
tools::~tools();

/**
 * @brief Creates a directory with the specified path.
 * @param path The absolute path to create the directory in.
 */
void tools::create_path(std::string path);

/**
 * @brief Deletes a directory with the specified path.
 * @param path The absolute path to delete the directory from.
 */
void tools::delete_path(std::string path);

/**
 * @brief Checks if a file exists at the specified path.
 * @param path The absolute path to check for existence.
 *
 * @return True if the file exists, false otherwise.
 */
bool tools::is_file(std::string path);

/**
 * @brief Renames a file from the source path to the target path.
 * @param start The current name of the file.
 * @param target The new name for the file.
 */
void tools::rename(std::string start, std::string target);

/**
 * @brief Returns the absolute path of the specified relative path.
 * @param path The relative path to resolve.
 * @return The absolute path of the input.
 */
std::string tools::absolute_path(std::string path);

/**
 * @brief Lists all files in a directory with an optional file extension filter.
 * @param path The directory to list files from.
 * @param ext An optional file extension filter (default is empty).
 * @return A vector of strings containing the listed file paths.
 */
std::vector<std::string> tools::ls(std::string path, std::string ext = "");

/**
 * @brief Converts a double value to a string with a specified precision.
 * @param val The double value to convert.
 * @param prec The number of decimal places (default is 6).
 * @return A string representation of the input double value.
 */
std::string tools::to_string(double val, int prec = 6);

/**
 * @brief Replaces a substring in a string with another string.
 * @param in The input string to modify.
 * @param repl_str The substring to replace.
 * @param repl_with The new substring to insert.
 */
void tools::replace(std::string* in, std::string repl_str, std::string repl_with);

/**
 * @brief Checks if a target string is present in the input string.
 * @param inpt The input string to search in.
 * @param trg The target string to find.
 *
 * @return True if the target string is found, false otherwise.
 */
bool tools::has_string(std::string* inpt, std::string trg);

/**
 * @brief Checks if a string ends with the specified value.
 * @param inpt The input string to check.
 * @param val The value to check for at the end of the string.
 *
 * @return True if the string ends with the specified value, false otherwise.
 */
bool tools::ends_with(std::string* inpt, std::string val);

/**
 * @brief Checks if a target value is present in a vector of strings.
 * @param data The vector of strings to search in.
 * @param trg The target string to find.
 *
 * @return True if the target value is found, false otherwise.
 */
bool tools::has_value(std::vector<std::string>* data, std::string trg);

/**
 * @brief Splits a string into substrings based on a delimiter or maximum length.
 * @param in The input string to split.
 * @param delim The delimiter to use for splitting (default is empty).
 * @param n The maximum number of splits (default is 0, which means no limit).
 *
 * @return A vector of strings containing the split substrings.
 */
std::vector<std::string> tools::split(std::string in, std::string delim = "", size_t n = 0);

/**
 * @brief Generates a hash string from an input string with a specified length.
 * @param input The input string to generate the hash for.
 * @param len The desired length of the output hash (default is 18).
 *
 * @return A string representation of the generated hash.
 */
std::string tools::hash(std::string input, int len = 18);

/**
 * @brief Converts a string to lowercase.
 * @param inpt The input string to convert.
 * @return A string representation of the converted input.
 */
std::string tools::lower(std::string* inpt);

/**
 * @brief Encodes a byte array into a base64 encoded string.
 * @param data The input byte array to encode (must be const).
 * @param len The length of the input byte array (optional, must match actual length).
 *
 * @return A string representation of the encoded byte array.
 */
std::string tools::encode64(unsigned char const* data, unsigned int len);

/**
 * @brief Encodes a string into a base64 encoded string.
 * @param data The input string to encode (must be a pointer to const).
 * @return A string representation of the encoded input string.
 */
std::string tools::encode64(std::string* data);

/**
 * @brief Decodes a base64 encoded string back into its original byte array.
 * @param inpt The input base64 encoded string to decode (must be const).
 * @return A string representation of the decoded byte array.
 */
std::string tools::decode64(std::string* inpt);

/**
 * @brief Decodes a base64 encoded string back into its original byte array.
 * @param s The input base64 encoded string to decode (const reference).
 * @return A string representation of the decoded byte array.
 */
std::string tools::decode64(std::string const& s);

// template functions
/**
 * @brief Discretizes a vector of values into N bins using the given generator type.
 * @tparam g The generator type used for discretization (e.g. int, float).
 * @param v The input vector to discretize.
 * @param N The number of bins to create (must be greater than 0).
 * @return A vector of vectors containing the discretized values.
 */
template <typename g>
std::vector<std::vector<g>> tools::discretize(std::vector<g>* v, int N);

/**
 * @brief Finds the maximum value in a vector using the given generator type.
 * @tparam g The generator type used for comparison (e.g. int, float).
 * @param data The input vector to search in.
 *
 * @return A generator object containing the maximum value found.
 */
template <typename g>
g tools::max(std::vector<g>* data);

/**
 * @brief Finds the minimum value in a vector using the given generator type.
 * @tparam g The generator type used for comparison (e.g. int, float).
 * @param data The input vector to search in.
 *
 * @return A generator object containing the minimum value found.
 */
template <typename g>
g tools::min(std::vector<g>* data);

/**
 * @brief Finds the sum of all values in a vector using the given generator type.
 * @tparam G The generator type used for addition (e.g. int, float).
 * @param data The input vector to sum up.
 *
 * @return A generator object containing the sum of all values found.
 */
template <typename g>
g tools::sum(std::vector<g>* data);

