/**
 * @brief A function used to merge data from two vectors or maps into one.
 */

/**
 * @brief Merge data from two vectors of type G into a single vector.
 *
 * This function merges the contents of the input vector `p2` into the output vector `out`.
 * The elements of `p2` are inserted at the end of `out`, preserving their original order.
 *
 * @param[out] out The output vector to store the merged data in.
 * @param[in] p2  The input vector containing the data to merge into `out`.
 */
template <typename G>
void merge_data(std::vector<G>* out, std::vector<G>* p2); 

/**
 * @brief Merge a single element of type G from one location into another.
 *
 * This function copies the value pointed to by `p2` into the memory location pointed to by `out`.
 *
 * @param[out] out The memory location where the data will be stored.
 * @param[in] p2  The memory location containing the data to copy.
 */
template <typename G>
void merge_data(G* out, G* p2); 

/**
 * @brief Merge data from two maps of type g -> G into a single map.
 *
 * This function merges the contents of the input map `p2` into the output map `out`.
 * The elements of `p2` are merged into `out`, preserving their original key-value pairs.
 *
 * @param[out] out The output map to store the merged data in.
 * @param[in] p2  The input map containing the data to merge into `out`.
 */
template <typename g, typename G>
void merge_data(std::map<g, G>* out, std::map<g, G>* p2); 

/**
 * @class sum_data
 *
 * A function used to calculate the sum of two vectors or maps.
 */

/**
 * @brief Calculate the sum of two elements of type G into a single element.
 *
 * This function adds the values pointed to by `p2` and `out`, storing the result in `out`.
 *
 * @param[out] out The memory location where the result will be stored.
 * @param[in] p2  The memory location containing one of the values to sum.
 */
template <typename G>
void sum_data(G* out, G* p2); 

/**
 * @brief Merge data from two vectors of type G into a single vector and calculate their sum.
 *
 * This function merges the contents of the input vector `p2` into the output vector `out`, then calculates the sum of all elements in both 
vectors.
 *
 * @param[out] out The output vector to store the merged data in.
 * @param[in] p2  The input vector containing the data to merge and sum into `out`.
 */
template <typename G>
void sum_data(std::vector<G>* out, std::vector<G>* p2); 

/**
 * @brief Merge two maps of type g -> G into a single map and calculate their sum.
 *
 * This function merges the contents of the input map `p2` into the output map `out`, then calculates the sum of all elements in both maps.
 *
 * @param[out] out The output map to store the merged data in.
 * @param[in] p2  The input map containing the data to merge and sum into `out`.
 */
template <typename g, typename G>
void sum_data(std::map<g, G>* out, std::map<g, G>* p2); 

