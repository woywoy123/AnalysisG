/**
 * @file tools/tensor_cast.h
 *
 * @brief  Collection of utility functions for various data types.
 */

/**
 * @fn     scout_dim
 * @brief  Scans the dimensions of a generic container and returns its maximum dimension.
 *
 * @tparam  g Type of elements in the container (e.g., int, float).
 * @param   d Pointer to the container with variable number of dimensions.
 * @param   mx_dim  Pointer to an integer where the maximum dimension will be stored.
 */
template <typename g>
void scout_dim(g* d, int* mx_dim);

/**
 * @fn     nulls
 * @brief  Sets all elements in a generic container to zero (or equivalent).
 *
 * @tparam  g Type of elements in the container (e.g., int, float).
 * @param   d Pointer to the container with variable number of dimensions.
 * @param   mx_dim  Maximum dimension of the container.
 */
template <typename g>
void nulls(g* d, int* mx_dim); 

/**
 * @fn     standard
 * @brief  Checks if all elements in a generic container are within a certain range (0-1).
 *
 * @tparam  g Type of elements in the container (e.g., float).
 * @param   d Pointer to the container with variable number of dimensions.
 * @param   mx_dim  Maximum dimension of the container.
 */
template <typename g>
bool standard(g* d , int* mx_dim); 

/**
 * @fn     as_primitive
 * @brief  Converts a generic vector into a primitive (i.e., one-dimensional) vector.
 *
 * @tparam G    Type of elements in the input vector (e.g., float).
 * @tparam g   Type of elements in the output vector (e.g., int).
 * @param   data  Pointer to the input vector with variable number of dimensions.
 * @param   lin  Output pointer to the primitive vector.
 * @param   dims  Vector of signed longs storing the dimensions of the input vector.
 * @param   depth  Optional integer specifying the current recursion depth (default: 0).
 */
template <typename G, typename g>
void as_primitive(G* data, std::vector<g>* lin, std::vector<signed long>*, unsigned int)

/**
 * @fn     scout_dim
 * @brief  Scans the dimensions of a generic vector and returns its maximum dimension.
 *
 * @tparam  G    Type of elements in the input vector (e.g., float).
 * @param   vec  Pointer to the input vector with variable number of dimensions.
 * @param   mx_dim  Output pointer to an integer where the maximum dimension will be stored.
 */
template <typename G>
void scout_dim(const std::vector<G>* vec, int* mx_dim); 

/**
 * @fn     nulls
 * @brief  Sets all elements in a generic vector to zero (or equivalent).
 *
 * @tparam g  Type of elements in the container (e.g., float).
 * @param   d  Pointer to the input vector with variable number of dimensions.
 * @param   mx_dim  Maximum dimension of the input vector.
 */
template <typename g>
void nulls(const std::vector<g>* d, int* mx_dim); 

/**
 * @fn     standard
 * @brief  Checks if all elements in a generic vector are within a certain range (0-1).
 *
 * @tparam g  Type of elements in the container (e.g., float).
 * @param   vec  Pointer to the input vector with variable number of dimensions.
 * @param   mx_dim  Maximum dimension of the input vector.
 */
template <typename g>
bool standard(const std::vector<g>* vec, int* mx_dim); 

/**
 * @fn     as_primitive
 * @brief  Converts a generic vector into a primitive (i.e., one-dimensional) vector.
 *
 * @tparam G    Type of elements in the input vector (e.g., float).
 * @tparam g   Type of elements in the output vector (e.g., int).
 * @param   data  Pointer to the input vector with variable number of dimensions.
 * @param   linear  Output pointer to the primitive vector.
 * @param   dims  Vector of signed longs storing the dimensions of the input vector.
 * @param   depth  Optional integer specifying the current recursion depth (default: 0).
 */
template <typename G, typename g>
static void as_primitive(std::vector<G>* data, std::vector<g>* linear, std::vector<signed long>* dims, unsigned int depth = 0); 

/**
 * @fn     build_tensor
 * @brief  Builds a tensor from the given data and options.
 *
 * @tparam G    Type of elements in the input vector (e.g., float).
 * @tparam g   Type of elements in the output tensor (e.g., int).
 * @param   _data  Pointer to the input vector with variable number of dimensions.
 * @param   _op    Scalar type of the output tensor.
 * @param   g     Generic element type (e.g., float, int).
 * @param   op    Output pointer to the tensor options.
 */
template <typename G, typename g>
static torch::Tensor build_tensor(std::vector<G>* _data, at::ScalarType _op, g, torch::TensorOptions* op); 
