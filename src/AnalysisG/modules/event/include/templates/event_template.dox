#ifndef EVENT_TEMPLATE_H
#define EVENT_TEMPLATE_H

#include <templates/particle_template.h>
#include <structs/property.h>
#include <structs/element.h>
#include <structs/event.h>
#include <tools/tools.h>
#include <meta/meta.h>

/**
 * @class event_template
 * @brief Base class for events in a data processing framework.
 *
 * This class provides a template for creating and managing events. It includes properties for storing trees, branches, leaves, name, hash, tree, weight, and index.
 */
class event_template : public tools {
public:
    /**
     * @brief Default constructor.
     */
    event_template();

    /**
     * @brief Virtual destructor.
     */
    virtual ~event_template();

    /**
     * @property trees
     * @brief A vector of strings representing the trees in this event.
     *
     * This property is a cproperty, which means it can be accessed and modified using getter and setter functions.
     */
    cproperty<std::vector<std::string>, event_template> trees;

    /**
     * @fn static set_trees(std::vector<std::string>* value, event_template* obj)
     * @brief Sets the value of the trees property.
     *
     * This function is a static member function, which means it can be called without creating an instance of the class. It takes two arguments: a pointer to a vector of strings and a pointer to an event_template object.
     */
    void static set_trees(std::vector<std::string>* value, event_template* obj);

    /**
     * @property branches
     * @brief A vector of strings representing the branches in this event.
     *
     * This property is a cproperty, which means it can be accessed and modified using getter and setter functions.
     */
    cproperty<std::vector<std::string>, event_template> branches;

    /**
     * @fn static set_branches(std::vector<std::string>* value, event_template* obj)
     * @brief Sets the value of the branches property.
     *
     * This function is a static member function, which means it can be called without creating an instance of the class. It takes two arguments: a pointer to a vector of strings and a pointer to an event_template object.
     */
    void static set_branches(std::vector<std::string>* value, event_template* obj);

    /**
     * @property leaves
     * @brief A map of strings representing the leaves in this event.
     *
     * This property is a cproperty, which means it can be accessed and modified using getter and setter functions.
     */
    cproperty<std::map<std::string, std::string>, event_template> leaves;

    /**
     * @fn add_leaf(std::string key, std::string leaf = "")
     * @brief Adds a new leaf to the leaves property.
     *
     * This function takes two arguments: a string representing the key and an optional string representing the value. If no value is provided, an empty string will be used.
     */
    void add_leaf(std::string key, std::string leaf = "");

    /**
     * @property name
     * @brief A string representing the name of this event.
     *
     * This property is a cproperty, which means it can be accessed and modified using getter and setter functions.
     */
    cproperty<std::string, event_template> name;

    /**
     * @fn static set_name(std::string* value, event_template* obj)
     * @brief Sets the value of the name property.
     *
     * This function is a static member function, which means it can be called without creating an instance of the class. It takes two arguments: a pointer to a string and a pointer to an event_template object.
     */
    void static set_name(std::string* value, event_template* obj);

    /**
     * @property hash
     * @brief A string representing the hash of this event.
     *
     * This property is a cproperty, which means it can be accessed and modified using getter and setter functions.
     */
    cproperty<std::string, event_template> hash;

    /**
     * @fn static set_hash(std::string* value, event_template* obj)
     * @brief Sets the value of the hash property.
     *
     * This function is a static member function, which means it can be called without creating an instance of the class. It takes two arguments: a pointer to a string and a pointer to an event_template object.
     */
    void static set_hash(std::string* value, event_template* obj);

    /**
     * @fn static get_hash(std::string* value, event_template* obj)
     * @brief Gets the value of the hash property.
     *
     * This function is a static member function, which means it can be called without creating an instance of the class. It takes two arguments: a pointer to a string and a pointer to an event_template object.
     */
    void static get_hash(std::string* value, event_template* obj);

    /**
     * @property tree
     * @brief A string representing the tree of this event.
     *
     * This property is a cproperty, which means it can be accessed and modified using getter and setter functions.
     */
    cproperty<std::string, event_template> tree;

    /**
     * @fn static set_tree(std::string* value, event_template* obj)
     * @brief Sets the value of the tree property.
     *
     * This function is a static member function, which means it can be called without creating an instance of the class. It takes two arguments: a pointer to a string and a pointer to an event_template object.
     */
    void static set_tree(std::string* value, event_template* obj);

    /**
     * @fn static get_tree(std::string* value, event_template* obj)
     * @brief Gets the value of the tree property.
     *
     * This function is a static member function, which means it can be called without creating an instance of the class. It takes two arguments: a pointer to a string and a pointer to an event_template object.
     */
    void static get_tree(std::string* value, event_template* obj);

    /**
     * @property weight
     * @brief A double representing the weight of this event.
     *
     * This property is a cproperty, which means it can be accessed and modified using getter and setter functions.
     */
    cproperty<double, event_template> weight;

    /**
     * @fn static set_weight(double* value, event_template* obj)
     * @brief Sets the value of the weight property.
     *
     * This function is a static member function, which means it can be called without creating an instance of the class. It takes two arguments: a pointer to a double and a pointer to an event_template object.
     */
    void static set_weight(double* value, event_template* obj);

    /**
     * @property index
     * @brief A long representing the index of this event.
     *
     * This property is a cproperty, which means it can be accessed and modified using getter and setter functions.
     */
    cproperty<long, event_template> index;

    /**
     * @fn static set_index(long* value, event_template* obj)
     * @brief Sets the value of the index property.
     *
     * This function is a static member function, which means it can be called without creating an instance of the class. It takes two arguments: a pointer to a long and a pointer to an event_template object.
     */
    void static set_index(long* value, event_template* obj);

    /**
     * @fn clone()
     * @brief Creates a deep copy of this event.
     *
     * This function returns a new event that is a deep copy of the current one.
     */
    event* clone();


private:
    std::map<std::string, std::string> m_leaves;

    std::string m_name;

    std::string m_hash;

    std::string m_tree;

    double m_weight;

    long m_index;

    event* m_parent;

    std::vector<event*> m_children;

};

#endif
