/**
 * @file container.h
 * @brief Container class for storing and managing data.
 */
#ifndef CONTAINER_H
#define CONTAINER_H
#include <meta/meta.h>
#include <tools/tools.h>
#include <templates/graph_template.h>
#include <templates/event_template.h>
#include <templates/selection_template.h>
#include <generators/dataloader.h>
/**
 * @struct entry_t
 * @brief Represents a single entry in the container.
 */
struct entry_t {
    /**
     * @var hash
     * @brief Unique identifier for this entry.
     */
    std::string hash = "";

    /**
     * @var m_data
     * @brief Vector of graph pointers associated with this entry.
     */
    std::vector<graph_t*>                m_data  = {};

    /**
     * @var m_graph
     * @brief Vector of graph templates associated with this entry.
     */
    std::vector<graph_template*>         m_graph = {};

    /**
     * @var m_event
     * @brief Vector of event templates associated with this entry.
     */
    std::vector<event_template*>         m_event = {};

    /**
     * @var m_selection
     * @brief Vector of selection templates associated with this entry.
     */
    std::vector<selection_template*> m_selection = {};

    /**
     * @fn init()
     * @brief Initializes the entry.
     */
    void init();

    /**
     * @fn destroy()
     * @brief Destroys the entry.
     */
    void destroy();

    /**
     * @fn has_event(event_template* ev)
     * @brief Checks if this entry contains a specific event template.
     *
     * @param ev The event template to check for.
     * @return True if the event is found, false otherwise.
     */
    bool has_event(event_template* ev);

    /**
     * @fn has_graph(graph_template* gr)
     * @brief Checks if this entry contains a specific graph template.
     *
     * @param gr The graph template to check for.
     * @return True if the graph is found, false otherwise.
     */
    bool has_graph(graph_template* gr);

    /**
     * @fn has_selection(selection_template* sel)
     * @brief Checks if this entry contains a specific selection template.
     *
     * @param sel The selection template to check for.
     * @return True if the selection is found, false otherwise.
     */
    bool has_selection(selection_template* sel);

    /**
     * @fn destroy(std::vector<g>* c)
     * @brief Destroys a vector of objects of type g.
     *
     * @tparam g The type of object to destroy.
     * @param c The vector of objects to destroy.
     */
    template <typename g>
    void destroy(std::vector<g*>* c);

};


/**
 * @class container
 * @brief A class for storing and managing data in a container.
 *
 * This class provides methods for adding, retrieving, and manipulating data in the container.
 */
class container : public tools {
public:
    /**
     * @fn container()
     * @brief Default constructor.
     */
    container();

    /**
     * @fn ~container()
     * @brief Destructor.
     */
    ~container();

    /**
     * @fn add_meta_data(meta* md, std::string label)
     * @brief Adds metadata to the container.
     *
     * @param md The metadata object to add.
     * @param label A label for the metadata.
     */
    void add_meta_data(meta*, std::string);

    /**
     * @fn get_meta_data()
     * @brief Retrieves the metadata associated with this container.
     *
     * @return The metadata object associated with this container, or nullptr if none exists.
     */
    meta* get_meta_data();

    /**
     * @fn add_selection_template(selection_template* sel)
     * @brief Adds a selection template to the container.
     *
     * @param sel The selection template to add.
     * @return True if the selection was added successfully, false otherwise.
     */
    bool add_selection_template(selection_template*);

    /**
     * @fn add_event_template(event_template* ev, std::string label)
     * @brief Adds an event template to the container.
     *
     * @param ev The event template to add.
     * @param label A label for the event.
     * @return True if the event was added successfully, false otherwise.
     */
    bool add_event_template(event_template*, std::string label);

    /**
     * @fn add_graph_template(graph_template* gr, std::string label)
     * @brief Adds a graph template to the container.
     *
     * @param gr The graph template to add.
     * @param label A label for the graph.
     * @return True if the graph was added successfully, false otherwise.
     */
    bool add_graph_template(graph_template*, std::string label);

    /**
     * @fn fill_selections(std::map<std::string, selection_template*>* inpt)
     * @brief Fills the container with selections from a map.
     *
     * @param inpt The map of selections to fill the container with.
     */
    void fill_selections(std::map<std::string, selection_template*>* inpt);

    /**
     * @fn get_events(std::vector<event_template*>* evs, std::string label)
     * @brief Retrieves events from the container based on a label.
     *
     * @param evs The vector of event templates to retrieve.
     * @param label A label for the events to retrieve.
     */
    void get_events(std::vector<event_template*>*, std::string label);

    /**
     * @fn populate_dataloader(dataloader* dl)
     * @brief Populates a dataloader with data from the container.
     *
     * @param dl The dataloader object to populate.
     */
    void populate_dataloader(dataloader* dl);

    /**
     * @fn compile(size_t* len, int threadIdx)
     * @brief Compiles the container and retrieves its length.
     *
     * @param len A pointer to a size_t variable that will hold the length of the container.
     * @param threadIdx The index of the current executing thread.
     */
    void compile(size_t* len, int threadIdx);

    /**
     * @fn len()
     * @brief Retrieves the length of the container.
     *
     * @return The length of the container.
     */
    size_t len();

    /**
     * @fn add_entry(std::string hash)
     * @brief Adds a new entry to the container with the given hash.
     *
     * @param hash The unique identifier for the new entry.
     * @return A pointer to the newly added entry, or nullptr if an error occurred.
     */
    entry_t* add_entry(std::string hash);

private:
    /**
     * @var meta_data
     * @brief Metadata associated with this container.
     */
    meta*        meta_data   = nullptr;

    /**
     * @var filename
     * @brief The file name associated with this container.
     */
    std::string* filename    = nullptr;

    /**
     * @var output_path
     * @brief The output path for this container.
     */
    std::string* output_path = nullptr;

    /**
     * @var label
     * @brief A label for this container.
     */
    std::string     label    = "";

    /**
     * @var random_access
     * @brief A map of entries in the container, accessible by hash.
     */
    std::map<std::string, entry_t> random_access;

    /**
     * @var merged
     * @brief A map of selection templates that have been merged with this container.
     */
    std::map<std::string, selection_template*>* merged = nullptr;

};

#endif  // CONTAINER_H
