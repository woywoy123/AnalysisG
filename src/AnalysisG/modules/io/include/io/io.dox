/**
 * @file io.h
 * @brief Input/Output class for handling data storage and retrieval.
 */
#ifndef IO_IO_H
#define IO_IO_H
#include <map>
#include <string>
#include <H5Cpp.h>
#include <TFile.h>
#include <TTree.h>
#include <TBranch.h>
#include <TLeaf.h>
#include <TTreeReader.h>
#include <TTreeReaderArray.h>
#include <meta/meta.h>
#include <tools/tools.h>
#include <structs/folds.h>
#include <structs/element.h>
#include <structs/settings.h>
#include <notification/notification.h>
/**
 * @class io
 * @brief Input/Output class for handling data storage and retrieval.
 *
 * This class provides methods for writing and reading data to/from various file formats,
 * including HDF5, ROOT, and others. It also manages the opening and closing of files,
 * as well as tracking the state of the input/output operations.
 */
class io : public tools, public notification
{
public:
    /**
     * @brief Constructor.
     */
    io();

    /**
     * @brief Destructor.
     */
    ~io();

    /**
     * @brief Write data to a file.
     *
     * This method writes the provided data to a file with the specified name and type.
     *
     * @tparam g Type of data being written.
     * @param inpt Data to be written.
     * @param set_name Name of the dataset to write to.
     */
    template <typename g>
    void write(std::vector<g>* inpt, std::string set_name);

    /**
     * @brief Write data to a file.
     *
     * This method writes the provided data to a file with the specified name and type.
     *
     * @tparam g Type of data being written.
     * @param inpt Data to be written.
     * @param set_name Name of the dataset to write to.
     */
    template <typename g>
    void write(g* inpt, std::string set_name);

    /**
     * @brief Read data from a file.
     *
     * This method reads data from a file with the specified name and type.
     *
     * @tparam g Type of data being read.
     * @param outpt Data to be read into.
     * @param set_name Name of the dataset to read from.
     */
    template <typename g>
    void read(std::vector<g>* outpt, std::string set_name);

    /**
     * @brief Read data from a file.
     *
     * This method reads data from a file with the specified name and type.
     *
     * @tparam g Type of data being read.
     * @param out Data to be read into.
     * @param set_name Name of the dataset to read from.
     */
    template <typename g>
    void read(g* out, std::string set_name);

    /**
     * @brief Read graph data from an HDF5 file.
     *
     * This method reads graph data from an HDF5 file with the specified name and type.
     *
     * @param out Data to be read into.
     * @param set_name Name of the dataset to read from.
     */
    void read(graph_hdf5_w* out, std::string set_name);

    /**
     * @brief Start input/output operations.
     *
     * This method starts the input/output operations and opens the specified file.
     *
     * @param filename Name of the file to open.
     * @param read_write Whether to read from or write to the file.
     */
    bool start(std::string filename, std::string read_write);

    /**
     * @brief End input/output operations.
     */
    void end();

    /**
     * @brief Get dataset names.
     *
     * This method returns a vector of dataset names in the current file.
     *
     * @return Vector of dataset names.
     */
    std::vector<std::string> dataset_names();

    /**
     * @brief Get root file sizes.
     *
     * This method returns a map of root file sizes for each dataset.
     *
     * @return Map of root file sizes.
     */
    std::map<std::string, long> root_size();

    /**
     * @brief Check root file paths.
     */
    void check_root_file_paths();

    /**
     * @brief Scan keys in the current file.
     *
     * This method scans the keys in the current file and updates the internal state.
     *
     * @return Whether scanning was successful.
     */
    bool scan_keys();

    /**
     * @brief Begin root operations.
     */
    void root_begin();

    /**
     * @brief End root operations.
     */
    void root_end();

    /**
     * @brief Import settings from a file.
     *
     * This method imports settings from a file with the specified name and type.
     *
     * @param params Settings to be imported.
     */
    void import_settings(settings_t* params);

    /**
     * @brief Get data from the current file.
     *
     * This method returns a map of data for each dataset in the current file.
     *
     * @return Map of data.
     */
    std::map<std::string, data_t*>* get_data();

private:
    /**
     * @brief Create an HDF5 member object.
     *
     * This method creates an HDF5 member object from a folds_t object.
     *
     * @param t Folds_t object to create member from.
     */
    hid_t member(folds_t t);

    /**
     * @brief Create an HDF5 member object.
     *
     * This method creates an HDF5 member object from a graph_hdf5_w object.
     *
     * @param t Graph_hdf5_w object to create member from.
     */
    hid_t member(graph_hdf5_w t);

    /**
     * @brief Get the internal state of the input/output operations.
     *
     * This method returns the internal state of the input/output operations, including the current file and dataset names.
     *
     * @return Internal state of the input/output operations.
     */
};

};

#endif
