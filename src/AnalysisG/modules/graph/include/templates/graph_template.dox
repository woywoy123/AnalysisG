
/**
 * @file graph_t.h
 * @brief Graph data structure and utility functions.
 */
struct graph_t {
    /**
     * @brief Get the truth graph as a tensor.
     *
     * @tparam g The type of the graph model.
     * @param name The name of the graph.
     * @param mdl The graph model instance.
     * @return A pointer to the truth graph tensor.
     */
    template <typename g>
    torch::Tensor* get_truth_graph(std::string name, g* mdl);
    /**
     * @brief Get a truth node as a tensor.
     *
     * @tparam g The type of the graph model.
     * @param name The name of the node.
     * @param mdl The graph model instance.
     * @return A pointer to the truth node tensor.
     */
    template <typename g>
    torch::Tensor* get_truth_node(std::string name, g* mdl);
    /**
     * @brief Get a truth edge as a tensor.
     *
     * @tparam g The type of the graph model.
     * @param name The name of the edge.
     * @param mdl The graph model instance.
     * @return A pointer to the truth edge tensor.
     */
    template <typename g>
    torch::Tensor* get_truth_edge(std::string name, g* mdl);
    /**
     * @brief Get the data graph as a tensor.
     *
     * @tparam g The type of the graph model.
     * @param name The name of the graph.
     * @param mdl The graph model instance.
     * @return A pointer to the data graph tensor.
     */
    template <typename g>
    torch::Tensor* get_data_graph(std::string name, g* mdl);
    /**
     * @brief Get a data node as a tensor.
     *
     * @tparam g The type of the graph model.
     * @param name The name of the node.
     * @param mdl The graph model instance.
     * @return A pointer to the data node tensor.
     */
    template <typename g>
    torch::Tensor* get_data_node(std::string name, g* mdl);
    /**
     * @brief Get a data edge as a tensor.
     *
     * @tparam g The type of the graph model.
     * @param name The name of the edge.
     * @param mdl The graph model instance.
     * @return A pointer to the data edge tensor.
     */
    template <typename g>
    torch::Tensor* get_data_edge(std::string name, g* mdl);
    /**
     * @brief Get the edge index as a tensor.
     *
     * @tparam g The type of the graph model.
     * @param mdl The graph model instance.
     * @return A pointer to the edge index tensor.
     */
    template <typename g>
    torch::Tensor* get_edge_index(g* mdl);
    /**
     * @brief Get the event weight as a tensor.
     *
     * @tparam g The type of the graph model.
     * @param mdl The graph model instance.
     * @return A pointer to the event weight tensor.
     */
    template <typename g>
    torch::Tensor* get_event_weight(g* mdl);
    /**
     * @brief Get the batch index as a tensor.
     *
     * @tparam g The type of the graph model.
     * @param mdl The graph model instance.
     * @return A pointer to the batch index tensor.
     */
    template <typename g>
    torch::Tensor* get_batch_index(g* mdl);
    /**
     * @brief Get the batched events as a tensor.
     *
     * @tparam g The type of the graph model.
     * @param mdl The graph model instance.
     * @return A pointer to the batched events tensor.
     */
    template <typename g>
    torch::Tensor* get_batched_events(g* mdl);
    /**
     * @brief Check if a feature is present in the graph.
     *
     * @param name The name of the feature.
     * @param dev The device ID (e.g. CPU or GPU).
     * @return True if the feature is present, false otherwise.
     */
    bool has_feature(std::string name, int dev);
    /**
     * @brief Add content to a map of tensors.
     *
     * @param inpt The input map of tensors.
     * @return A pointer to the updated map of tensors.
     */
    std::vector<torch::Tensor*>* add_content(std::map<std::string, torch::Tensor*>* inpt);
    /**
     * @brief Transfer data to a device (e.g. CPU or GPU).
     *
     * @param trg The target tensor.
     * @param data The input data (e.g. a vector of tensors).
     * @param dev The destination device ID.
     */
    void _transfer_to_device(std::vector<torch::Tensor>* trg, std::vector<torch::Tensor*>* data, torch::TensorOptions* dev);
    /**
     * @brief Return any tensor from a map of containers.
     *
     * @param loc The location of the container (e.g. a map of tensors).
     * @param container The container to search in (e.g. a map of vectors of tensors).
     * @param name The name of the tensor to return.
     * @param dev_ The device ID (e.g. CPU or GPU).
     * @return A pointer to the returned tensor.
     */
    torch::Tensor* return_any(std::map<std::string, int>* loc, std::map<int, std::vector<torch::Tensor>>* container, std::string name, int dev_);
}; 

bool static fulltopo(particle_template*, particle_template*); 

/**
 * @file graph_template.h
 * @brief A class representing a graph template.
 */
class graph_template : public tools {
public:
    /**
     * @brief Default constructor.
     */
    graph_template();
    /**
     * @brief Virtual destructor.
     */
    virtual ~graph_template();
    /**
     * @brief Clone the current object.
     * @return A pointer to the cloned object.
     */
    virtual graph_template* clone();
    /**
     * @brief Compile the event.
     */
    virtual void CompileEvent();
    /**
     * @brief Perform pre-selection on the event.
     * @return True if the event passes selection, false otherwise.
     */
    virtual bool PreSelection();
    /**
     * @brief Define particle nodes in the graph.
     * @param prt A vector of particle templates.
     */
    void define_particle_nodes(std::vector<particle_template*>* prt);
    /**
     * @brief Define the topology of the graph using a function.
     * @param fx A function that takes two particle templates as input and returns true if they are connected, false otherwise.
     */
    void define_topology(std::function<bool(particle_template*, particle_template*)> fx);
    /**
     * @brief Flush particles from the graph.
     */
    void flush_particles();
    /**
     * @brief Equality operator for comparing two graph templates.
     * @param p The other graph template to compare with.
     * @return True if the graphs are equal, false otherwise.
     */
    bool operator == (graph_template& p);
    /**
     * @brief Index property of the graph.
     */
    cproperty<long  , graph_template> index;
    /**
     * @brief Weight property of the graph.
     */
    cproperty<double, graph_template> weight;
    /**
     * @brief Pre-selection property of the graph.
     */
    cproperty<bool  , graph_template> preselection;
    /**
     * @brief Hash property of the graph.
     */
    cproperty<std::string, graph_template> hash;
    /**
     * @brief Tree property of the graph.
     */
    cproperty<std::string, graph_template> tree;
    /**
     * @brief Name property of the graph.
     */
    cproperty<std::string, graph_template> name;
    /**
     * @brief File name associated with the graph.
     */
    std::string filename = "";
    /**
     * @brief Meta data associated with the graph.
     */
    meta* meta_data = nullptr;
    /**
     * @brief Get an event from the graph.
     * @tparam G The type of the graph.
     * @return A pointer to the event.
     */
    template <typename G>
    G* get_event()
    /**
     * @brief Add a truth feature to the graph.
     * @tparam G The type of the graph.
     * @tparam O The type of the object.
     * @tparam X The type of the feature.
     * @param ev The event object.
     * @param fx The feature function.
     * @param name The name of the feature.
     */
    template <typename G, typename O, typename X>
    void add_graph_truth_feature(O* ev, X fx, std::string name)
    /**
     * @brief Add a data feature to the graph.
     * @tparam G The type of the graph.
     * @tparam O The type of the object.
     * @tparam X The type of the feature.
     * @param ev The event object.
     * @param fx The feature function.
     * @param name The name of the feature.
     */
    template <typename G, typename O, typename X>
    void add_graph_data_feature(O* ev, X fx, std::string name)
    /**
     * @brief Add a truth feature to a node in the graph.
     * @tparam G The type of the graph.
     * @tparam O The type of the object.
     * @tparam X The type of the feature.
     * @param fx The feature function.
     * @param name The name of the feature.
     */
    template <typename G, typename O, typename X>
    void add_node_truth_feature(O* ev, X fx, std::string name)
    /**
     * @brief Add a data feature to a node in the graph.
     * @tparam G The type of the graph.
     * @tparam O The type of the object.
     * @tparam X The type of the feature.
     * @param ev The event object.
     * @param fx The feature function.
     * @param name The name of the feature.
     */
    template <typename G, typename O, typename X>
    void add_node_data_feature(O* ev, X fx, std::string name)
    /**
     * @brief Add a truth feature to an edge in the graph.
     * @tparam G The type of the graph.
     * @tparam O The type of the object.
     * @tparam X The type of the feature.
     * @param fx The feature function.
     * @param name The name of the feature.
     */
    template <typename G, typename O, typename X>
    void add_edge_truth_feature(O* ev, X fx, std::string name)
    /**
     * @brief Add a data feature to an edge in the graph.
     * @tparam G The type of the graph.
     * @tparam O The type of the object.
     * @tparam X The type of the feature.
     * @param ev The event object.
     * @param fx The feature function.
     * @param name The name of the feature.
     */
    template <typename G, typename O, typename X>
    void add_edge_data_feature(O* ev, X fx, std::string name)
    /**
     * @brief Check if a particle is in the graph.
     * @param p The particle to check.
     * @return True if the particle is in the graph, false otherwise.
     */
    bool has_particle(particle_template* p);
    /**
     * @brief Get the particles associated with a node in the graph.
     * @param node The node index.
     * @return A vector of particles associated with the node.
     */
    std::vector<particle_template*> get_node_particles(int node)
    /**
     * @brief Build a new graph template from an event object.
     * @param el The event object to build the graph from.
     * @return A pointer to the built graph template.
     */
    graph_template* build(event_template* el);
    /**
     * @brief Export the data associated with the graph.
     * @return A pointer to the exported data.
     */
    graph_t* data_export();
private:
    /**
     * @brief Topology of the graph.
     */
    std::vector<std::vector<int>> _topology;
    /**
     * @brief Topological index of the nodes in the graph.
     */
    std::vector<int> _topological_index;
    /**
     * @brief Tensor representation of the topology.
     */
    torch::Tensor m_topology;
    /**
     * @brief Options for tensor operations.
     */
    torch::TensorOptions* op = nullptr;
    /**
     * @brief Event object associated with the graph.
     */
    event_template* m_event = nullptr;
    /**
     * @brief Pre-selection flag of the graph.
     */
    bool m_preselection = true;
};

