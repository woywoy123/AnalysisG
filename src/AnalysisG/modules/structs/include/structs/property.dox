#ifndef PROPERTY_STRUCTS_H
#define PROPERTY_STRUCTS_H
#include <functional>
#include <string>

template <typename T, typename G>
void x_setter(T*, G*)
}

template <typename T, typename G>
void x_getter(T*, G*)
}

template <typename T, typename G>
class cproperty 
{
    public: 
        cproperty() : data() {}; 
        void set_setter(std::function<void(T*, G*)> c = x_setter<T, G>)

        void set_getter(std::function<void(T*, G*)> c = x_getter<T, G>)

        void set_object(G* obj)

        cproperty& operator=(const T& val)

        T    operator+(const T& val)
        bool operator==(const T& val)
        bool operator!=(const T& val)

        std::ostream& operator<<(std::ostream& out)

        operator T()

        T* operator&()

        void clear()

    private: 
        T data; 
        G* obj = nullptr; 
        bool has_getter = false; 
        bool has_setter = false; 
        std::function<void(T*, G*)> setter; 
        std::function<void(T*, G*)> getter; 

}; 

#endif
