# -*- coding: utf-8 -*-
"""
Sphinx configuration file for AnalysisG Documentation

This configuration sets up Sphinx with Breathe to integrate Doxygen-generated
C++ documentation into a Sphinx-based documentation system for Read the Docs.
"""

import os
import sys
import subprocess
from pathlib import Path

# -- Path setup --------------------------------------------------------------

# Add any paths that contain custom themes or extensions here
sys.path.insert(0, os.path.abspath('.'))

# -- Project information -----------------------------------------------------

project = 'AnalysisG'
copyright = '2024, AnalysisG Team'
author = 'AnalysisG Team'
version = '2.0'
release = '2.0.0'

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.autosummary',
    'sphinx.ext.intersphinx',
    'sphinx.ext.viewcode',
    'sphinx.ext.napoleon',
    'sphinx.ext.todo',
    'sphinx.ext.mathjax',
    'sphinx.ext.graphviz',
    'breathe',
    'myst_parser',
]

# Breathe Configuration - Integration with Doxygen
breathe_projects = {
    "AnalysisG": "./output/xml"
}
breathe_default_project = "AnalysisG"
breathe_default_members = ('members', 'undoc-members')
breathe_show_include = True
breathe_show_enumvalue_initializer = True

# Napoleon settings for Google/NumPy docstrings
napoleon_google_docstring = True
napoleon_numpy_docstring = True
napoleon_include_init_with_doc = True
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = True
napoleon_use_admonition_for_examples = True
napoleon_use_admonition_for_notes = True
napoleon_use_admonition_for_references = True
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = True
napoleon_preprocess_types = False
napoleon_type_aliases = None
napoleon_attr_annotations = True

# Add any paths that contain templates here
templates_path = ['_templates']

# List of patterns to exclude
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store', 'output']

# The master toctree document
master_doc = 'index'

# The language for content autogenerated by Sphinx
language = 'en'

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages
html_theme = 'sphinx_rtd_theme'

# Theme options
html_theme_options = {
    'canonical_url': '',
    'analytics_id': '',
    'logo_only': False,
    'display_version': True,
    'prev_next_buttons_location': 'bottom',
    'style_external_links': False,
    'vcs_pageview_mode': '',
    'style_nav_header_background': '#2980B9',
    # Toc options
    'collapse_navigation': False,
    'sticky_navigation': True,
    'navigation_depth': 4,
    'includehidden': True,
    'titles_only': False
}

# Add any paths that contain custom static files here
html_static_path = ['_static']

# Custom sidebar templates
html_sidebars = {
    '**': [
        'globaltoc.html',
        'relations.html',
        'sourcelink.html',
        'searchbox.html',
    ]
}

# The name of an image file (relative to this directory) to place at the top
# of the sidebar
# html_logo = None

# The name of an image file (within the static path) to use as favicon
# html_favicon = None

# If true, links to the reST sources are added to the pages
html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer
html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer
html_show_copyright = True

# Output file base name for HTML help builder
htmlhelp_basename = 'AnalysisGdoc'

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    'papersize': 'a4paper',
    'pointsize': '10pt',
}

# Grouping the document tree into LaTeX files
latex_documents = [
    (master_doc, 'AnalysisG.tex', 'AnalysisG Documentation',
     'AnalysisG Team', 'manual'),
]

# -- Options for manual page output ------------------------------------------

# One entry per manual page
man_pages = [
    (master_doc, 'analysisg', 'AnalysisG Documentation',
     [author], 1)
]

# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files
texinfo_documents = [
    (master_doc, 'AnalysisG', 'AnalysisG Documentation',
     author, 'AnalysisG', 'Graph Neural Network Framework for HEP Analysis',
     'Miscellaneous'),
]

# -- Options for Epub output -------------------------------------------------

epub_title = project
epub_exclude_files = ['search.html']

# -- Extension configuration -------------------------------------------------

# Todo extension
todo_include_todos = True

# Intersphinx configuration
intersphinx_mapping = {
    'python': ('https://docs.python.org/3', None),
    'numpy': ('https://numpy.org/doc/stable/', None),
    'torch': ('https://pytorch.org/docs/stable/', None),
}

# MyST Parser settings
myst_enable_extensions = [
    "colon_fence",
    "deflist",
    "dollarmath",
    "fieldlist",
    "html_admonition",
    "html_image",
    "replacements",
    "smartquotes",
    "strikethrough",
    "substitution",
    "tasklist",
]

# -- Run Doxygen before Sphinx -----------------------------------------------

def run_doxygen(app):
    """Run Doxygen to generate XML files before Sphinx build"""
    doxygen_dir = Path(__file__).parent
    doxyfile_path = doxygen_dir / "Doxyfile"
    
    if doxyfile_path.exists():
        print("Running Doxygen...")
        try:
            subprocess.run(
                ['doxygen', str(doxyfile_path)],
                cwd=str(doxygen_dir),
                check=True,
                capture_output=True,
                text=True
            )
            print("Doxygen completed successfully")
        except subprocess.CalledProcessError as e:
            print(f"Doxygen failed: {e}")
            print(f"stdout: {e.stdout}")
            print(f"stderr: {e.stderr}")
    else:
        print(f"Warning: Doxyfile not found at {doxyfile_path}")

def setup(app):
    """Sphinx setup hook"""
    app.connect('builder-inited', run_doxygen)
