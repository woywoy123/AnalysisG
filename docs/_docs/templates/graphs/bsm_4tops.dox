#include "graphs.h"
#include "graph_features.h"
#include "node_features.h"
#include "edge_features.h"

// ---------------- GRAPH-TOPS ------------------- //

/**
 * @brief Represents a graph where nodes correspond to the reconstructed top quarks in a bsm_4tops event.
 *
 * This graph type focuses solely on the top quarks themselves, extracting their properties
 * and event-level information. It does not include information about decay products or jets directly
 * as nodes, but uses event-level features like MET.
 */
/**
 * @brief graph_tops Klasse
 * 
 * Detaillierte Beschreibung der graph_tops Klasse
 */
class graph_tops: public graph_template
{
    public:
        /**
         * @brief Default constructor for graph_tops.
         * Initializes the graph name to "graph_tops".
         */
        graph_tops();

        /**
         * @brief Virtual destructor for graph_tops.
         */
        virtual ~graph_tops();

        /**
         * @brief Creates a new instance of graph_tops.
         * Used for polymorphic cloning of graph objects.
         * @return A pointer to a new graph_tops object, cast to graph_template*.
         */
        graph_template* clone() override;

        /**
         * @brief Compiles the graph structure and features for the current event.
         * This method defines the nodes based on the `Tops` collection in the `bsm_4tops` event,
         * and adds various graph-level, node-level, and edge-level features (both truth and data).
         */
        void CompileEvent() override;
        // Implementation replaced with comments:
        // {
        //     // Retrieve the bsm_4tops event object associated with this graph instance.
        //     // Define the graph nodes using the particles stored in the event's 'Tops' vector.
        //
        //     // --- Add Truth Features ---
        //     // Add a graph-level truth feature indicating if the event is a signal event (contains resonant tops).
        //     // Add a graph-level truth feature for the number of top quarks in the event.
        //     // Add a node-level truth feature identifying the top quark index for each node.
        //     // Add a node-level truth feature indicating if the top quark originated from a resonance.
        //     // Add an edge-level truth feature indicating if the connected nodes (tops) originated from the same resonance.
        //
        //     // --- Add Data Features ---
        //     // Add a graph-level data feature for the event's missing transverse energy (MET).
        //     // Add a graph-level data feature for the event's MET phi angle.
        //     // Add a graph-level data feature for the event weight.
        //     // Add a graph-level data feature for the event number.
        //     // Add node-level data features for particle kinematics (pt, eta, phi, energy).
        //     // Add a node-level data feature for particle charge.
        // }
};

// ---------------- GRAPH-CHILDREN ------------------- //

/**
 * @brief Represents a graph where nodes correspond to the stable decay products (children) of the top quarks.
 *
 * This graph type focuses on the final state particles originating from top decays (leptons, neutrinos, quarks).
 * It establishes a fully connected topology between these particles and includes event-level information.
 */
/**
 * @brief graph_children Klasse
 * 
 * Detaillierte Beschreibung der graph_children Klasse
 */
class graph_children: public graph_template
{
    public:
        /**
         * @brief Default constructor for graph_children.
         * Initializes the graph name to "graph_children".
         */
        graph_children();

        /**
         * @brief Virtual destructor for graph_children.
         */
        virtual ~graph_children();

        /**
         * @brief Creates a new instance of graph_children.
         * Used for polymorphic cloning of graph objects.
         * @return A pointer to a new graph_children object, cast to graph_template*.
         */
        graph_template* clone() override;

        /**
         * @brief Compiles the graph structure and features for the current event.
         * This method defines the nodes based on the `Children` collection in the `bsm_4tops` event,
         * sets a fully connected topology, and adds various graph-level, node-level, and edge-level
         * features (both truth and data).
         */
/**
 * @brief CompileEvent Funktion
 * 
 * Detaillierte Beschreibung der CompileEvent Funktion
 */
        void CompileEvent() override;
        // Implementation replaced with comments:
        // {
        //     // Retrieve the bsm_4tops event object associated with this graph instance.
        //     // Define the graph nodes using the particles stored in the event's 'Children' vector.
        //     // Define the graph topology as fully connected (all nodes connected to all others).
        //
        //     // --- Add Truth Features ---
        //     // Add a graph-level truth feature indicating if the event is a signal event.
        //     // Add a graph-level truth feature for the number of neutrinos from top decays.
        //     // Add a graph-level truth feature for the number of leptons (excluding neutrinos) from top decays.
        //     // Add a graph-level truth feature for the total number of top quarks in the event.
        //     // Add a node-level truth feature identifying the parent top quark index for each node (child particle).
        //     // Add a node-level truth feature indicating if the parent top quark originated from a resonance.
        //     // Add an edge-level truth feature indicating if the connected nodes (children) originated from the same resonance.
        //     // Add an edge-level truth feature indicating if the connected nodes (children) originated from the same top quark.
        //
        //     // --- Add Data Features ---
        //     // Add a graph-level data feature for the event's missing transverse energy (MET).
        //     // Add a graph-level data feature for the event's MET phi angle.
        //     // Add a graph-level data feature for the number of quarks among the children.
        //     // Add a graph-level data feature for the number of leptons (excluding neutrinos) among the children.
        //     // Add a graph-level data feature for the event weight.
        //     // Add a graph-level data feature for the event number.
        //     // Add node-level data features for particle kinematics (pt, eta, phi, energy).
        //     // Add node-level data feature for particle charge.
        //     // Add node-level data features identifying particle type (is_lepton, is_bquark, is_neutrino).
        // }
};

// ---------------- GRAPH-TRUTHJETS ------------------- //

/**
 * @brief Represents a graph combining truth jets and stable leptons/neutrinos from top decays.
 *
 * This graph uses truth jets along with the leptons and neutrinos from the `Children` collection
 * as nodes. It aims to represent the event closer to what might be reconstructed, but still
 * relies on truth-level jet information. A fully connected topology is used.
 */
/**
 * @brief graph_truthjets Klasse
 * 
 * Detaillierte Beschreibung der graph_truthjets Klasse
 */
class graph_truthjets: public graph_template
{
    public:
        /**
         * @brief Default constructor for graph_truthjets.
         * Initializes the graph name to "graph_truthjets".
         */
        graph_truthjets();

        /**
         * @brief Virtual destructor for graph_truthjets.
         */
        virtual ~graph_truthjets();

        /**
         * @brief Creates a new instance of graph_truthjets.
         * Used for polymorphic cloning of graph objects.
         * @return A pointer to a new graph_truthjets object, cast to graph_template*.
         */
        graph_template* clone() override;

        /**
         * @brief Compiles the graph structure and features for the current event.
         * This method defines nodes using leptons and neutrinos from `Children` and all `TruthJets`.
         * It sets a fully connected topology and adds graph, node, and edge features.
         */
        void CompileEvent() override;
        // Implementation replaced with comments:
        // {
        //     // Retrieve the bsm_4tops event object associated with this graph instance.
        //     // Create a combined list of nodes:
        //     // - Include leptons and neutrinos from the event's 'Children' vector.
        //     // - Include all particles from the event's 'TruthJets' vector.
        //     // Define the graph nodes using this combined list.
        //     // Define the graph topology as fully connected.
        //
        //     // --- Add Truth Features ---
        //     // Add a graph-level truth feature indicating if the event is a signal event.
        //     // Add a graph-level truth feature for the number of neutrinos from top decays.
        //     // Add a graph-level truth feature for the number of leptons (excluding neutrinos) from top decays.
        //     // Add a graph-level truth feature for the total number of top quarks in the event.
        //     // Add a node-level truth feature identifying the parent top quark index for each node.
        //     // Add a node-level truth feature indicating if the parent top quark originated from a resonance.
        //     // Add an edge-level truth feature indicating if the connected nodes originated from the same resonance.
        //     // Add an edge-level truth feature indicating if the connected nodes originated from the same top quark.
        //
        //     // --- Add Data Features ---
        //     // Add a graph-level data feature for the event's missing transverse energy (MET).
        //     // Add a graph-level data feature for the event's MET phi angle.
        //     // Add a graph-level data feature for the number of truth jets in the event.
        //     // Add a graph-level data feature for the number of leptons (excluding neutrinos) among the children.
        //     // Add a graph-level data feature for the event weight.
        //     // Add a graph-level data feature for the event number.
        //     // Add node-level data features for particle kinematics (pt, eta, phi, energy).
        //     // Add node-level data feature for particle charge.
        //     // Add node-level data features identifying particle type (is_lepton, is_bquark, is_neutrino).
        // }
};

// ---------------- GRAPH-TRUTHJETS (No Neutrino) ------------------- //

/**
 * @brief Represents a graph combining truth jets and stable leptons (excluding neutrinos) from top decays.
 *
 * Similar to `graph_truthjets`, but excludes neutrinos from the node list. This might be used
 * to simulate scenarios where neutrinos are not directly included in the graph structure.
 * A fully connected topology is used. The `double_neutrino()` method is called, likely
 * to add neutrino information implicitly or as separate features.
 */
/**
 * @brief graph_truthjets_nonu Klasse
 * 
 * Detaillierte Beschreibung der graph_truthjets_nonu Klasse
 */
class graph_truthjets_nonu: public graph_template
{
    public:
        /**
         * @brief Default constructor for graph_truthjets_nonu.
         * Initializes the graph name to "graph_truthjets_nonu".
         */
        graph_truthjets_nonu();

        /**
         * @brief Virtual destructor for graph_truthjets_nonu.
         */
        virtual ~graph_truthjets_nonu();

        /**
         * @brief Creates a new instance of graph_truthjets_nonu.
         * Used for polymorphic cloning of graph objects.
         * @return A pointer to a new graph_truthjets_nonu object, cast to graph_template*.
         */
        graph_template* clone() override;

        /**
         * @brief Compiles the graph structure and features for the current event, excluding neutrinos as nodes.
         * Defines nodes using leptons (no neutrinos) from `Children` and all `TruthJets`.
         * Sets a fully connected topology, adds features, and calls `double_neutrino()`.
         */
        void CompileEvent() override;
        // Implementation replaced with comments:
        // {
        //     // Retrieve the bsm_4tops event object associated with this graph instance.
        //     // Create a combined list of nodes:
        //     // - Include only leptons (excluding neutrinos) from the event's 'Children' vector.
        //     // - Include all particles from the event's 'TruthJets' vector.
        //     // Define the graph nodes using this combined list.
        //     // Define the graph topology as fully connected.
        //
        //     // --- Add Truth Features ---
        //     // Add a graph-level truth feature indicating if the event is a signal event.
        //     // Add a graph-level truth feature for the number of leptons (excluding neutrinos) from top decays.
        //     // Add a graph-level truth feature for the total number of top quarks in the event.
        //     // Add a node-level truth feature identifying the parent top quark index for each node.
        //     // Add a node-level truth feature indicating if the parent top quark originated from a resonance.
        //     // Add an edge-level truth feature indicating if the connected nodes originated from the same resonance.
        //     // Add an edge-level truth feature indicating if the connected nodes originated from the same top quark.
        //
        //     // --- Add Data Features ---
        //     // Add a graph-level data feature for the event's missing transverse energy (MET).
        //     // Add a graph-level data feature for the event's MET phi angle.
        //     // Add a graph-level data feature for the number of truth jets in the event.
        //     // Add a graph-level data feature for the number of leptons (excluding neutrinos) among the children.
        //     // Add a graph-level data feature for the event weight.
        //     // Add a graph-level data feature for the event number.
        //     // Add node-level data features for particle kinematics (pt, eta, phi, energy).
        //     // Add node-level data feature for particle charge.
        //     // Add node-level data features identifying particle type (is_lepton, is_bquark).
        //     // Call a method (double_neutrino) potentially to add neutrino information implicitly or as separate features.
        // }
};


// ---------------- GRAPH-JETS ------------------- //

/**
 * @brief Represents a graph combining reconstructed jets and stable leptons/neutrinos from top decays.
 *
 * This graph uses reconstructed jets (`Jets` collection) along with the leptons and neutrinos
 * from the `Children` collection as nodes. This moves closer to a detector-level representation
 * by using reconstructed jets instead of truth jets. A fully connected topology is used.
 * Includes an optional preselection step (currently commented out).
 */
/**
 * @brief graph_jets Klasse
 * 
 * Detaillierte Beschreibung der graph_jets Klasse
 */
class graph_jets: public graph_template
{
    public:
        /**
         * @brief Default constructor for graph_jets.
         * Initializes the graph name to "graph_jets".
         */
        graph_jets();

        /**
         * @brief Virtual destructor for graph_jets.
         */
        virtual ~graph_jets();

        /**
         * @brief Creates a new instance of graph_jets.
         * Used for polymorphic cloning of graph objects.
         * @return A pointer to a new graph_jets object, cast to graph_template*.
         */
        graph_template* clone() override;

        /**
         * @brief Optional preselection step before compiling the event.
         * Can be used to filter events based on certain criteria before graph construction.
         * The current implementation is commented out but intended to select events with
         * exactly two same-sign leptons. Currently, it always returns true.
         * @return True if the event passes preselection, false otherwise.
         */
        bool PreSelection() override;
        // Implementation replaced with comments:
        // {
        //     // Retrieve the bsm_4tops event object.
        //     // Collect all electrons and muons into a single lepton vector.
        //     // (Commented out) Check if the number of leptons is exactly 2. If not, return false.
        //     // (Commented out) Check if the two leptons have the same charge. If not, return false.
        //     // Return true (currently always returns true).
        // }


        /**
         * @brief Compiles the graph structure and features for the current event using reconstructed jets.
         * Defines nodes using leptons and neutrinos from `Children` and all `Jets`.
         * Sets a fully connected topology and adds graph, node, and edge features.
         */
        void CompileEvent() override;
        // Implementation replaced with comments:
        // {
        //     // Retrieve the bsm_4tops event object associated with this graph instance.
        //     // Create a combined list of nodes:
        //     // - Include leptons and neutrinos from the event's 'Children' vector.
        //     // - Include all particles from the event's 'Jets' vector.
        //     // Define the graph nodes using this combined list.
        //     // Define the graph topology as fully connected.
        //
        //     // --- Add Truth Features ---
        //     // Add a graph-level truth feature indicating if the event is a signal event.
        //     // Add a graph-level truth feature for the number of leptons (excluding neutrinos) from top decays.
        //     // Add a graph-level truth feature for the total number of top quarks in the event.
        //     // Add a node-level truth feature identifying the parent top quark index for each node.
        //     // Add a node-level truth feature indicating if the parent top quark originated from a resonance.
        //     // Add an edge-level truth feature indicating if the connected nodes originated from the same resonance.
        //     // Add an edge-level truth feature indicating if the connected nodes originated from the same top quark.
        //
        //     // --- Add Data Features ---
        //     // Add a graph-level data feature for the event's missing transverse energy (MET).
        //     // Add a graph-level data feature for the event's MET phi angle.
        //     // Add a graph-level data feature for the number of reconstructed jets in the event.
        //     // Add a graph-level data feature for the number of leptons (excluding neutrinos) among the children.
        //     // Add a graph-level data feature for the event weight.
        //     // Add a graph-level data feature for the event number.
        //     // Add node-level data features for particle kinematics (pt, eta, phi, energy).
        //     // Add node-level data feature for particle charge.
        //     // Add node-level data features identifying particle type (is_lepton, is_bquark).
        // }
};

// ---------------- GRAPH-JETS (No Neutrino) ------------------- //

/**
 * @brief Represents a graph combining reconstructed jets and stable leptons (excluding neutrinos) from top decays.
 *
 * Similar to `graph_jets`, but excludes neutrinos from the node list. Uses reconstructed jets.
 * A fully connected topology is used. The `double_neutrino()` method is called.
 */
class graph_jets_nonu: public graph_template
{
    public:
        /**
         * @brief Default constructor for graph_jets_nonu.
         * Initializes the graph name to "graph_jets_nonu".
         */
        graph_jets_nonu();

        /**
         * @brief Virtual destructor for graph_jets_nonu.
         */
        virtual ~graph_jets_nonu();

        /**
         * @brief Creates a new instance of graph_jets_nonu.
         * Used for polymorphic cloning of graph objects.
         * @return A pointer to a new graph_jets_nonu object, cast to graph_template*.
         */
        graph_template* clone() override;

        /**
         * @brief Compiles the graph structure and features using reconstructed jets, excluding neutrinos as nodes.
         * Defines nodes using leptons (no neutrinos) from `Children` and all `Jets`.
         * Sets a fully connected topology, adds features, and calls `double_neutrino()`.
         */
        void CompileEvent() override;
        // Implementation replaced with comments:
        // {
        //     // Retrieve the bsm_4tops event object associated with this graph instance.
        //     // Create a combined list of nodes:
        //     // - Include only leptons (excluding neutrinos) from the event's 'Children' vector.
        //     // - Include all particles from the event's 'Jets' vector.
        //     // Define the graph nodes using this combined list.
        //     // Define the graph topology as fully connected.
        //
        //     // --- Add Truth Features ---
        //     // Add a graph-level truth feature indicating if the event is a signal event.
        //     // Add a graph-level truth feature for the number of leptons (excluding neutrinos) from top decays.
        //     // Add a graph-level truth feature for the total number of top quarks in the event.
        //     // Add a node-level truth feature identifying the parent top quark index for each node.
        //     // Add a node-level truth feature indicating if the parent top quark originated from a resonance.
        //     // Add an edge-level truth feature indicating if the connected nodes originated from the same resonance.
        //     // Add an edge-level truth feature indicating if the connected nodes originated from the same top quark.
        //
        //     // --- Add Data Features ---
        //     // Add a graph-level data feature for the event's missing transverse energy (MET).
        //     // Add a graph-level data feature for the event's MET phi angle.
        //     // Add a graph-level data feature for the number of reconstructed jets in the event.
        //     // Add a graph-level data feature for the number of leptons (excluding neutrinos) among the children.
        //     // Add a graph-level data feature for the event weight.
        //     // Add a graph-level data feature for the event number.
        //     // Add node-level data features for particle kinematics (pt, eta, phi, energy).
        //     // Add node-level data feature for particle charge.
        //     // Add node-level data features identifying particle type (is_lepton, is_bquark).
        //     // Call a method (double_neutrino) potentially to add neutrino information implicitly or as separate features.
        // }
};


// ---------------- GRAPH-JETS-Detector leptons (with Neutrino) ------------------- //

/**
 * @brief Represents a graph combining reconstructed jets, reconstructed detector leptons, and truth neutrinos.
 *
 * This graph uses reconstructed jets (`Jets`), reconstructed leptons (`Electrons`, `Muons`),
 * and truth neutrinos from the `Children` collection as nodes. This mixes detector-level objects
 * (jets, leptons) with truth information (neutrinos). A fully connected topology is used.
 */
/**
 * @brief graph_jets_detector_lep Klasse
 * 
 * Detaillierte Beschreibung der graph_jets_detector_lep Klasse
 */
class graph_jets_detector_lep: public graph_template
{
    public:
        /**
         * @brief Default constructor for graph_jets_detector_lep.
         * Initializes the graph name to "graph_jets_detector_lep".
         */
        graph_jets_detector_lep();

        /**
         * @brief Virtual destructor for graph_jets_detector_lep.
         */
        virtual ~graph_jets_detector_lep();

        /**
         * @brief Creates a new instance of graph_jets_detector_lep.
         * Used for polymorphic cloning of graph objects.
         * @return A pointer to a new graph_jets_detector_lep object, cast to graph_template*.
         */
        graph_template* clone() override;

        /**
         * @brief Compiles the graph using detector leptons, jets, and truth neutrinos.
         * Defines nodes using `Muons`, `Electrons`, neutrinos from `Children`, and `Jets`.
         * Sets a fully connected topology and adds graph, node, and edge features.
         */
        void CompileEvent() override;
        // Implementation replaced with comments:
        // {
        //     // Retrieve the bsm_4tops event object associated with this graph instance.
        //     // Create a combined list of nodes:
        //     // - Include all particles from the event's 'Muons' vector.
        //     // - Include all particles from the event's 'Electrons' vector.
        //     // - Include only neutrinos from the event's 'Children' vector.
        //     // - Include all particles from the event's 'Jets' vector.
        //     // Define the graph nodes using this combined list.
        //     // Define the graph topology as fully connected.
        //
        //     // --- Add Truth Features ---
        //     // Add a graph-level truth feature indicating if the event is a signal event.
        //     // Add a graph-level truth feature for the number of leptons (excluding neutrinos) from top decays (truth info).
        //     // Add a graph-level truth feature for the total number of top quarks in the event.
        //     // Add a node-level truth feature identifying the parent top quark index for each node.
        //     // Add a node-level truth feature indicating if the parent top quark originated from a resonance.
        //     // Add an edge-level truth feature indicating if the connected nodes originated from the same resonance.
        //     // Add an edge-level truth feature indicating if the connected nodes originated from the same top quark.
        //
        //     // --- Add Data Features ---
        //     // Add a graph-level data feature for the event's missing transverse energy (MET).
        //     // Add a graph-level data feature for the event's MET phi angle.
        //     // Add a graph-level data feature for the number of reconstructed jets in the event.
        //     // Add a graph-level data feature for the number of reconstructed leptons (electrons + muons).
        //     // Add a graph-level data feature for the event weight.
        //     // Add a graph-level data feature for the event number.
        //     // Add node-level data features for particle kinematics (pt, eta, phi, energy).
        //     // Add node-level data feature for particle charge.
        //     // Add node-level data features identifying particle type (is_lepton, is_bquark). Note: is_lepton might be based on detector info for muons/electrons.
        // }
};

// ---------------- GRAPH-JETS-Detector leptons (without Neutrino) ------------------- //

/**
 * @brief Represents a graph using only reconstructed detector objects: jets, electrons, and muons.
 *
 * This graph type aims for a purely detector-level representation, using only the reconstructed
 * `Jets`, `Electrons`, and `Muons` collections as nodes. Neutrinos are explicitly excluded
 * from the nodes. A fully connected topology is used. The `double_neutrino()` method is called.
 */
/**
 * @brief graph_detector Klasse
 * 
 * Detaillierte Beschreibung der graph_detector Klasse
 */
class graph_detector: public graph_template
{
    public:
        /**
         * @brief Default constructor for graph_detector.
         * Initializes the graph name to "graph_detector".
         */
        graph_detector();

        /**
         * @brief Virtual destructor for graph_detector.
         */
        virtual ~graph_detector();

        /**
         * @brief Creates a new instance of graph_detector.
         * Used for polymorphic cloning of graph objects.
         * @return A pointer to a new graph_detector object, cast to graph_template*.
         */
        graph_template* clone() override;

        /**
         * @brief Compiles the graph using only detector-level jets and leptons (no neutrinos).
         * Defines nodes using `Muons`, `Electrons`, and `Jets`.
         * Sets a fully connected topology, adds features, and calls `double_neutrino()`.
         */
        void CompileEvent() override;
        // Implementation replaced with comments:
        // {
        //     // Retrieve the bsm_4tops event object associated with this graph instance.
        //     // Create a combined list of nodes:
        //     // - Include all particles from the event's 'Muons' vector.
        //     // - Include all particles from the event's 'Electrons' vector.
        //     // - Include all particles from the event's 'Jets' vector.
        //     // Define the graph nodes using this combined list.
        //     // Define the graph topology as fully connected.
        //
        //     // --- Add Truth Features ---
        //     // Add a graph-level truth feature indicating if the event is a signal event.
        //     // Add a graph-level truth feature for the number of leptons (excluding neutrinos) from top decays (truth info).
        //     // Add a graph-level truth feature for the total number of top quarks in the event.
        //     // Add a node-level truth feature identifying the parent top quark index for each node (based on truth matching).
        //     // Add a node-level truth feature indicating if the parent top quark originated from a resonance (based on truth matching).
        //     // Add an edge-level truth feature indicating if the connected nodes originated from the same resonance (based on truth matching).
        //     // Add an edge-level truth feature indicating if the connected nodes originated from the same top quark (based on truth matching).
        //
        //     // --- Add Data Features ---
        //     // Add a graph-level data feature for the event's missing transverse energy (MET).
        //     // Add a graph-level data feature for the event's MET phi angle.
        //     // Add a graph-level data feature for the number of reconstructed jets in the event.
        //     // Add a graph-level data feature for the number of reconstructed leptons (electrons + muons).
        //     // Add a graph-level data feature for the event weight.
        //     // Add a graph-level data feature for the event number.
        //     // Add node-level data features for particle kinematics (pt, eta, phi, energy).
        //     // Add node-level data feature for particle charge.
        //     // Add node-level data features identifying particle type (is_lepton, is_bquark). Note: is_lepton is based on detector info, is_b based on truth matching or b-tagging.
        //     // Call a method (double_neutrino) potentially to add neutrino information implicitly or as separate features.
        // }
};


// ======================================================================== //
//                           EDGE FEATURES                                  //
// ======================================================================== //

#ifndef EDGE_FEATURES_BSM_4TOPS_H
#define EDGE_FEATURES_BSM_4TOPS_H

// --------------------- Edge Truth --------------------- //

/**
 * @brief Helper function (overload for top) to update the resonance edge flag.
 * Multiplies the output flag by the `from_res` flag of the top quark.
 * @param o Pointer to the output integer flag (modified in place).
 * @param t Pointer to the top quark object.
 */
void static m_res_edge(int* o, top* t);
// Implementation replaced with comments:
// { /* Multiplies *o by t->from_res */ }

/**
 * @brief Helper function (overload for top_children) to update the resonance edge flag.
 * Multiplies the output flag by the `from_res` flag of the top child.
 * @param o Pointer to the output integer flag (modified in place).
 * @param t Pointer to the top_children object.
 */
void static m_res_edge(int* o, top_children* t);
// Implementation replaced with comments:
// { /* Multiplies *o by t->from_res */ }

/**
 * @brief Helper function (overload for truthjet) to update the resonance edge flag.
 * Multiplies the output flag by the `from_res` flag of the truth jet.
 * @param o Pointer to the output integer flag (modified in place).
 * @param t Pointer to the truthjet object.
 */
void static m_res_edge(int* o, truthjet* t);
// Implementation replaced with comments:
// { /* Multiplies *o by t->from_res */ }

/**
 * @brief Helper function (overload for jet) to update the resonance edge flag.
 * Multiplies the output flag by the `from_res` flag of the jet (likely based on truth matching).
 * @param o Pointer to the output integer flag (modified in place).
 * @param t Pointer to the jet object.
 */
void static m_res_edge(int* o, jet* t);
// Implementation replaced with comments:
// { /* Multiplies *o by t->from_res */ }

/**
 * @brief Helper function (overload for electron) to update the resonance edge flag.
 * Multiplies the output flag by the `from_res` flag of the electron (likely based on truth matching).
 * @param o Pointer to the output integer flag (modified in place).
 * @param t Pointer to the electron object.
 */
void static m_res_edge(int* o, electron* t);
// Implementation replaced with comments:
// { /* Multiplies *o by t->from_res */ }

/**
 * @brief Helper function (overload for muon) to update the resonance edge flag.
 * Multiplies the output flag by the `from_res` flag of the muon (likely based on truth matching).
 * @param o Pointer to the output integer flag (modified in place).
 * @param t Pointer to the muon object.
 */
void static m_res_edge(int* o, muon* t);
// Implementation replaced with comments:
// { /* Multiplies *o by t->from_res */ }


/**
 * @brief Calculates the resonance edge truth feature for a pair of particles.
 * This feature is 1 if both particles originate from a resonance (based on their `from_res` flag),
 * and 0 otherwise. It uses dynamic casting or type checking to call the appropriate `m_res_edge` helper.
 * @param o Pointer to the output integer where the result (0 or 1) is stored.
 * @param pij Pointer to a tuple containing pointers to the two particles forming the edge.
 */
void static res_edge(int* o, std::tuple<particle_template*, particle_template*>* pij);
// Implementation replaced with comments:
// {
//     // Get pointers to the two particles from the tuple.
//     // Get the type strings of both particles.
//     // Initialize the output flag *o to 1.
//     // Based on the type string of particle 1, call the corresponding m_res_edge overload.
//     // Based on the type string of particle 2, call the corresponding m_res_edge overload.
//     // The final value of *o will be 1 only if both particles had from_res = true.
// }

/**
 * @brief Helper function (overload for top) to get the top index.
 * @param t Pointer to the top quark object.
 * @return The index of the top quark.
 */
int static m_top_edge(top* t);
// Implementation replaced with comments:
// { /* Returns t->index */ }

/**
 * @brief Helper function (overload for top_children) to get the parent top index.
 * @param t Pointer to the top_children object.
 * @return The index of the parent top quark.
 */
int static m_top_edge(top_children* t);
// Implementation replaced with comments:
// { /* Returns t->top_index */ }

/**
 * @brief Helper function (overload for truthjet) to get the associated top index(es).
 * Truth jets can be associated with multiple tops due to overlap.
 * @param t Pointer to the truthjet object.
 * @return A vector of parent top quark indices.
 */
std::vector<int> static m_top_edge(truthjet* t);
// Implementation replaced with comments:
// { /* Returns t->top_index */ }

/**
 * @brief Helper function (overload for jet) to get the associated top index(es) (via truth matching).
 * Reconstructed jets can be associated with multiple tops.
 * @param t Pointer to the jet object.
 * @return A vector of matched parent top quark indices.
 */
std::vector<int> static m_top_edge(jet* t);
// Implementation replaced with comments:
// { /* Returns t->top_index */ }

/**
 * @brief Helper function (overload for electron) to get the associated top index (via truth matching).
 * @param t Pointer to the electron object.
 * @return A vector containing the matched parent top quark index (or -1 if none).
 */
std::vector<int> static m_top_edge(electron* t);
// Implementation replaced with comments:
// { /* Returns {t->top_index} */ }

/**
 * @brief Helper function (overload for muon) to get the associated top index (via truth matching).
 * @param t Pointer to the muon object.
 * @return A vector containing the matched parent top quark index (or -1 if none).
 */
std::vector<int> static m_top_edge(muon* t);
// Implementation replaced with comments:
// { /* Returns {t->top_index} */ }

/**
 * @brief Calculates the top edge truth feature for a pair of particles.
 * This feature is 1 if both particles originate from the same top quark, and 0 otherwise.
 * It handles cases where particles (like jets) might be associated with multiple tops.
 * @param o Pointer to the output integer where the result (0 or 1) is stored.
 * @param pij Pointer to a tuple containing pointers to the two particles forming the edge.
 */
void static top_edge(int* o, std::tuple<particle_template*, particle_template*>* pij);
// Implementation replaced with comments:
// {
//     // Get pointers to the two particles from the tuple.
//     // Get the type strings of both particles.
//     // Initialize empty vectors o1_ and o2_ to store top indices for particle 1 and 2.
//     // Based on the type string of particle 1, call the corresponding m_top_edge overload and store result(s) in o1_.
//     // Based on the type string of particle 2, call the corresponding m_top_edge overload and store result(s) in o2_.
//     // Initialize the output flag *o to 0.
//     // Iterate through the top indices associated with particle 1 (o1_).
//     //   Skip if the index is invalid (< 0).
//     //   Iterate through the top indices associated with particle 2 (o2_).
//     //     Skip if the index is invalid (< 0).
//     //     If an index from o1_ matches an index from o2_, set *o to 1 and return immediately.
//     // If no match is found after checking all pairs, *o remains 0.
// }

#endif // EDGE_FEATURES_BSM_4TOPS_H


// ======================================================================== //
//                           GRAPH FEATURES                                 //
// ======================================================================== //

#ifndef GRAPH_FEATURES_BSM_4TOPS_H
#define GRAPH_FEATURES_BSM_4TOPS_H

// ------------------ Truth Graph Features --------------------- //

/**
 * @brief Determines if the event is a signal event (contains at least one top from resonance).
 * Checks if the event has exactly 4 tops and if any of them have the `from_res` flag set.
 * @param o Pointer to the output boolean flag (true for signal, false for background).
 * @param event Pointer to the bsm_4tops event object.
 */
void static signal_event(bool* o, bsm_4tops* event);
// Implementation replaced with comments:
// {
//     // Check if the number of tops is not 4. If so, set *o to false and return.
//     // Iterate through the tops in the event.
//     //   Cast the particle_template* to top*.
//     //   Check if the top's from_res flag is true.
//     //   If yes, set *o to true and return.
//     // If the loop finishes without finding a resonant top, set *o to false.
// }

/**
 * @brief Gets the number of top quarks in the event (capped at 4).
 * @param o Pointer to the output integer where the number of tops is stored.
 * @param event Pointer to the bsm_4tops event object.
 */
void static num_tops(int* o, bsm_4tops* event);
// Implementation replaced with comments:
// {
//     // Set *o to the size of the event's Tops vector.
//     // If *o is greater than 4, cap it at 4.
// }

/**
 * @brief Counts the number of truth neutrinos among the top decay children.
 * @param o Pointer to the output integer where the count is stored.
 * @param event Pointer to the bsm_4tops event object.
 */
void static num_neutrino(int* o, bsm_4tops* event);
// Implementation replaced with comments:
// {
//     // Initialize a counter 'neutrinos' to 0.
//     // Iterate through the particles in the event's Children vector.
//     //   Cast the particle_template* to top_children*.
//     //   If the child's is_nu flag is true, increment 'neutrinos'.
//     // Set *o to the final count 'neutrinos'.
// }

/**
 * @brief Counts the number of truth leptons (excluding neutrinos) among the top decay children.
 * @param o Pointer to the output integer where the count is stored.
 * @param event Pointer to the bsm_4tops event object.
 */
void static num_lepton(int* o, bsm_4tops* event);
// Implementation replaced with comments:
// {
//     // Initialize a counter 'leptons' to 0.
//     // Iterate through the particles in the event's Children vector.
//     //   Cast the particle_template* to top_children*.
//     //   Skip if the child's is_nu flag is true.
//     //   If the child's is_lep flag is true, increment 'leptons'.
//     // Set *o to the final count 'leptons'.
// }

// --------------------- Graph Observables --------------------- //

/**
 * @brief Gets the missing transverse energy (MET) of the event.
 * @param o Pointer to the output double where the MET is stored.
 * @param event Pointer to the bsm_4tops event object.
 */
void static missing_et(double* o, bsm_4tops* event);
// Implementation replaced with comments:
// { /* Sets *o to event->met */ }

/**
 * @brief Gets the phi angle of the missing transverse energy (MET) vector.
 * @param o Pointer to the output double where the MET phi is stored.
 * @param event Pointer to the bsm_4tops event object.
 */
void static missing_phi(double* o, bsm_4tops* event);
// Implementation replaced with comments:
// { /* Sets *o to event->phi */ }

/**
 * @brief Counts the number of leptons (excluding neutrinos) among the top decay children.
 * Similar to `num_lepton` but outputs a double.
 * @param o Pointer to the output double where the count is stored.
 * @param event Pointer to the bsm_4tops event object.
 */
void static num_children_leps(double* o, bsm_4tops* event);
// Implementation replaced with comments:
// {
//     // Initialize *o to 0.0.
//     // Iterate through the particles in the event's Children vector.
//     //   Skip if the particle's is_nu flag is true or its is_lep flag is false.
//     //   Increment *o by 1.0.
// }

/**
 * @brief Counts the number of reconstructed leptons (electrons + muons) in the event.
 * @param o Pointer to the output double where the count is stored.
 * @param event Pointer to the bsm_4tops event object.
 */
void static num_leps(double* o, bsm_4tops* event);
// Implementation replaced with comments:
// {
//     // Set *o to the sum of the sizes of the event's Muons and Electrons vectors, cast to double.
// }

/**
 * @brief Counts the number of quarks among the top decay children.
 * @param o Pointer to the output double where the count is stored.
 * @param event Pointer to the bsm_4tops event object.
 */
void static num_quark(double* o, bsm_4tops* event);
// Implementation replaced with comments:
// {
//     // Initialize *o to 0.0.
//     // Iterate through the particles in the event's Children vector.
//     //   Skip if the particle's is_nu or is_lep flag is true.
//     //   Increment *o by 1.0.
// }

/**
 * @brief Gets the number of reconstructed jets in the event.
 * @param o Pointer to the output double where the jet count is stored.
 * @param event Pointer to the bsm_4tops event object.
 */
void static num_jets(double* o, bsm_4tops* event);
// Implementation replaced with comments:
// { /* Sets *o to the size of the event's Jets vector, cast to double */ }

/**
 * @brief Gets the number of truth jets in the event.
 * @param o Pointer to the output double where the truth jet count is stored.
 * @param event Pointer to the bsm_4tops event object.
 */
void static num_truthjets(double* o, bsm_4tops* event);
// Implementation replaced with comments:
// { /* Sets *o to the size of the event's TruthJets vector, cast to double */ }

/**
 * @brief Gets the event number.
 * @param o Pointer to the output long where the event number is stored.
 * @param event Pointer to the bsm_4tops event object.
 */
void static event_number(long* o, bsm_4tops* event);
// Implementation replaced with comments:
// { /* Sets *o to event->event_number */ }

/**
 * @brief Gets the event weight.
 * @param o Pointer to the output double where the event weight is stored.
 * @param event Pointer to the bsm_4tops event object.
 */
void static event_weight(double* o, bsm_4tops* event);
// Implementation replaced with comments:
// { /* Sets *o to event->weight */ }


#endif // GRAPH_FEATURES_BSM_4TOPS_H


// ======================================================================== //
//                           NODE FEATURES                                  //
// ======================================================================== //

#ifndef NODES_FEATURES_BSM_4TOPS_H
#define NODES_FEATURES_BSM_4TOPS_H

// --------------------- Node Truth --------------------- //

/**
 * @brief Gets the resonance node truth feature for a particle.
 * This feature is 1 if the particle originates from a resonance, 0 otherwise.
 * It checks the particle type and accesses the appropriate `from_res` flag.
 * @param o Pointer to the output integer where the result (0 or 1) is stored.
 * @param p Pointer to the particle_template object.
 */
void static res_node(int* o, particle_template* p);
// Implementation replaced with comments:
// {
//     // Get the type string of the particle.
//     // Based on the type string ("top", "children", "truthjets", "jet"), cast the particle pointer
//     //   to the specific type and set *o to its from_res flag.
//     // If the type is not one of the above, set *o to 0.
// }

/**
 * @brief Gets the top index node truth feature for a particle.
 * This feature is the index of the parent top quark associated with the particle.
 * Returns -1 if no top association is found or applicable.
 * For jets/truthjets which can have multiple associations, it returns the first one.
 * @param o Pointer to the output integer where the top index is stored.
 * @param p Pointer to the particle_template object.
 */
void static top_node(int* o, particle_template* p);
// Implementation replaced with comments:
// {
//     // Get the type string of the particle.
//     // If type is "top", set *o to ((top*)p)->index.
//     // If type is "children", set *o to ((top_children*)p)->top_index.
//     // If type is "truthjets", cast to truthjet*, check if top_index vector is empty.
//     //   If empty, set *o to -1, else set *o to the first element of top_index.
//     // If type is "jet", cast to jet*, check if top_index vector is empty.
//     //   If empty, set *o to -1, else set *o to the first element of top_index.
//     // If type is "mu", set *o to ((muon*)p)->index (Note: This seems incorrect, likely should be top_index).
//     // If type is "el", set *o to ((electron*)p)->index (Note: This seems incorrect, likely should be top_index).
//     // Otherwise, set *o to -1.
// }

// --------------------- Node Observables --------------------- //

/**
 * @brief Gets the transverse momentum (pt) of the particle.
 * @param o Pointer to the output double where pt is stored.
 * @param p Pointer to the particle_template object.
 */
void static pt(double* o, particle_template* p);
// Implementation replaced with comments:
// { /* Sets *o to p->pt */ }

/**
 * @brief Gets the pseudorapidity (eta) of the particle.
 * @param o Pointer to the output double where eta is stored.
 * @param p Pointer to the particle_template object.
 */
void static eta(double* o, particle_template* p);
// Implementation replaced with comments:
// { /* Sets *o to p->eta */ }

/**
 * @brief Gets the azimuthal angle (phi) of the particle.
 * @param o Pointer to the output double where phi is stored.
 * @param p Pointer to the particle_template object.
 */
void static phi(double* o, particle_template* p);
// Implementation replaced with comments:
// { /* Sets *o to p->phi */ }

/**
 * @brief Gets the energy (e) of the particle.
 * @param o Pointer to the output double where energy is stored.
 * @param p Pointer to the particle_template object.
 */
void static energy(double* o, particle_template* p);
// Implementation replaced with comments:
// { /* Sets *o to p->e */ }

/**
 * @brief Gets the charge of the particle, masked by whether it's a lepton.
 * Returns the particle's charge if it's a lepton (is_lep is true), otherwise returns 0.
 * @param o Pointer to the output double where the masked charge is stored.
 * @param p Pointer to the particle_template object.
 */
void static charge(double* o, particle_template* p);
// Implementation replaced with comments:
// { /* Sets *o to (p->charge) * (p->is_lep) */ }

/**
 * @brief Checks if the particle is a lepton (excluding neutrinos).
 * Returns 1 if `is_lep` is true and `is_nu` is false, otherwise 0.
 * @param o Pointer to the output integer where the flag (0 or 1) is stored.
 * @param p Pointer to the particle_template object.
 */
void static is_lepton(int* o, particle_template* p);
// Implementation replaced with comments:
// { /* Sets *o to (p->is_lep && !p->is_nu) */ }

/**
 * @brief Checks if the particle is a b-quark (or a jet matched to one).
 * Returns 1 if `is_b` is true, otherwise 0.
 * @param o Pointer to the output integer where the flag (0 or 1) is stored.
 * @param p Pointer to the particle_template object.
 */
void static is_bquark(int* o, particle_template* p);
// Implementation replaced with comments:
// { /* Sets *o to p->is_b */ }

/**
 * @brief Checks if the particle is a neutrino.
 * Returns 1 if `is_nu` is true, otherwise 0.
 * @param o Pointer to the output integer where the flag (0 or 1) is stored.
 * @param p Pointer to the particle_template object.
 */
void static is_neutrino(int* o, particle_template* p);
// Implementation replaced with comments:
// { /* Sets *o to p->is_nu */ }


#endif // NODES_FEATURES_BSM_4TOPS_H


// ======================================================================== //
//                           GRAPH HEADERS                                  //
// ======================================================================== //

#ifndef GRAPHS_BSM4TOPS_H
#define GRAPHS_BSM4TOPS_H

#include <templates/graph_template.h>
#include <bsm_4tops/event.h>

// Forward declarations of the graph classes defined above.
class graph_tops;
class graph_children;
class graph_truthjets;
class graph_truthjets_nonu;
class graph_jets;
class graph_jets_nonu;
class graph_jets_detector_lep;
class graph_detector;

#endif // GRAPHS_BSM4TOPS_H


// ======================================================================== //
//                           CYTHON BINDINGS (PX D)                         //
// ======================================================================== //

# distutils: language=c++
# cython: language_level=3

from AnalysisG.core.graph_template cimport graph_template, GraphTemplate

# Cython extern block declaring the C++ graph classes to Cython.
# This allows Cython to create and interact with instances of these C++ classes.
cdef extern from "<bsm_4tops/graphs.h>":
    cdef cppclass graph_tops(graph_template):
        graph_tops() except+

    cdef cppclass graph_children(graph_template):
        graph_children() except+

    cdef cppclass graph_truthjets(graph_template):
        graph_truthjets() except+

    cdef cppclass graph_truthjets_nonu(graph_template):
        graph_truthjets_nonu() except+

    cdef cppclass graph_jets(graph_template):
        graph_jets() except+

    cdef cppclass graph_jets_nonu(graph_template):
        graph_jets_nonu() except+

    cdef cppclass graph_jets_detector_lep(graph_template):
        graph_jets_detector_lep() except+

    cdef cppclass graph_detector(graph_template):
        graph_detector() except+

# Python wrapper classes inheriting from the base GraphTemplate Cython class.
# These provide a Python interface to the underlying C++ graph implementations.
# The actual implementation (constructor, destructor) is usually in the corresponding .pyx file.

cdef class GraphTops(GraphTemplate):
    pass

cdef class GraphChildren(GraphTemplate):
    pass

cdef class GraphTruthJets(GraphTemplate):
    pass

cdef class GraphTruthJetsNoNu(GraphTemplate):
    pass

cdef class GraphJets(GraphTemplate):
    pass

cdef class GraphJetsNoNu(GraphTemplate):
    pass

cdef class GraphDetectorLep(GraphTemplate):
    pass

cdef class GraphDetector(GraphTemplate):
    pass


// ======================================================================== //
//                           CYTHON BINDINGS (PYX)                          //
// ======================================================================== //

# distutils: language=c++
# cython: language_level=3

from AnalysisG.core.graph_template cimport GraphTemplate
# Import the Cython declarations from the .pxd file
from AnalysisG.graphs.bsm_4tops.graph_bsm_4tops cimport *

# --- Python Wrapper Class Implementations ---

cdef class GraphTops(GraphTemplate):
    """Python wrapper for the C++ graph_tops class."""
    def __cinit__(self):
        """Creates the underlying C++ object when the Python object is created."""
        self.ptr = new graph_tops()
    def __init__(self):
        """Standard Python initializer (can be empty if __cinit__ does the work)."""
        pass
    def __dealloc__(self):
        """Deletes the underlying C++ object when the Python object is garbage collected."""
        del self.ptr

cdef class GraphChildren(GraphTemplate):
    """Python wrapper for the C++ graph_children class."""
    def __cinit__(self):
        self.ptr = new graph_children()
    def __init__(self):
        pass
    def __dealloc__(self):
        del self.ptr

cdef class GraphTruthJets(GraphTemplate):
    """Python wrapper for the C++ graph_truthjets class."""
    def __cinit__(self):
        self.ptr = new graph_truthjets()
    def __init__(self):
        pass
    def __dealloc__(self):
        del self.ptr

cdef class GraphTruthJetsNoNu(GraphTemplate):
    """Python wrapper for the C++ graph_truthjets_nonu class."""
    def __cinit__(self):
        self.ptr = new graph_truthjets_nonu()
    def __init__(self):
        pass
    def __dealloc__(self):
        del self.ptr

cdef class GraphJets(GraphTemplate):
    """Python wrapper for the C++ graph_jets class."""
    def __cinit__(self):
        self.ptr = new graph_jets()
    def __init__(self):
        pass
    def __dealloc__(self):
        del self.ptr

cdef class GraphJetsNoNu(GraphTemplate):
    """Python wrapper for the C++ graph_jets_nonu class."""
    def __cinit__(self):
        self.ptr = new graph_jets_nonu()
    def __init__(self):
        pass
    def __dealloc__(self):
        del self.ptr


cdef class GraphDetectorLep(GraphTemplate):
    """Python wrapper for the C++ graph_jets_detector_lep class."""
    def __cinit__(self):
        self.ptr = new graph_jets_detector_lep()
    def __init__(self):
        pass
    def __dealloc__(self):
        del self.ptr

cdef class GraphDetector(GraphTemplate):
    """Python wrapper for the C++ graph_detector class."""
    def __cinit__(self):
        self.ptr = new graph_detector()
    def __init__(self):
        pass
    def __dealloc__(self):
        del self.ptr