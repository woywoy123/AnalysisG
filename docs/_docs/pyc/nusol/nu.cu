/**
 * @brief CUDA kernel designed to initialize various arrays essential for the subsequent neutrino momentum reconstruction process.
 *
 * @details This kernel is executed on the GPU and performs the initial setup of several tensors used in the neutrino solution calculations.
 * It leverages shared memory for potential performance optimizations, indicated by the `size_x` template parameter, although its specific usage within the kernel implementation (not shown) would determine the extent of optimization.
 * The kernel operates on packed tensor accessors provided by the PyTorch C++ frontend (libtorch), ensuring efficient data access on the GPU.
 *
 * @tparam scalar_t The floating-point data type used for calculations (e.g., `float` or `double`). This allows for flexibility in precision requirements.
 * @tparam size_x Specifies the size of the shared memory allocation along the x-dimension for each thread block. This parameter is crucial for optimizing memory access patterns within the kernel.
 *
 * @param s2 Input tensor accessor representing the squared sigma values (variances or uncertainties) associated with measurements, likely structured per event or object. Expected shape might be (batch_size, num_objects, data_dim).
 * @param met_xy Input tensor accessor containing the measured missing transverse energy (MET) components (MET_x, MET_y) for each event. Expected shape is likely (batch_size, 2).
 * @param H Input tensor accessor representing a transformation matrix, potentially related to detector geometry, Lorentz transformations, or basis changes needed for the calculation. Expected shape might be (batch_size, matrix_dim1, matrix_dim2).
 * @param X Output tensor accessor intended to store intermediate transformation results or coordinate representations derived from input data and the matrix H. The kernel will populate this tensor. Expected shape depends on the calculation, possibly similar to H or derived dimensions.
 * @param M Output tensor accessor intended to store a derived matrix, potentially resulting from combinations or manipulations of the input matrices and vectors (like H, met_xy, s2). The kernel will compute and store values into this tensor. Expected shape depends on the specific algorithm.
 * @param Unit Output tensor accessor, possibly used to store unit vectors or normalization factors calculated during the initialization phase. The kernel will write computed unit data here. Expected shape depends on the context.
 */
template <typename scalar_t, size_t size_x>
__global__ void _nu_init_(
    const torch::PackedTensorAccessor64<scalar_t, 3, torch::RestrictPtrTraits> s2,
    const torch::PackedTensorAccessor64<scalar_t, 2, torch::RestrictPtrTraits> met_xy,
    const torch::PackedTensorAccessor64<scalar_t, 3, torch::RestrictPtrTraits> H,
    torch::PackedTensorAccessor64<scalar_t, 3, torch::RestrictPtrTraits> X,
    torch::PackedTensorAccessor64<scalar_t, 3, torch::RestrictPtrTraits> M,
    torch::PackedTensorAccessor64<scalar_t, 3, torch::RestrictPtrTraits> Unit
);

/**
 * @brief CUDA kernel responsible for calculating chi-square (\f$\chi^2\f$) values, which quantify the goodness-of-fit for potential neutrino solutions.
 *
 * @details This kernel takes potential neutrino momentum solutions and related intermediate data (distances, transformation matrices) to compute a \f$\chi^2\f$ value for each solution. This value typically measures the discrepancy between the measured MET and the MET predicted by the hypothesized neutrino momentum, considering measurement uncertainties. The kernel also calculates the final neutrino four-momentum corresponding to the best-fit solution (minimum \f$\chi^2\f$). It operates on packed tensor accessors for efficient GPU computation.
 *
 * @tparam scalar_t The floating-point data type used for calculations (e.g., `float` or `double`), ensuring consistency in precision across the computation pipeline.
 *
 * @param sols Input tensor accessor holding potential intermediate solution parameters or components derived in previous steps (e.g., from solving kinematic equations). Expected shape might be (batch_size, num_solutions, solution_params).
 * @param dst Input tensor accessor containing distance metrics or components related to the solutions, possibly used in the \f$\chi^2\f$ calculation. Expected shape might be (batch_size, num_solutions, distance_components).
 * @param H Input tensor accessor representing the transformation matrix used in the kinematic reconstruction, consistent with the one used in `_nu_init_`. Expected shape might be (batch_size, matrix_dim1, matrix_dim2).
 * @param X Input tensor accessor containing intermediate transformation results, likely generated by the `_nu_init_` kernel. Expected shape depends on the calculation.
 * @param nu Output tensor accessor where the computed four-momenta (e.g., Px, Py, Pz, E) of the reconstructed neutrinos corresponding to the minimum \f$\chi^2\f$ will be stored. Expected shape is likely (batch_size, 4).
 * @param chi2 Output tensor accessor where the calculated minimum \f$\chi^2\f$ values for each event will be stored. Expected shape is likely (batch_size, 1) or (batch_size).
 */
template <typename scalar_t>
__global__ void _chi2(
    torch::PackedTensorAccessor64<scalar_t, 3, torch::RestrictPtrTraits> sols,
    torch::PackedTensorAccessor64<scalar_t, 3, torch::RestrictPtrTraits> dst,
    torch::PackedTensorAccessor64<scalar_t, 3, torch::RestrictPtrTraits> H,
    torch::PackedTensorAccessor64<scalar_t, 3, torch::RestrictPtrTraits> X,
    torch::PackedTensorAccessor64<scalar_t, 3, torch::RestrictPtrTraits> nu,
    torch::PackedTensorAccessor64<scalar_t, 3, torch::RestrictPtrTraits> chi2
);

/**
 * @brief Host function (CPU-side) that orchestrates the neutrino momentum reconstruction process using pre-computed transformation matrices and MET data.
 *
 * @details This function serves as an entry point for the neutrino solving algorithm when the transformation matrix `H` (potentially derived from lepton and b-jet kinematics) and MET information are directly available. It likely allocates necessary GPU tensors, invokes the `_nu_init_` and `_chi2` CUDA kernels, and manages data transfer between host and device. The `sigma` tensor provides uncertainty information used in the \f$\chi^2\f$ calculation.
 *
 * @param H Pointer to a `torch::Tensor` containing the transformation matrix H for each event. This matrix encapsulates kinematic information required for the reconstruction. Must be on the correct device (CPU/GPU) and have the expected dimensions and data type.
 * @param sigma Pointer to a `torch::Tensor` containing the uncertainty values (sigmas) associated with measurements (e.g., MET uncertainties). Can be `nullptr` if uncertainties are not considered or handled differently. If provided, it must be compatible with the calculations in the kernels.
 * @param met_xy Pointer to a `torch::Tensor` containing the measured missing transverse energy components (MET_x, MET_y) for each event. Must be on the correct device and have the expected shape (batch_size, 2).
 * @param null A double-precision floating-point value used to represent invalid or default results within the output tensors, particularly for events where no valid solution could be found.
 *
 * @return A `std::map<std::string, torch::Tensor>` where keys are strings identifying the output tensors (e.g., "nu", "chi2") and values are the corresponding `torch::Tensor` objects containing the results (neutrino four-momenta, chi-square values, etc.) computed on the GPU.
 */
std::map<std::string, torch::Tensor> nusol_::Nu(
    torch::Tensor* H, torch::Tensor* sigma, torch::Tensor* met_xy, double null
);

/**
 * @brief Host function (CPU-side) that orchestrates the neutrino momentum reconstruction using parton-level kinematic information for b-quarks, muons, and MET.
 *
 * @details This overload of the `Nu` function serves as an entry point when the primary inputs are the four-momenta of the b-quark and muon (presumably from a top quark decay, t -> b W -> b mu nu) and the MET. It internally computes the necessary transformation matrix `H` based on these inputs and the provided mass constraints (`masses` tensor, likely containing W boson and top quark masses). It then proceeds with the standard reconstruction pipeline, potentially calling the other `Nu` overload or directly invoking the CUDA kernels.
 *
 * @param pmc_b Pointer to a `torch::Tensor` containing the four-momenta (Px, Py, Pz, E or Pt, Eta, Phi, M) of the b-quarks for each event. Expected shape (batch_size, 4).
 * @param pmc_mu Pointer to a `torch::Tensor` containing the four-momenta (Px, Py, Pz, E or Pt, Eta, Phi, M) of the muons for each event. Expected shape (batch_size, 4).
 * @param met_xy Pointer to a `torch::Tensor` containing the measured missing transverse energy components (MET_x, MET_y) for each event. Expected shape (batch_size, 2).
 * @param masses Pointer to a `torch::Tensor` containing relevant particle masses used as constraints in the kinematic fit, typically the W boson mass and the top quark mass. Expected shape might be (batch_size, 2) or (2).
 * @param sigma Pointer to a `torch::Tensor` containing the uncertainty values (sigmas) associated with measurements (e.g., MET uncertainties). Can be `nullptr`.
 * @param null A double-precision floating-point value used to represent invalid or default results in the output tensors.
 *
 * @return A `std::map<std::string, torch::Tensor>` containing the computed neutrino solutions ("nu") and associated metrics ("chi2"), similar to the other `Nu` overloads.
 */
std::map<std::string, torch::Tensor> nusol_::Nu(
    torch::Tensor* pmc_b, torch::Tensor* pmc_mu, torch::Tensor* met_xy,
    torch::Tensor* masses, torch::Tensor* sigma, double null
);

/**
 * @brief Host function (CPU-side) that orchestrates the neutrino momentum reconstruction using parton-level kinematics and fixed mass constraints for the top quark and W boson.
 *
 * @details This overload is similar to the previous one but takes the top quark mass (`massT`) and W boson mass (`massW`) as fixed `double` values instead of a tensor. This is useful when applying uniform mass constraints across all events in the batch. It calculates the transformation matrix `H` based on the b-quark, muon kinematics, and these fixed masses, then proceeds with the reconstruction pipeline.
 *
 * @param pmc_b Pointer to a `torch::Tensor` containing the four-momenta of the b-quarks for each event. Expected shape (batch_size, 4).
 * @param pmc_mu Pointer to a `torch::Tensor` containing the four-momenta of the muons for each event. Expected shape (batch_size, 4).
 * @param met_xy Pointer to a `torch::Tensor` containing the measured missing transverse energy components (MET_x, MET_y) for each event. Expected shape (batch_size, 2).
 * @param sigma Pointer to a `torch::Tensor` containing the uncertainty values (sigmas) associated with measurements. Can be `nullptr`.
 * @param null A double-precision floating-point value used to represent invalid or default results.
 * @param massT A double-precision floating-point value representing the assumed mass of the top quark used as a constraint in the kinematic fit.
 * @param massW A double-precision floating-point value representing the assumed mass of the W boson used as a constraint in the kinematic fit.
 *
 * @return A `std::map<std::string, torch::Tensor>` containing the computed neutrino solutions ("nu") and associated metrics ("chi2").
 */
std::map<std::string, torch::Tensor> nusol_::Nu(
    torch::Tensor* pmc_b, torch::Tensor* pmc_mu, torch::Tensor* met_xy,
    torch::Tensor* sigma, double null, double massT, double massW
);
