/**
 * @file structs.pxd
 * @brief Cython Interface for C++ Data Structures.
 * @details Defines Cython interfaces for C++ structures used in particle physics analysis.
 *          Includes structures for particle information, event metadata, analysis settings, and data access.
 *          Allows Cython code to interact with C++ objects for efficient data manipulation.
 *
 *          Includes standard C++ library components (bool, map, string, vector) via Cython's libcpp.
 *
 *          External C++ Headers:
 *          - `<structs/particles.h>`: `particle_t` structure.
 *          - `<structs/meta.h>`: `weights_t` and `meta_t` structures.
 *          - `<structs/settings.h>`: `settings_t` structure.
 *          - `<structs/base.h>`: `data_enum` enumeration.
 *          - `<structs/element.h>`: `data_t` C++ class.
 */

// --- particle_t ---
/**
 * @struct particle_t
 * @brief Represents a particle in an event.
 * @details Stores kinematic properties (px, py, pz, e, pt, eta, phi), mass, charge, PDGID, and identifiers.
 *          Tracks particle relationships (parent/child) and lepton/neutrino definitions.
 * @headerfile <structs/particles.h>
 *
 * @var particle_t::e Energy of the particle.
 * @var particle_t::mass Mass of the particle.
 * @var particle_t::px Momentum component in the x-direction.
 * @var particle_t::py Momentum component in the y-direction.
 * @var particle_t::pz Momentum component in the z-direction.
 * @var particle_t::pt Transverse momentum.
 * @var particle_t::eta Pseudorapidity.
 * @var particle_t::phi Azimuthal angle.
 * @var particle_t::cartesian Flag for valid Cartesian coordinates.
 * @var particle_t::polar Flag for valid polar coordinates.
 * @var particle_t::charge Electric charge of the particle.
 * @var particle_t::pdgid Particle Data Group ID.
 * @var particle_t::index Index of the particle.
 * @var particle_t::type String representation of the particle type.
 * @var particle_t::hash Hash identifier for the particle.
 * @var particle_t::symbol Symbol representing the particle.
 * @var particle_t::lepdef Lepton definition (indices or flags).
 * @var particle_t::nudef Neutrino definition (indices or flags).
 * @var particle_t::children Child particles (map of hash/index to boolean).
 * @var particle_t::parents Parent particles (map of hash/index to boolean).
 */
// Cython declaration: struct particle_t: pass

// --- weights_t ---
/**
 * @struct weights_t
 * @brief Holds weight information for a dataset or process.
 * @details Stores dataset identifiers, simulation specifics, event counts, and sums of weights.
 *          Includes a map for auxiliary weights or histogram normalization factors.
 * @headerfile <structs/meta.h>
 *
 * @var weights_t::dsid Dataset ID.
 * @var weights_t::isAFII Flag for ATLAS Fast Simulation II sample.
 * @var weights_t::generator Event generator name.
 * @var weights_t::ami_tag AMI tag.
 * @var weights_t::total_events_weighted Sum of weights for all generated events.
 * @var weights_t::total_events Total number of generated events (unweighted).
 * @var weights_t::processed_events Number of events processed.
 * @var weights_t::processed_events_weighted Sum of weights for processed events.
 * @var weights_t::processed_events_weighted_squared Sum of squared weights for processed events.
 * @var weights_t::hist_data Map for histogram-related data or auxiliary weights.
 */
// Cython declaration: struct weights_t: pass

// --- meta_t ---
/**
 * @struct meta_t
 * @brief Contains metadata for a dataset or analysis run.
 * @details Aggregates information describing a dataset, including identifiers, run conditions,
 *          simulation parameters, file information, processing statistics, and configuration details.
 *          Can contain nested `weights_t` structures via the `misc` map.
 * @headerfile <structs/meta.h>
 *
 * @var meta_t::dsid Dataset ID.
 * @var meta_t::isMC Flag indicating Monte Carlo simulation.
 * @var meta_t::inputrange Map defining input ranges.
 * @var meta_t::inputfiles Map linking index to input file names.
 * @var meta_t::config Map storing configuration key-value pairs.
 * @var meta_t::eventNumber Current event number.
 * @var meta_t::event_index Index of the current event.
 * @var meta_t::found Flag indicating if metadata was found.
 * @var meta_t::DatasetName Dataset name.
 * @var meta_t::ecmEnergy Center-of-mass energy.
 * @var meta_t::genFiltEff Generator filter efficiency.
 * @var meta_t::completion Processing completion fraction.
 * @var meta_t::beam_energy Energy of the colliding beams.
 * @var meta_t::crossSection Production cross-section.
 * @var meta_t::crossSection_mean Mean value of the cross-section.
 * @var meta_t::campaign_luminosity Integrated luminosity.
 * @var meta_t::totalSize Total size of the dataset.
 * @var meta_t::kfactor K-factor applied.
 * @var meta_t::nFiles Number of files.
 * @var meta_t::totalEvents Total number of events.
 * @var meta_t::datasetNumber Alternative dataset number.
 * @var meta_t::identifier Generic identifier string.
 * @var meta_t::prodsysStatus Status in the production system.
 * @var meta_t::dataType Data type.
 * @var meta_t::version Version tag.
 * @var meta_t::PDF Parton Distribution Function set.
 * @var meta_t::AtlasRelease ATLAS software release version.
 * @var meta_t::principalPhysicsGroup Physics group responsible.
 * @var meta_t::physicsShort Short name for the physics process.
 * @var meta_t::generatorName Event generator name.
 * @var meta_t::geometryVersion Detector geometry version.
 * @var meta_t::conditionsTag Conditions database tag.
 * @var meta_t::generatorTune Generator tune.
 * @var meta_t::amiStatus AMI status.
 * @var meta_t::beamType Type of colliding beams.
 * @var meta_t::productionStep Step in the production chain.
 * @var meta_t::projectName Production project name.
 * @var meta_t::statsAlgorithm Algorithm used for statistical combination.
 * @var meta_t::genFilterNames Generator-level filter names.
 * @var meta_t::file_type Data file type.
 * @var meta_t::sample_name Sample name.
 * @var meta_t::logicalDatasetName Logical Dataset Name (LDN).
 * @var meta_t::AMITag AMI tag.
 * @var meta_t::generators List of generators used.
 * @var meta_t::derivationFormat Format of the derived data.
 * @var meta_t::campaign Data-taking or simulation campaign.
 * @var meta_t::keywords List of keywords.
 * @var meta_t::weights List of weight names.
 * @var meta_t::keyword Deprecated keyword list.
 * @var meta_t::fileGUID List of Globally Unique Identifiers (GUIDs).
 * @var meta_t::events List of event counts.
 * @var meta_t::run_number List of run numbers.
 * @var meta_t::fileSize List of file sizes.
 * @var meta_t::LFN Map linking Logical File Names (LFNs) to an index.
 * @var meta_t::misc Map storing miscellaneous information, including `weights_t` objects.
 */
// Cython declaration: struct meta_t: pass

// --- settings_t ---
/**
 * @struct settings_t
 * @brief Stores configuration settings for an analysis run.
 * @details Holds parameters that control the execution and behavior of an analysis task.
 *          Includes file paths, run identifiers, flags for workflow steps, ML parameters,
 *          variable name mappings, histogramming defaults, caching options, and resource management.
 * @headerfile <structs/settings.h>
 *
 * @var settings_t::output_path Path for output files.
 * @var settings_t::run_name Run identifier.
 * @var settings_t::sow_name Sum-of-weights name.
 * @var settings_t::metacache_path Path to the metadata cache.
 * @var settings_t::fetch_meta Flag to enable fetching metadata.
 * @var settings_t::pretagevents Flag related to pre-tagging events.
 * @var settings_t::epochs Number of training epochs for ML models.
 * @var settings_t::kfolds Number of folds for k-fold cross-validation.
 * @var settings_t::num_examples Number of examples for ML.
 * @var settings_t::batch_size Batch size for ML.
 * @var settings_t::kfold Specific k-fold indices to process.
 * @var settings_t::train_size Fraction of data for training.
 * @var settings_t::training Flag for ML training.
 * @var settings_t::validation Flag for ML validation.
 * @var settings_t::evaluation Flag for ML evaluation.
 * @var settings_t::continue_training Flag to continue ML training.
 * @var settings_t::training_dataset Dataset for ML training.
 * @var settings_t::graph_cache Path for a graph cache.
 * @var settings_t::var_pt Variable name for transverse momentum.
 * @var settings_t::var_eta Variable name for pseudorapidity.
 * @var settings_t::var_phi Variable name for azimuthal angle.
 * @var settings_t::var_energy Variable name for energy.
 * @var settings_t::targets List of target variable names for ML.
 * @var settings_t::nbins Default number of bins for histograms.
 * @var settings_t::refresh Refresh rate for progress updates.
 * @var settings_t::max_range Maximum range for a variable or process limit.
 * @var settings_t::build_cache Flag to enable building a cache.
 * @var settings_t::debug_mode Flag to enable debug output.
 * @var settings_t::selection_root Flag for ROOT TCut selections.
 * @var settings_t::threads Number of threads to utilize.
 */
// Cython declaration: struct settings_t: pass

// --- data_enum ---
/**
 * @enum data_enum
 * @brief Enumeration defining data types for data access.
 * @details Specifies data types used by the `data_t` class.
 *          Naming convention: `vvv_`, `vv_`, `v_` prefixes indicate dimensionality (3D, 2D, 1D vectors).
 *          Suffixes (`ull`, `ui`, `d`, `l`, `f`, `i`, `b`, `c`) correspond to C++ types.
 * @headerfile <structs/base.h>
 */
// Cython declaration: enum data_enum: pass

// --- data_t ---
/**
 * @class data_t
 * @brief C++ class for reading data elements from a source.
 * @details Abstraction layer for accessing data, typically from ROOT TTrees.
 *          Manages file opening, event iteration, and data retrieval.
 *          Uses `data_enum` to handle various data structures and types.
 * @headerfile <structs/element.h>
 *
 * @var data_t::leaf_name Name of the leaf.
 * @var data_t::branch_name Name of the branch.
 * @var data_t::tree_name Name of the TTree.
 * @var data_t::leaf_type String representation of the leaf's data type.
 * @var data_t::fname Pointer to the current filename.
 * @var data_t::path Full path identifier for the data element.
 * @var data_t::type Data type, represented by the `data_enum` enumeration.
 * @var data_t::file_index Index of the current file.
 * @var data_t::index Current entry/event index.
 *
 * @fn void data_t::flush()
 *     @brief Releases resources.
 *     @details Closes file handles or clears internal caches. `except+ nogil`.
 *
 * @fn bool data_t::next()
 *     @brief Advances to the next entry/event.
 *     @details Loads data for the next event. Handles file transitions. `except+ nogil`.
 *     @return `true` if successful, `false` if end of data source.
 *
 * @fn bool data_t::element(std::vector<std::vector<float>>* data)
 *     @brief Retrieves data as a vector of vector of floats. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(std::vector<std::vector<double>>* data)
 *     @brief Retrieves data as a vector of vector of doubles. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(std::vector<std::vector<long>>* data)
 *     @brief Retrieves data as a vector of vector of longs. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(std::vector<std::vector<int>>* data)
 *     @brief Retrieves data as a vector of vector of ints. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(std::vector<std::vector<bool>>* data)
 *     @brief Retrieves data as a vector of vector of bools. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(std::vector<float>* data)
 *     @brief Retrieves data as a vector of floats. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(std::vector<double>* data)
 *     @brief Retrieves data as a vector of doubles. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(std::vector<long>* data)
 *     @brief Retrieves data as a vector of longs. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(std::vector<int>* data)
 *     @brief Retrieves data as a vector of ints. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(std::vector<char>* data)
 *     @brief Retrieves data as a vector of chars (string). `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(std::vector<bool>* data)
 *     @brief Retrieves data as a vector of bools. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(double* data)
 *     @brief Retrieves scalar data as a double. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(float* data)
 *     @brief Retrieves scalar data as a float. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(long* data)
 *     @brief Retrieves scalar data as a long. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(int* data)
 *     @brief Retrieves scalar data as an int. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(bool* data)
 *     @brief Retrieves scalar data as a bool. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(char* data)
 *     @brief Retrieves scalar data as a char. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(unsigned int* data)
 *     @brief Retrieves scalar data as an unsigned int. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 *
 * @fn bool data_t::element(unsigned long long* data)
 *     @brief Retrieves scalar data as an unsigned long long. `except+ nogil`.
 *     @param data Pointer to store the data.
 *     @return `true` if successful, `false` otherwise.
 */
// Cython declaration: cdef cppclass data_t: ... (members listed above)

// --- Fused Type: basic ---
/**
 * @typedef basic
 * @brief A Cython fused type combining various C++ scalar and vector types.
 * @details This fused type groups together the C++ types supported as arguments by the overloaded `data_t::element()` methods.
 *          It allows writing generic Cython functions that can operate on data retrieved via `data_t`, regardless of its specific
 *          underlying C++ type (within this set). Cython's static type specialization ensures efficiency by generating optimized code for each specific type
 *          within the fusion at compile time.
 *
 *          The types included are:
 *          - `std::vector<std::vector<float>>`
 *          - `std::vector<std::vector<double>>`
 *          - `std::vector<std::vector<long>>`
 *          - `std::vector<std::vector<int>>`
 *          - `std::vector<std::vector<bool>>`
 *          - `std::vector<float>`
 *          - `std::vector<double>`
 *          - `std::vector<long>`
 *          - `std::vector<int>`
 *          - `std::vector<char>`
 *          - `std::vector<bool>`
 *          - `bool`
 *          - `float`
 *          - `double`
 *          - `int`
 *          - `long`
 *          - `unsigned long long`
 *          - `unsigned int`
 *          - `char`
 */
// Cython declaration: ctypedef fused basic: ... (types listed above)

/**
 * @brief Cython function to extract data using the `data_t` class and return it in a dictionary.
 * @details This function utilizes the Cython fused type `basic` to handle multiple C++ data types.
 *          It calls the appropriate `data_t::element()` method based on the type provided via the `null` pointer.
 *          The `null` pointer is cast to the specific C++ pointer type corresponding to the data expected from `data_t`.
 *          This cast acts as a template argument, allowing Cython to generate specialized versions of this function
 *          for each type within the `basic` fused type. The `data_t::element()` method then populates the `vv` variable.
 *
 * @param[in] null A null pointer explicitly cast to the expected C++ pointer type of the element
 *                 to be extracted (e.g., `<vector[vector[float]]*>(NULL)`). This acts as a type hint
 *                 for selecting the correct overload of `data_t::element` and specializing this function.
 * @param[in] data A pointer to the C++ `data_t` structure from which to extract the element.
 *
 * @return A Python dictionary containing a single key-value pair:
 *         `{ data.path : extracted_value }` if the `data->element(&vv)` call succeeds.
 *         Returns an empty dictionary `{}` if the element extraction fails.
 */
cdef dict elements(basic* null, data_t* data):
    # Implementation replaced by Doxygen documentation.


# ------------------- (9.) Add the switch. And you are done =) --------------- #

/**
 * @brief Dispatches to the `elements` function based on the data type enum.
 * @details This function serves as a type dispatcher. It examines the `data->type`
 *          member, which should correspond to a value within the `data_enum` enumeration.
 *          Based on this enum value, `switch_board` determines the specific C++ data type
 *          of the element managed by the `data_t` structure.
 *
 *          It then invokes the `elements` function, passing the original `data` pointer
 *          and a `NULL` pointer that has been explicitly cast to the determined C++ pointer
 *          type (e.g., `<vector[vector[float]]*>(NULL)`). This type casting of `NULL` is essential;
 *          it provides the necessary type information to the `elements` function, which in turn
 *          allows Cython to select the correct specialization of `elements` and call the
 *          corresponding overloaded `data->element` method. This allows `data->element` to correctly interpret
 *          the underlying data representation and extract the value.
 *
 * @param[in] data A pointer to the C++ `data_t` structure containing the data and its type information.
 *
 * @return The dictionary returned by the `elements` function, containing the extracted data
 *         keyed by its path, or an empty dictionary if the type is not handled or extraction fails.
 */
cdef dict switch_board(data_t* data):
    # Implementation replaced by Doxygen documentation.
