/**
 * @file zprime.dox
 * @brief Doxygen documentation for the Z' -> tt selection implementation.
 *
 * This file contains the documentation for the C++ and Cython components
 * of a selection strategy designed to identify events consistent with
 * a Z' boson decaying into a top-antitop quark pair (Z' -> tt),
 * specifically within the bsm_4tops analysis framework.
 */

// ========================================================================
// C++ Implementation (zprime.h / zprime.cpp)
// ========================================================================

#ifndef ZPRIME_H
#define ZPRIME_H

#include <bsm_4tops/event.h>
#include <templates/selection_template.h>

/**
 * @class zprime
 * @brief Implements an event selection strategy targeting Z' -> tt decays.
 *
 * This class inherits from selection_template and defines the specific logic
 * for selecting events containing two top quarks originating from a resonance
 * (assumed to be a Z' boson) and extracting relevant kinematic information.
 * It operates on event objects of type bsm_4tops.
 */
class zprime: public selection_template
{
    public:
        /**
         * @brief Constructor for the zprime selection class.
         * Initializes the selection object and sets its name to "zprime".
         */
        zprime();

        /**
         * @brief Destructor for the zprime selection class.
         * Handles cleanup of resources used by the selection object. Overrides the base class destructor.
         */
        ~zprime() override;

        /**
         * @brief Creates a clone of the current zprime selection object.
         * This is used for polymorphism, allowing copies of the specific selection
         * type to be created through a base class pointer. Necessary for parallel processing.
         * @return A pointer to a new zprime object allocated on the heap, cast to selection_template*.
         */
        selection_template* clone() override;

        /**
         * @brief Performs the initial event selection.
         * This function defines the primary criteria for an event to be considered
         * potentially interesting for the Z' -> tt analysis. It checks if the event
         * (cast to bsm_4tops type) contains exactly two top quarks flagged as
         * originating from a resonance decay (`from_res == true`).
         * @param ev Pointer to the generic event object (event_template), expected to be a bsm_4tops event.
         * @return True if the event contains exactly two tops from resonance, False otherwise.
         */
        bool selection(event_template* ev) override;

        /**
         * @brief Executes the detailed event processing and data extraction strategy.
         * This function is called for events that pass the `selection` criteria.
         * It identifies the two resonant tops, collects their decay products (children),
         * associated truth jets, and associated reconstructed jets. It also includes
         * leptons and neutrinos from the top decays in the truth/reco jet collections.
         * Finally, it calculates the invariant mass of the resonant top pair and the
         * scalar sum pT (or invariant mass, depending on the `sum` method's implementation)
         * of the collected children, truth jets, and reco jets, storing these values.
         * @param ev Pointer to the generic event object (event_template), expected to be a bsm_4tops event.
         * @return True if the strategy execution was successful (e.g., resonant top pair found), False otherwise.
         */
        bool strategy(event_template* ev) override;

        /**
         * @brief Merges data from another zprime selection object into this one.
         * This function is used to combine results when processing events in parallel.
         * It takes another selection object (cast to zprime*), accesses its internal
         * data vectors, and appends their contents to the corresponding vectors in the
         * current object using the `write` method (which likely handles histogram filling
         * or vector concatenation).
         * @param sl Pointer to another selection object (selection_template), expected to be a zprime object.
         */
        void merge(selection_template* sl) override;

        /**
         * @brief Stores the invariant mass (in GeV) of the truth-level resonant top pair for selected events.
         * Calculated as the invariant mass of the two `top` particles identified as `from_res == true`.
         */
        std::vector<float> zprime_truth_tops;

        /**
         * @brief Stores a kinematic sum (e.g., scalar pT sum or invariant mass) of the direct decay products (children)
         * of the two resonant tops for selected events.
         */
        std::vector<float> zprime_children;

        /**
         * @brief Stores a kinematic sum (e.g., scalar pT sum or invariant mass) of the truth jets, leptons, and neutrinos
         * associated with the decay of the two resonant tops for selected events.
         */
        std::vector<float> zprime_truthjets;

        /**
         * @brief Stores a kinematic sum (e.g., scalar pT sum or invariant mass) of the reconstructed jets, detector leptons,
         * and neutrinos associated with the decay of the two resonant tops for selected events.
         */
        std::vector<float> zprime_jets;
};

#endif // ZPRIME_H

// ========================================================================
// Cython Interface (.pxd / .pyx)
// ========================================================================

// --- PXD part (Declaration) ---

// Cython compiler directives
# distuils: language=c++
# cython: language_level=3

// Import necessary C++ standard library types
from libcpp.map cimport map
from libcpp.vector cimport vector
from libcpp.string cimport string

// Import the base Cython selection template
from AnalysisG.core.selection_template cimport *

/**
 * @brief Cython extern declaration for the C++ zprime class.
 * This block makes the C++ class and its members accessible from Cython.
 */
cdef extern from "zprime.h":
    /**
     * @brief C++ zprime class interface for Cython.
     * Specifies inheritance from the C++ selection_template.
     */
    cdef cppclass zprime(selection_template):
        /**
         * @brief C++ constructor declaration for Cython.
         * `except +` enables C++ exception handling translation to Python exceptions.
         */
        zprime() except +

        // Public member variable declarations for Cython access
        vector[float] zprime_truth_tops
        vector[float] zprime_children
        vector[float] zprime_truthjets
        vector[float] zprime_jets

/**
 * @brief Cython wrapper class for the C++ zprime selection.
 *
 * This class provides a Python interface to the C++ zprime implementation,
 * inheriting from the base Cython SelectionTemplate. It manages the lifetime
 * of the C++ object and exposes the collected data as Python lists.
 */
cdef class ZPrime(SelectionTemplate):
    /**
     * @brief Pointer to the underlying C++ zprime object.
     * This pointer is managed by the Cython class.
     */
    cdef zprime* tt

    // Public Python attributes to hold the results after processing
    /**
     * @brief Public Python list mirroring the C++ zprime_truth_tops vector.
     * Filled by the `transform_dict_keys` method. Contains resonant truth top pair masses (GeV).
     */
    cdef public list zprime_truth_tops
    /**
     * @brief Public Python list mirroring the C++ zprime_children vector.
     * Filled by the `transform_dict_keys` method. Contains kinematic sums of resonant top children.
     */
    cdef public list zprime_children
    /**
     * @brief Public Python list mirroring the C++ zprime_truthjets vector.
     * Filled by the `transform_dict_keys` method. Contains kinematic sums of truth jets/leptons/neutrinos from resonant tops.
     */
    cdef public list zprime_truthjets
    /**
     * @brief Public Python list mirroring the C++ zprime_jets vector.
     * Filled by the `transform_dict_keys` method. Contains kinematic sums of reco jets/leptons/neutrinos from resonant tops.
     */
    cdef public list zprime_jets

// --- PYX part (Implementation) ---

// Cython compiler directives
# distutils: language=c++
# cython: language_level=3

// Import Cython utility functions
from AnalysisG.core.tools cimport as_dict, as_list
// Import the base Cython selection template
from AnalysisG.core.selection_template cimport *

/**
 * @brief Helper function for merging data into ZPrime attributes.
 *
 * This function is likely used internally by the framework's merging logic
 * (e.g., when combining results from parallel jobs). It appends data (`vx`)
 * to a specified attribute (`name`) of the ZPrime object (`zp`). It handles
 * the case where the attribute might initially be None by initializing it
 * to an empty list first.
 *
 * @param zp The ZPrime object whose attribute is to be modified.
 * @param data A tuple containing the attribute name (string) and the data (list) to append.
 */
def fx(zp, data):
    # Implementation details omitted, replaced by documentation.
    pass


/**
 * @brief Cython implementation of the ZPrime wrapper class.
 */
cdef class ZPrime(SelectionTemplate):
    /**
     * @brief Cython constructor (__cinit__).
     *
     * This method is called when a ZPrime object is created in Python.
     * It allocates a new C++ zprime object on the heap and assigns its pointer
     * to the `ptr` (inherited) and `tt` members. It also initializes the
     * `root_leaves` dictionary, mapping attribute names to the `fx` merging function,
     * which is likely used by the base class or framework for result aggregation.
     */
    def __cinit__(self):
        # Implementation details omitted, replaced by documentation.
        pass

    /**
     * @brief Cython destructor (__dealloc__).
     *
     * This method is called when the ZPrime object is garbage collected.
     * It ensures that the dynamically allocated C++ zprime object pointed to
     * by `tt` (and `ptr`) is properly deleted to prevent memory leaks.
     */
    def __dealloc__(self):
        # Implementation details omitted, replaced by documentation.
        pass

    /**
     * @brief Transfers data from C++ vectors to Python lists.
     *
     * This Cython method is typically called after event processing is complete
     * (e.g., after a run over multiple events). It copies the contents of the
     * C++ std::vector members (`tt.zprime_truth_tops`, etc.) into the
     * corresponding public Python list attributes (`self.zprime_truth_tops`, etc.)
     * of the ZPrime object, making the results accessible in Python.
     */
    cdef void transform_dict_keys(self):
        # Implementation details omitted, replaced by documentation.
        pass