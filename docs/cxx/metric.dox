/**
 * @brief Generic function to paint multiple TGraph objects onto a TCanvas.
 *
 * This function takes a vector of TGraph pointers, creates a TCanvas and a TMultiGraph,
 * adds all the graphs to the TMultiGraph with specified line widths and colors,
 * and draws the TMultiGraph. It sets titles for the graph and axes, configures
 * axis ranges and styles, builds a legend, and saves the canvas to a specified file path.
 * Finally, it cleans up the allocated TCanvas and TMultiGraph objects.
 *
 * @param k_graphs A vector containing pointers to TGraph objects to be plotted.
 * @param path The file path (including filename and extension, e.g., ".png") where the plot will be saved.
 * @param title The main title for the plot (TMultiGraph).
 * @param xtitle The title for the X-axis.
 * @param ytitle The title for the Y-axis.
 * @param epoch The maximum value for the X-axis range (typically the number of epochs + 1).
 */
void metrics::generic_painter(
    std::vector<TGraph*> k_graphs,
    std::string path, std::string title,
    std::string xtitle, std::string ytitle, int epoch
);

/**
 * @brief Builds TGraph objects from TH1F histograms for different modes (training, validation, evaluation).
 *
 * This function iterates through maps of TH1F histograms for training, validation, and evaluation modes.
 * For each histogram, it extracts the bin content corresponding to the given epoch and stores it
 * in the respective report map (`rep_tr`, `rep_va`, `rep_ev`). It also creates a new TGraph object
 * from each TH1F histogram and stores these graphs in an output map, keyed by the histogram name.
 * The output map contains vectors of TGraph pointers, typically holding the graphs for training,
 * validation, and evaluation for a specific metric.
 *
 * @param train Pointer to a map storing training TH1F histograms (key: metric name, value: TH1F*).
 * @param rep_tr Pointer to a map where the final training metric value (at the specified epoch) will be stored.
 * @param valid Pointer to a map storing validation TH1F histograms.
 * @param rep_va Pointer to a map where the final validation metric value will be stored.
 * @param eval Pointer to a map storing evaluation TH1F histograms.
 * @param rep_ev Pointer to a map where the final evaluation metric value will be stored.
 * @param epoch The epoch number whose bin content should be extracted for the report maps.
 * @return A map where keys are metric names and values are vectors of TGraph pointers
 *         (typically containing [training_graph, validation_graph, evaluation_graph]).
 */
std::map<std::string, std::vector<TGraph*>> metrics::build_graphs(
    std::map<std::string, TH1F*>* train, std::map<std::string, float>* rep_tr,
    std::map<std::string, TH1F*>* valid, std::map<std::string, float>* rep_va,
    std::map<std::string, TH1F*>* eval,  std::map<std::string, float>* rep_ev,
    int epoch
);

/**
 * @brief Generates and saves loss plots for a specific k-fold.
 *
 * This function iterates through the registered analytics data for the specified k-fold (`k`).
 * It builds TGraph objects for loss metrics associated with graph features, node features,
 * and edge features using the `build_graphs` function. For each feature type (graph, node, edge)
 * and each specific loss variable, it calls `generic_painter` to create and save a plot
 * showing the loss progression over epochs for training, validation, and evaluation phases.
 * The plots are saved to structured directories based on the feature type (loss-graph/, loss-node/, loss-edge/).
 *
 * @param k The index of the k-fold for which to dump loss plots.
 */
void metrics::dump_loss_plots(int k);

/**
 * @brief Adds loss values from PyTorch tensors to corresponding TH1F histograms.
 *
 * This function iterates through a map of loss tensors (`type`). For each tensor,
 * it retrieves the scalar loss value (`.item<float>()`), divides it by the sample length (`len`),
 * and fills the corresponding TH1F histogram in the `lss_type` map at the current epoch
 * recorded in the `analytics_t` structure for the given `kfold`.
 *
 * @param type Pointer to a map where keys are loss names (std::string) and values are PyTorch Tensors containing the loss values.
 * @param lss_type Pointer to a map where keys are loss names and values are pointers to TH1F histograms to be filled.
 * @param kfold The index of the current k-fold.
 * @param len The number of samples over which the loss was averaged, used for normalization.
 */
void metrics::add_th1f_loss(
    std::map<std::string, torch::Tensor>* type,
    std::map<std::string, TH1F*>* lss_type,
    int kfold, int len
);

/**
 * @brief Initializes TH1F histograms for tracking loss values over epochs.
 *
 * This function iterates through a map (`type`) defining the loss variables for a specific
 * graph element type (graph, node, or edge, specified by `g_num`). For each variable,
 * it creates three TH1F histograms: one for training, one for validation, and one for evaluation loss.
 * These histograms are stored in the appropriate map within the `analytics_t` structure
 * (`loss_graph`, `loss_node`, or `loss_edge`) for the given `kfold`. The histograms are configured
 * with titles indicating the variable name, mode, and k-fold, and are binned from 0 to the total number of epochs.
 *
 * @param type Pointer to a map defining the loss outputs. Keys are variable names, values are tuples
 *             containing a pointer to the corresponding truth tensor and the loss enumeration type.
 *             (Note: The tensor pointer and loss enum in the tuple seem unused in this specific function).
 * @param g_num An enumeration value (graph_enum) indicating whether the losses are for the graph, nodes, or edges.
 * @param kfold The index of the current k-fold.
 */
void metrics::build_th1f_loss(
    std::map<std::string, std::tuple<torch::Tensor*, loss_enum>>* type,
    graph_enum g_num, int kfold
);

/**
 * @brief Initializes TH1F histograms for tracking accuracy values over epochs.
 *
 * Similar to `build_th1f_loss`, this function iterates through a map (`type`) defining
 * the output variables for which accuracy should be calculated, associated with a specific
 * graph element type (`g_num`). For each variable, it creates three TH1F histograms
 * (training, validation, evaluation) to store accuracy percentages. These histograms are
 * stored in the appropriate map (`accuracy_graph`, `accuracy_node`, or `accuracy_edge`)
 * within the `analytics_t` structure for the given `kfold`. The histograms are configured
 * with titles and binned from 0 to the total number of epochs. The Y-axis range is set from 0 to 100 (%).
 *
 * @param type Pointer to a map defining the classification outputs. Keys are variable names, values are tuples
 *             containing a pointer to the corresponding truth tensor and the loss enumeration type.
 *             (Note: The tensor pointer and loss enum in the tuple seem unused in this specific function).
 * @param g_num An enumeration value (graph_enum) indicating whether the accuracy is for the graph, nodes, or edges.
 * @param kfold The index of the current k-fold.
 */
void metrics::build_th1f_accuracy(
    std::map<std::string, std::tuple<torch::Tensor*, loss_enum>>* type,
    graph_enum g_num, int kfold
);

/**
 * @brief Calculates and adds accuracy values to a TH1F histogram.
 *
 * This function calculates the classification accuracy by comparing the predicted class indices
 * (derived from the `pred` tensor by taking the argmax along the last dimension) with the true
 * class indices (`truth` tensor). The accuracy is computed as the fraction of correct predictions.
 * This fraction is then scaled by 100 to represent a percentage and divided by the sample length (`len`)
 * before filling the provided TH1F histogram (`hist`) at the current epoch for the given `kfold`.
 *
 * @param pred Pointer to the raw prediction tensor (e.g., logits or probabilities) from the model. Shape typically (batch_size, num_classes) or similar.
 * @param truth Pointer to the ground truth tensor containing the true class labels. Shape typically (batch_size).
 * @param hist Pointer to the TH1F histogram where the calculated accuracy percentage will be added.
 * @param kfold The index of the current k-fold.
 * @param len The number of batches or samples processed, used for averaging the accuracy.
 */
void metrics::add_th1f_accuracy(torch::Tensor* pred, torch::Tensor* truth, TH1F* hist, int kfold, int len);

/**
 * @brief Generates and saves accuracy plots for a specific k-fold.
 *
 * This function operates similarly to `dump_loss_plots` but focuses on accuracy metrics.
 * It iterates through the registered analytics data for the specified k-fold (`k`).
 * It builds TGraph objects for accuracy metrics associated with graph features, node features,
 * and edge features using `build_graphs`. For each feature type and specific variable,
 * it calls `generic_painter` to create and save a plot showing the accuracy progression
 * over epochs for training, validation, and evaluation phases. The Y-axis is labeled as "MVA Accuracy (%)".
 * Plots are saved to structured directories (accuracy-graph/, accuracy-node/, accuracy-edge/).
 *
 * @param k The index of the k-fold for which to dump accuracy plots.
 */
void metrics::dump_accuracy_plots(int k);

/**
 * @brief Generates and saves mass reconstruction plots using TRatioPlot for a specific k-fold.
 *
 * This function creates plots comparing the reconstructed invariant mass distributions
 * from the model predictions (for training, validation, and evaluation sets) against the
 * true mass distribution.
 * 1. It retrieves the predicted mass histograms (`pred_mass_edge`) for the specified k-fold (`k`)
 *    and groups them by variable name.
 * 2. It retrieves the truth mass histograms (`truth_mass_edge`), merges the statistics from
 *    training, validation, and evaluation into a single truth histogram for each variable,
 *    and resets the original histograms.
 * 3. For each variable:
 *    a. Creates a THStack to combine the predicted histograms (training, validation, evaluation).
 *    b. Creates a TLegend to identify the histograms.
 *    c. Sets colors and styles for the predicted histograms and adds them to the stack and legend.
 *    d. Adds the merged truth histogram to the legend.
 *    e. Creates a TCanvas and configures its style.
 *    f. Creates a TRatioPlot comparing the THStack (predictions) to the merged truth histogram.
 *    g. Draws the TRatioPlot, sets axis titles, draws the legend, and sets the upper pad to log scale (Y-axis).
 *    h. Saves the plot to a structured directory (`masses/<variable_name>/fold_<k+1>/epoch_<epoch+1>.png`).
 *    i. Cleans up allocated ROOT objects (TRatioPlot, THStack, merged truth histogram, legend, TCanvas).
 *    j. Resets the predicted histograms for the next epoch/use.
 *
 * @param k The index of the k-fold for which to dump mass plots.
 */
void metrics::dump_mass_plots(int k);

/**
 * @brief Initializes TH1F histograms for storing invariant mass distributions.
 *
 * This function creates TH1F histograms to store either the true invariant mass distribution
 * or the predicted invariant mass distribution for a specific target variable (`var_name`).
 * The type of histogram (truth or predicted) is determined by the `typ` parameter.
 * It creates histograms for training, validation, and evaluation modes, storing them
 * in the appropriate map (`truth_mass_edge` or `pred_mass_edge`) within the `analytics_t`
 * structure for the given `kfold`. The histograms are configured with titles and binned
 * according to the settings (`nbins`, `max_range`).
 *
 * @param var_name The name of the target variable for which the mass is being reconstructed (e.g., "TopQuark").
 * @param typ An enumeration value (graph_enum) indicating whether to create histograms for truth (`graph_enum::truth_edge`) or predicted (`graph_enum::data_edge`) masses.
 * @param kfold The index of the current k-fold.
 */
void metrics::build_th1f_mass(std::string var_name, graph_enum typ, int kfold);

/**
 * @brief Calculates invariant masses from edge predictions and fills corresponding histograms.
 *
 * This function calculates the invariant mass based on edge predictions for a specific variable.
 * 1. It uses `pyc::graph::edge_aggregation` to sum the 4-momenta (`pmc`) of nodes connected by edges,
 *    weighted by the model's edge predictions (`pred`) for the target class (implicitly class 1).
 * 2. It calculates the invariant mass (`M`) of the resulting summed 4-momenta for the predictions.
 * 3. It repeats steps 1 and 2 using the ground truth edge information (`truth`) to get the true invariant mass.
 *    It converts the sparse truth labels into a one-hot format suitable for `edge_aggregation`.
 *    It handles cases where only one node contributes to the truth mass (sets mass to 0).
 * 4. It filters out zero or negative mass values.
 * 5. It moves the calculated mass tensors (predicted and truth) to the CPU.
 * 6. It synchronizes CUDA streams if applicable.
 * 7. It converts the mass tensors to `std::vector<double>`.
 * 8. It fills the appropriate predicted mass histogram (`pred_mass_edge`) and truth mass histogram
 *    (`truth_mass_edge`) in the `analytics_t` structure for the given `kfold` and `mode`
 *    using the calculated mass values.
 *
 * @param pmc Pointer to a tensor containing the 4-momenta (Px, Py, Pz, E) of the nodes. Assumed to be in GeV.
 * @param edge_index Pointer to the edge index tensor defining the graph connectivity.
 * @param truth Pointer to the ground truth tensor for the edge classification task related to `var_name`.
 * @param pred Pointer to the prediction tensor (e.g., probabilities or logits) for the edge classification task.
 * @param kfold The index of the current k-fold.
 * @param mode The current operational mode (training, validation, or evaluation).
 * @param var_name The name of the target variable for which mass is being calculated.
 */
void metrics::add_th1f_mass(
    torch::Tensor* pmc, torch::Tensor* edge_index,
    torch::Tensor* truth, torch::Tensor* pred,
    int kfold, mode_enum mode, std::string var_name
);

/**
 * @brief Constructor for the metrics class.
 *
 * Initializes the metrics object. Currently, it sets the ROOT global error ignore level
 * to 3000 to suppress less critical messages (Info, Warning).
 */
metrics::metrics();

/**
 * @brief Destructor for the metrics class.
 *
 * Cleans up resources allocated by the metrics object. It iterates through the `registry`
 * map, calling the `purge` method on each `analytics_t` object to delete histograms and
 * reports, and then clears the registry map itself.
 */
metrics::~metrics();

/**
 * @brief Registers a model and initializes associated analytics structures for a k-fold.
 *
 * This function stores a pointer to the model (`mod`) in the `analytics_t` structure
 * for the specified `kfold`. It creates a new `model_report` object to store final metrics.
 * It sets the output path for metrics based on the model's checkpoint path.
 * It then calls `build_th1f_loss` and `build_th1f_accuracy` to initialize histograms
 * for all loss and accuracy metrics defined in the model's output maps (graph, node, edge).
 * If target variables for mass reconstruction are defined in the settings (`m_settings.targets`),
 * it calls `build_th1f_mass` to initialize the necessary truth and prediction mass histograms.
 *
 * @param mod Pointer to the model_template object being evaluated.
 * @param kfold The index of the k-fold this model instance corresponds to.
 * @return A pointer to the newly created `model_report` object for this k-fold.
 */
model_report* metrics::register_model(model_template* mod, int kfold);

/**
 * @brief Captures and records metrics after a batch or epoch for a specific mode and k-fold.
 *
 * This function updates the metric histograms based on the model's latest predictions and losses.
 * 1. Retrieves the `analytics_t` structure for the given `kfold` and updates its `this_epoch`.
 * 2. Retrieves the calculated losses (`m_p_loss`) from the model.
 * 3. Calls `add_th1f_loss` to add the current batch/epoch loss values to the corresponding histograms
 *    for graph, node, and edge losses.
 * 4. Iterates through the graph, node, and edge outputs defined in the model:
 *    a. Retrieves the prediction tensor (`m_p_graph`, `m_p_node`, `m_p_edge`).
 *    b. Retrieves the corresponding ground truth tensor (`m_o_graph`, `m_o_node`, `m_o_edge`).
 *    c. Calls `add_th1f_accuracy` to calculate and record the accuracy for the current batch/epoch.
 * 5. If target variables for mass reconstruction are defined (`m_settings.targets`):
 *    a. Constructs the 4-momentum tensor (`pmc`) from node features specified in settings (pt, eta, phi, energy).
 *    b. Transforms the 4-momenta to PxPyPzE format and scales by 1/1000 (assuming input is MeV).
 *    c. Iterates through the target variables:
 *       i. Retrieves the prediction and truth tensors for the edge classification task associated with the target.
 *       ii. Calls `add_th1f_mass` to calculate and record the predicted and true invariant masses.
 *       iii. Includes a check for invalid truth tensors and issues a warning if found.
 *
 * @param mode The current operational mode (training, validation, or evaluation).
 * @param kfold The index of the current k-fold.
 * @param epoch The current epoch number.
 * @param smpl_len The number of samples or batches processed, used for normalization/averaging in `add_th1f_loss` and `add_th1f_accuracy`.
 */
void metrics::capture(mode_enum mode, int kfold, int epoch, int smpl_len);

/**
 * @brief Dumps all generated plots (loss, accuracy, mass) for a specific k-fold.
 *
 * This function serves as a high-level interface to generate all standard plots.
 * It calls `dump_loss_plots` and `dump_accuracy_plots`. If mass reconstruction targets
 * are defined in the settings, it also calls `dump_mass_plots`.
 *
 * @param k The index of the k-fold for which to dump all plots.
 */
void metrics::dump_plots(int k);

/**
 * @brief Structure to hold all analytics data for a single k-fold.
 *
 * This structure aggregates pointers to the model, the final report, the current epoch,
 * and maps containing TH1F histograms for various metrics (loss, accuracy, mass)
 * categorized by mode (training, validation, evaluation) and feature type (graph, node, edge).
 */
struct analytics_t {
    /** @brief Pointer to the associated model instance. */
    model_template* model = nullptr;
    /** @brief Pointer to the report structure summarizing results for this k-fold. */
    model_report* report = nullptr;

    /** @brief The current epoch number being processed. */
    int this_epoch = 0;
    /** @brief Map storing loss histograms for graph-level predictions. [Mode][VariableName] -> TH1F*. */
    std::map<mode_enum, std::map<std::string, TH1F*>> loss_graph = {};
    /** @brief Map storing loss histograms for node-level predictions. [Mode][VariableName] -> TH1F*. */
    std::map<mode_enum, std::map<std::string, TH1F*>> loss_node = {};
    /** @brief Map storing loss histograms for edge-level predictions. [Mode][VariableName] -> TH1F*. */
    std::map<mode_enum, std::map<std::string, TH1F*>> loss_edge = {};

    /** @brief Map storing accuracy histograms for graph-level predictions. [Mode][VariableName] -> TH1F*. */
    std::map<mode_enum, std::map<std::string, TH1F*>> accuracy_graph = {};
    /** @brief Map storing accuracy histograms for node-level predictions. [Mode][VariableName] -> TH1F*. */
    std::map<mode_enum, std::map<std::string, TH1F*>> accuracy_node = {};
    /** @brief Map storing accuracy histograms for edge-level predictions. [Mode][VariableName] -> TH1F*. */
    std::map<mode_enum, std::map<std::string, TH1F*>> accuracy_edge = {};

    /** @brief Map storing predicted invariant mass histograms (from edge predictions). [Mode][VariableName] -> TH1F*. */
    std::map<mode_enum, std::map<std::string, TH1F*>> pred_mass_edge = {};
    /** @brief Map storing true invariant mass histograms (from edge truth). [Mode][VariableName] -> TH1F*. */
    std::map<mode_enum, std::map<std::string, TH1F*>> truth_mass_edge = {};

    /**
     * @brief Cleans up resources held by this analytics_t instance.
     *
     * Calls the `destroy` helper function for each map of histograms to delete
     * the allocated TH1F objects. Also deletes the associated `model_report`.
     */
    void purge();

    /**
     * @brief Helper function to delete histograms stored in nested maps.
     *
     * Iterates through the outer map (keyed by mode_enum) and the inner map
     * (keyed by variable name string) and deletes each TH1F pointer.
     *
     * @param data Pointer to the map of maps containing TH1F pointers to be deleted.
     */
    void destroy(std::map<mode_enum, std::map<std::string, TH1F*>>* data);
};

/**
 * @brief Class responsible for managing, calculating, and plotting various performance metrics.
 *
 * This class handles the lifecycle of metric collection for machine learning models,
 * particularly within a k-fold cross-validation framework. It registers models,
 * captures performance data (loss, accuracy, reconstructed mass) during training,
 * validation, and evaluation phases, stores this data in histograms, and provides
 * functions to generate plots visualizing these metrics. It inherits from `tools`
 * (presumably for utility functions like path creation) and `notification` (for logging/messaging).
 */
class metrics:
    public tools,
    public notification
{
    public:
    /**
     * @brief Constructor for the metrics class.
     * @see metrics::metrics()
     */
    metrics();
    /**
     * @brief Destructor for the metrics class.
     * @see metrics::~metrics()
     */
    ~metrics();

    /** @brief Base output path where metric plots and reports will be saved. Usually set relative to the model checkpoint path. */
    std::string output_path;

    /** @brief Predefined vector of ROOT Color_t constants used for plotting different datasets (e.g., train, valid, eval) or variables. */
    const std::vector<Color_t> colors_h = {
        kRed, kGreen, kBlue, kCyan,
        kViolet, kOrange, kCoffee, kAurora
    };

    /** @brief Structure holding analysis settings (e.g., number of epochs, output paths, target variables for mass plots). */
    settings_t m_settings;

    /**
     * @brief Dumps all standard plots (loss, accuracy, mass) for a given k-fold.
     * @param k The k-fold index.
     * @see metrics::dump_plots(int k)
     */
    void dump_plots(int k);
    /**
     * @brief Dumps only the loss plots for a given k-fold.
     * @param k The k-fold index.
     * @see metrics::dump_loss_plots(int k)
     */
    void dump_loss_plots(int k);
    /**
     * @brief Dumps only the accuracy plots for a given k-fold.
     * @param k The k-fold index.
     * @see metrics::dump_accuracy_plots(int k)
     */
    void dump_accuracy_plots(int k);
    /**
     * @brief Dumps only the mass reconstruction plots for a given k-fold.
     * @param k The k-fold index.
     * @see metrics::dump_mass_plots(int k)
     */
    void dump_mass_plots(int k);

    /**
     * @brief Registers a model for metric tracking within a specific k-fold.
     * @param model Pointer to the model instance.
     * @param kfold The k-fold index.
     * @return Pointer to the created model_report structure.
     * @see metrics::register_model(model_template* model, int kfold)
     */
    model_report* register_model(model_template* model, int kfold);
    /**
     * @brief Captures metrics from the registered model after processing data.
     * @param mode The processing mode (training, validation, evaluation).
     * @param kfold The k-fold index.
     * @param epoch The current epoch number.
     * @param smpl_len The number of samples processed (for averaging).
     * @see metrics::capture(mode_enum mode, int kfold, int epoch, int smpl_len)
     */
    void capture(mode_enum, int kfold, int epoch, int smpl_len);

    private:
    /**
     * @brief Initializes loss histograms for a specific graph element type and k-fold.
     * @param type Map defining loss outputs.
     * @param g_num Graph element type (graph, node, edge).
     * @param kfold The k-fold index.
     * @see metrics::build_th1f_loss(std::map<std::string, std::tuple<torch::Tensor*, loss_enum>>* type, graph_enum g_num, int kfold)
     */
    void build_th1f_loss(
        std::map<std::string, std::tuple<torch::Tensor*, loss_enum>>* type,
        graph_enum g_num, int kfold
    );

    /**
     * @brief Adds calculated loss values to the appropriate histogram.
     * @param type Map of loss names to Tensor values.
     * @param lss_type Map of loss names to TH1F histograms.
     * @param kfold The k-fold index.
     * @param smpl_len Number of samples (for averaging).
     * @see metrics::add_th1f_loss(std::map<std::string, torch::Tensor>* type, std::map<std::string, TH1F*>* lss_type, int kfold, int smpl_len)
     */
    void add_th1f_loss(
        std::map<std::string, torch::Tensor>* type,
        std::map<std::string, TH1F*>* lss_type,
        int kfold, int smpl_len
    );

    /**
     * @brief Initializes accuracy histograms for a specific graph element type and k-fold.
     * @param type Map defining classification outputs.
     * @param g_num Graph element type (graph, node, edge).
     * @param kfold The k-fold index.
     * @see metrics::build_th1f_accuracy(std::map<std::string, std::tuple<torch::Tensor*, loss_enum>>* type, graph_enum g_num, int kfold)
     */
    void build_th1f_accuracy(
        std::map<std::string, std::tuple<torch::Tensor*, loss_enum>>* type,
        graph_enum g_num, int kfold
    );

    /**
     * @brief Calculates and adds accuracy values to the appropriate histogram.
     * @param pred Pointer to the prediction tensor.
     * @param truth Pointer to the ground truth tensor.
     * @param hist Pointer to the TH1F histogram to fill.
     * @param kfold The k-fold index.
     * @param smpl_len Number of samples (for averaging).
     * @see metrics::add_th1f_accuracy(torch::Tensor* pred, torch::Tensor* truth, TH1F* hist, int kfold, int smpl_len)
     */
    void add_th1f_accuracy(
        torch::Tensor* pred, torch::Tensor* truth,
        TH1F* hist, int kfold, int smpl_len
    );

    /**
     * @brief Initializes invariant mass histograms (truth and predicted) for a target variable and k-fold.
     * @param var_name The target variable name.
     * @param typ Type of histogram (truth or predicted edge mass).
     * @param kfold The k-fold index.
     * @see metrics::build_th1f_mass(std::string var_name, graph_enum typ, int kfold)
     */
    void build_th1f_mass(std::string var_name, graph_enum typ, int kfold);

    /**
     * @brief Calculates and adds invariant mass values (truth and predicted) to histograms.
     * @param pmc Pointer to node 4-momentum tensor (PxPyPzE).
     * @param edge_index Pointer to edge index tensor.
     * @param truth Pointer to edge ground truth tensor.
     * @param pred Pointer to edge prediction tensor.
     * @param kfold The k-fold index.
     * @param mode The processing mode (training, validation, evaluation).
     * @param var_name The target variable name.
     * @see metrics::add_th1f_mass(torch::Tensor* pmc, torch::Tensor* edge_index, torch::Tensor* truth, torch::Tensor* pred, int kfold, mode_enum mode, std::string var_name)
     */
    void add_th1f_mass(
        torch::Tensor* pmc, torch::Tensor* edge_index,
        torch::Tensor* truth, torch::Tensor* pred,
        int kfold, mode_enum mode, std::string var_name
    );

    /**
     * @brief Generic plotting function for multiple TGraphs on one canvas.
     * @param k_graphs Vector of TGraph pointers to plot.
     * @param path Output file path for the plot image.
     * @param title Main title of the plot.
     * @param xtitle X-axis title.
     * @param ytitle Y-axis title.
     * @param epoch Maximum value for the X-axis range.
     * @see metrics::generic_painter(std::vector<TGraph*> k_graphs, std::string path, std::string title, std::string xtitle, std::string ytitle, int epoch)
     */
    void generic_painter(
        std::vector<TGraph*> k_graphs,
        std::string path, std::string title,
        std::string xtitle, std::string ytitle, int epoch
    );

    /**
     * @brief Creates TGraph objects from TH1F histograms for plotting evolution over epochs.
     * @param train Pointer to map of training histograms.
     * @param tr_ Pointer to map to store final training values.
     * @param valid Pointer to map of validation histograms.
     * @param va_ Pointer to map to store final validation values.
     * @param eval Pointer to map of evaluation histograms.
     * @param ev_ Pointer to map to store final evaluation values.
     * @param ep The current epoch number (used to extract final values for report).
     * @return Map from variable name to a vector of TGraphs [train, valid, eval].
     * @see metrics::build_graphs(std::map<std::string, TH1F*>* train, std::map<std::string, float>* tr_, std::map<std::string, TH1F*>* valid, std::map<std::string, float>* va_, std::map<std::string, TH1F*>* eval, std::map<std::string, float>* ev_, int ep)
     */
    std::map<std::string, std::vector<TGraph*>> build_graphs(
        std::map<std::string, TH1F*>* train,  std::map<std::string, float>* tr_,
        std::map<std::string, TH1F*>* valid,  std::map<std::string, float>* va_,
        std::map<std::string, TH1F*>* eval,   std::map<std::string, float>* ev_,
        int ep
    );

    /** @brief Map storing the analytics_t structure for each k-fold, keyed by the k-fold index. */
    std::map<int, analytics_t> registry = {};

};
