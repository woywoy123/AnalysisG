<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classcproperty" kind="class" language="C++" prot="public">
    <compoundname>cproperty</compoundname>
    <includes refid="property_8h" local="no">property.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename G</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcproperty_1a264f2038b8ccabd2adb2fe640e576153" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T cproperty&lt; T, G &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="64" column="11" bodyfile="modules/structs/include/structs/property.h" bodystart="64" bodyend="-1"/>
        <referencedby refid="classsimply__plot_1_1_data_x_1aaacf4239206d59867e979e047388effe" compoundref="simply__plot_8py" startline="531" endline="532">simply_plot.DataX.num_events</referencedby>
        <referencedby refid="classsimply__plot_1_1_data_x_1a41f0e58c621248ecb74fbe1deb30cc7e" compoundref="simply__plot_8py" startline="538" endline="544">simply_plot.DataX.hist</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classcproperty_1a58aa65f7de6c3eb5f41dabd9bd56bbb6" prot="private" static="no" mutable="no">
        <type>G *</type>
        <definition>G* cproperty&lt; T, G &gt;::obj</definition>
        <argsstring></argsstring>
        <name>obj</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="65" column="11" bodyfile="modules/structs/include/structs/property.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcproperty_1a4bbc1c6eb1c308583ce3d07af575d36a" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool cproperty&lt; T, G &gt;::has_getter</definition>
        <argsstring></argsstring>
        <name>has_getter</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="66" column="14" bodyfile="modules/structs/include/structs/property.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcproperty_1ade3a08e5f98539d6be16df1c8ae138ef" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool cproperty&lt; T, G &gt;::has_setter</definition>
        <argsstring></argsstring>
        <name>has_setter</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="67" column="14" bodyfile="modules/structs/include/structs/property.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcproperty_1a7be2b33f86b539371ae2db6611afe0ce" prot="private" static="no" mutable="no">
        <type>std::function&lt; void(T *, G *)&gt;</type>
        <definition>std::function&lt;void(T*, G*)&gt; cproperty&lt; T, G &gt;::setter</definition>
        <argsstring></argsstring>
        <name>setter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="68" column="23" bodyfile="modules/structs/include/structs/property.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcproperty_1a213f4d26d6254ff2e67a98c21b1f3212" prot="private" static="no" mutable="no">
        <type>std::function&lt; void(T *, G *)&gt;</type>
        <definition>std::function&lt;void(T*, G*)&gt; cproperty&lt; T, G &gt;::getter</definition>
        <argsstring></argsstring>
        <name>getter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="69" column="23" bodyfile="modules/structs/include/structs/property.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcproperty_1aaed642ab76fa3cec770f1f5633b51a43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cproperty&lt; T, G &gt;::cproperty</definition>
        <argsstring>()</argsstring>
        <name>cproperty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="16" column="9" bodyfile="modules/structs/include/structs/property.h" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classcproperty_1af4583ba4cf4ebc53f870a2de8f110da7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cproperty&lt; T, G &gt;::set_setter</definition>
        <argsstring>(std::function&lt; void(T *, G *)&gt; c=x_setter&lt; T, G &gt;)</argsstring>
        <name>set_setter</name>
        <param>
          <type>std::function&lt; void(T *, G *)&gt;</type>
          <declname>c</declname>
          <defval><ref refid="property_8h_1a597b9c9652fa225878418141614d45bd" kindref="member">x_setter</ref>&lt; T, G &gt;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="17" column="14" bodyfile="modules/structs/include/structs/property.h" bodystart="17" bodyend="20"/>
        <referencedby refid="classgraph__template_1ad496a2818827b70a95f491889b71663a" compoundref="graph__template_8cxx" startline="3" endline="23">graph_template::graph_template</referencedby>
        <referencedby refid="classmetric__template_1a4f076b39d712cc1ed944d25328bcc271" compoundref="metric__template_8cxx" startline="5" endline="17">metric_template::metric_template</referencedby>
        <referencedby refid="classmodel__template_1af47db8a6a8514fda6e3b714813c07f6d" compoundref="model__template_8cxx" startline="18" endline="55">model_template::model_template</referencedby>
        <referencedby refid="structoptimizer__params__t_1a0fb4c5916140e25724ec9e083c60a439" compoundref="structs_2cxx_2optimizer_8cxx" startline="3" endline="57">optimizer_params_t::operator()</referencedby>
        <referencedby refid="classparticle__template_1ab527ed22f6d67969247a0be9dda0165f" compoundref="particle__template_8cxx" startline="3" endline="81">particle_template::particle_template</referencedby>
        <referencedby refid="classselection__template_1a4562a7ab32d93b5f2ca8a232a244041c" compoundref="selection__core_8cxx" startline="4" endline="24">selection_template::selection_template</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcproperty_1a31b26b5ffb20bbf8d8ee38e0755a9819" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cproperty&lt; T, G &gt;::set_getter</definition>
        <argsstring>(std::function&lt; void(T *, G *)&gt; c=x_getter&lt; T, G &gt;)</argsstring>
        <name>set_getter</name>
        <param>
          <type>std::function&lt; void(T *, G *)&gt;</type>
          <declname>c</declname>
          <defval><ref refid="property_8h_1adcc380d9a29f5f79ff2333b76212fcbb" kindref="member">x_getter</ref>&lt; T, G &gt;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="22" column="14" bodyfile="modules/structs/include/structs/property.h" bodystart="22" bodyend="25"/>
        <referencedby refid="classgraph__template_1a1a49a06e30768be2815531f478dbb035" compoundref="graph__template_8h" startline="219" endline="225">graph_template::add_graph_data_feature</referencedby>
        <referencedby refid="classgraph__template_1aa76fa2728ad46132846ae09e9db93386" compoundref="graph__template_8h" startline="209" endline="215">graph_template::add_graph_truth_feature</referencedby>
        <referencedby refid="classgraph__template_1aa9d58009001be66e52c75e95357860ac" compoundref="graph__template_8h" startline="242" endline="253">graph_template::add_node_data_feature</referencedby>
        <referencedby refid="classgraph__template_1ad9f0102011d63e5571bb52e25c5d440e" compoundref="graph__template_8h" startline="228" endline="238">graph_template::add_node_truth_feature</referencedby>
        <referencedby refid="classgraph__template_1ad496a2818827b70a95f491889b71663a" compoundref="graph__template_8cxx" startline="3" endline="23">graph_template::graph_template</referencedby>
        <referencedby refid="classjet_1ae5a7844bf8bad33084fc7514e0567c2d" compoundref="bsm__4tops_2cxx_2particles_8cxx" startline="209" endline="241">jet::jet</referencedby>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta::meta</referencedby>
        <referencedby refid="classmetric__template_1a4f076b39d712cc1ed944d25328bcc271" compoundref="metric__template_8cxx" startline="5" endline="17">metric_template::metric_template</referencedby>
        <referencedby refid="classmodel__template_1af47db8a6a8514fda6e3b714813c07f6d" compoundref="model__template_8cxx" startline="18" endline="55">model_template::model_template</referencedby>
        <referencedby refid="classparticle__template_1ab527ed22f6d67969247a0be9dda0165f" compoundref="particle__template_8cxx" startline="3" endline="81">particle_template::particle_template</referencedby>
        <referencedby refid="classselection__template_1a4562a7ab32d93b5f2ca8a232a244041c" compoundref="selection__core_8cxx" startline="4" endline="24">selection_template::selection_template</referencedby>
        <referencedby refid="classtop__children_1a0479039c51f146cc0886e1dec06c48d7" compoundref="bsm__4tops_2cxx_2particles_8cxx" startline="38" endline="52">top_children::top_children</referencedby>
        <referencedby refid="classtruthjet_1ad7c0e9521876a9e5d3a74dfbcd47fdee" compoundref="bsm__4tops_2cxx_2particles_8cxx" startline="103" endline="118">truthjet::truthjet</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcproperty_1a41a70e8e01c9b1a20b94d2dbf1a6b214" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cproperty&lt; T, G &gt;::set_object</definition>
        <argsstring>(G *obj)</argsstring>
        <name>set_object</name>
        <param>
          <type>G *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="27" column="14" bodyfile="modules/structs/include/structs/property.h" bodystart="27" bodyend="27"/>
        <referencedby refid="classgraph__template_1a1a49a06e30768be2815531f478dbb035" compoundref="graph__template_8h" startline="219" endline="225">graph_template::add_graph_data_feature</referencedby>
        <referencedby refid="classgraph__template_1aa76fa2728ad46132846ae09e9db93386" compoundref="graph__template_8h" startline="209" endline="215">graph_template::add_graph_truth_feature</referencedby>
        <referencedby refid="classgraph__template_1aa9d58009001be66e52c75e95357860ac" compoundref="graph__template_8h" startline="242" endline="253">graph_template::add_node_data_feature</referencedby>
        <referencedby refid="classgraph__template_1ad9f0102011d63e5571bb52e25c5d440e" compoundref="graph__template_8h" startline="228" endline="238">graph_template::add_node_truth_feature</referencedby>
        <referencedby refid="classgraph__template_1ad496a2818827b70a95f491889b71663a" compoundref="graph__template_8cxx" startline="3" endline="23">graph_template::graph_template</referencedby>
        <referencedby refid="classjet_1ae5a7844bf8bad33084fc7514e0567c2d" compoundref="bsm__4tops_2cxx_2particles_8cxx" startline="209" endline="241">jet::jet</referencedby>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta::meta</referencedby>
        <referencedby refid="classmetric__template_1a4f076b39d712cc1ed944d25328bcc271" compoundref="metric__template_8cxx" startline="5" endline="17">metric_template::metric_template</referencedby>
        <referencedby refid="classmodel__template_1af47db8a6a8514fda6e3b714813c07f6d" compoundref="model__template_8cxx" startline="18" endline="55">model_template::model_template</referencedby>
        <referencedby refid="structoptimizer__params__t_1a0fb4c5916140e25724ec9e083c60a439" compoundref="structs_2cxx_2optimizer_8cxx" startline="3" endline="57">optimizer_params_t::operator()</referencedby>
        <referencedby refid="classparticle__template_1ab527ed22f6d67969247a0be9dda0165f" compoundref="particle__template_8cxx" startline="3" endline="81">particle_template::particle_template</referencedby>
        <referencedby refid="classselection__template_1a4562a7ab32d93b5f2ca8a232a244041c" compoundref="selection__core_8cxx" startline="4" endline="24">selection_template::selection_template</referencedby>
        <referencedby refid="classtop__children_1a0479039c51f146cc0886e1dec06c48d7" compoundref="bsm__4tops_2cxx_2particles_8cxx" startline="38" endline="52">top_children::top_children</referencedby>
        <referencedby refid="classtruthjet_1ad7c0e9521876a9e5d3a74dfbcd47fdee" compoundref="bsm__4tops_2cxx_2particles_8cxx" startline="103" endline="118">truthjet::truthjet</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcproperty_1abfa536f261012e6db1018a202ce15791" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref> &amp;</type>
        <definition>cproperty&amp; cproperty&lt; T, G &gt;::operator=</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>operator=</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="29" column="19" bodyfile="modules/structs/include/structs/property.h" bodystart="29" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classcproperty_1a29f31c10baf02a7ef70e415b1032cfc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T cproperty&lt; T, G &gt;::operator+</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="36" column="14" bodyfile="modules/structs/include/structs/property.h" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classcproperty_1a8fe606a2540de63047826ec51dbaf447" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cproperty&lt; T, G &gt;::operator==</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>operator==</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="37" column="14" bodyfile="modules/structs/include/structs/property.h" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classcproperty_1a9423508b897ac25752e8ed8cffdd2689" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cproperty&lt; T, G &gt;::operator!=</definition>
        <argsstring>(const T &amp;val)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="38" column="14" bodyfile="modules/structs/include/structs/property.h" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classcproperty_1a48ec00edb4b94af4cade599dc96d9348" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; cproperty&lt; T, G &gt;::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="40" column="9" bodyfile="modules/structs/include/structs/property.h" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classcproperty_1a3b2718a086280549f708c728320698be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cproperty&lt; T, G &gt;::operator T</definition>
        <argsstring>()</argsstring>
        <name>operator T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="45" column="9" bodyfile="modules/structs/include/structs/property.h" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classcproperty_1a9b478992dad7787f9c2b3d21182520f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* cproperty&lt; T, G &gt;::operator&amp;</definition>
        <argsstring>()</argsstring>
        <name>operator&amp;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="51" column="11" bodyfile="modules/structs/include/structs/property.h" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classcproperty_1a8406c403abbf89e5832b92ac8e2c487b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cproperty&lt; T, G &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/structs/include/structs/property.h" line="57" column="14" bodyfile="modules/structs/include/structs/property.h" bodystart="57" bodyend="60"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>cproperty&lt; std::vector&lt; int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>cproperty&lt; double, graph_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double, graph_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>cproperty&lt; int, particle_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; int, particle_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>cproperty&lt; unsigned int, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; unsigned int, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>cproperty&lt; long, graph_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; long, graph_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>cproperty&lt; long, selection_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; long, selection_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>cproperty&lt; std::string, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::string, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>cproperty&lt; std::map&lt; std::string, particle_template * &gt;, particle_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, particle_template * &gt;, particle_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>cproperty&lt; std::tuple&lt; float, float &gt;, optimizer_params_t &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::tuple&lt; float, float &gt;, optimizer_params_t &gt;</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>cproperty&lt; double, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>cproperty&lt; std::vector&lt; double &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; double &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>cproperty&lt; std::map&lt; int, int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::map&lt; int, int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>cproperty&lt; bool, jet &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; bool, jet &gt;</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>cproperty&lt; bool, top_children &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; bool, top_children &gt;</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>cproperty&lt; std::vector&lt; float &gt;, optimizer_params_t &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; float &gt;, optimizer_params_t &gt;</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>cproperty&lt; std::map&lt; std::string, std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>cproperty&lt; std::vector&lt; std::string &gt;, std::map&lt; std::string, torch::Tensor * &gt; &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; std::string &gt;, std::map&lt; std::string, torch::Tensor * &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>cproperty&lt; T, G &gt;</label>
        <link refid="classcproperty"/>
      </node>
      <node id="33">
        <label>cproperty&lt; std::string, selection_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::string, selection_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>cproperty&lt; std::vector&lt; std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>cproperty&lt; std::map&lt; int, std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::map&lt; int, std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>cproperty&lt; bool, muon &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; bool, muon &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>cproperty&lt; bool, particle_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; bool, particle_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>cproperty&lt; bool, optimizer_params_t &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; bool, optimizer_params_t &gt;</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>cproperty&lt; bool, truthjet &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; bool, truthjet &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>cproperty&lt; std::map&lt; std::string, std::string &gt;, metric_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, std::string &gt;, metric_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>cproperty&lt; double, optimizer_params_t &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double, optimizer_params_t &gt;</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>cproperty&lt; bool, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; bool, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>cproperty&lt; int, model_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; int, model_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>cproperty&lt; std::string, model_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::string, model_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>cproperty&lt; bool, electron &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; bool, electron &gt;</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>cproperty&lt; std::string, graph_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::string, graph_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>cproperty&lt; std::map&lt; std::string, int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>cproperty&lt; double, particle_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double, particle_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>cproperty&lt; std::vector&lt; std::string &gt;, metric_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; std::string &gt;, metric_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>cproperty&lt; double, selection_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; double, selection_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>cproperty&lt; std::string, particle_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::string, particle_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>cproperty&lt; bool, graph_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; bool, graph_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>cproperty&lt; int, optimizer_params_t &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; int, optimizer_params_t &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>cproperty&lt; std::string, metric_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::string, metric_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>cproperty&lt; std::map&lt; std::string, weights_t &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, weights_t &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <location file="modules/structs/include/structs/property.h" line="14" column="1" bodyfile="modules/structs/include/structs/property.h" bodystart="13" bodyend="71"/>
    <listofallmembers>
      <member refid="classcproperty_1a8406c403abbf89e5832b92ac8e2c487b" prot="public" virt="non-virtual"><scope>cproperty</scope><name>clear</name></member>
      <member refid="classcproperty_1aaed642ab76fa3cec770f1f5633b51a43" prot="public" virt="non-virtual"><scope>cproperty</scope><name>cproperty</name></member>
      <member refid="classcproperty_1a264f2038b8ccabd2adb2fe640e576153" prot="private" virt="non-virtual"><scope>cproperty</scope><name>data</name></member>
      <member refid="classcproperty_1a213f4d26d6254ff2e67a98c21b1f3212" prot="private" virt="non-virtual"><scope>cproperty</scope><name>getter</name></member>
      <member refid="classcproperty_1a4bbc1c6eb1c308583ce3d07af575d36a" prot="private" virt="non-virtual"><scope>cproperty</scope><name>has_getter</name></member>
      <member refid="classcproperty_1ade3a08e5f98539d6be16df1c8ae138ef" prot="private" virt="non-virtual"><scope>cproperty</scope><name>has_setter</name></member>
      <member refid="classcproperty_1a58aa65f7de6c3eb5f41dabd9bd56bbb6" prot="private" virt="non-virtual"><scope>cproperty</scope><name>obj</name></member>
      <member refid="classcproperty_1a3b2718a086280549f708c728320698be" prot="public" virt="non-virtual"><scope>cproperty</scope><name>operator T</name></member>
      <member refid="classcproperty_1a9423508b897ac25752e8ed8cffdd2689" prot="public" virt="non-virtual"><scope>cproperty</scope><name>operator!=</name></member>
      <member refid="classcproperty_1a9b478992dad7787f9c2b3d21182520f4" prot="public" virt="non-virtual"><scope>cproperty</scope><name>operator&amp;</name></member>
      <member refid="classcproperty_1a29f31c10baf02a7ef70e415b1032cfc6" prot="public" virt="non-virtual"><scope>cproperty</scope><name>operator+</name></member>
      <member refid="classcproperty_1a48ec00edb4b94af4cade599dc96d9348" prot="public" virt="non-virtual"><scope>cproperty</scope><name>operator&lt;&lt;</name></member>
      <member refid="classcproperty_1abfa536f261012e6db1018a202ce15791" prot="public" virt="non-virtual"><scope>cproperty</scope><name>operator=</name></member>
      <member refid="classcproperty_1a8fe606a2540de63047826ec51dbaf447" prot="public" virt="non-virtual"><scope>cproperty</scope><name>operator==</name></member>
      <member refid="classcproperty_1a31b26b5ffb20bbf8d8ee38e0755a9819" prot="public" virt="non-virtual"><scope>cproperty</scope><name>set_getter</name></member>
      <member refid="classcproperty_1a41a70e8e01c9b1a20b94d2dbf1a6b214" prot="public" virt="non-virtual"><scope>cproperty</scope><name>set_object</name></member>
      <member refid="classcproperty_1af4583ba4cf4ebc53f870a2de8f110da7" prot="public" virt="non-virtual"><scope>cproperty</scope><name>set_setter</name></member>
      <member refid="classcproperty_1a7be2b33f86b539371ae2db6611afe0ce" prot="private" virt="non-virtual"><scope>cproperty</scope><name>setter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
