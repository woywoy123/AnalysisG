<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="eigen_8cxx" kind="file" language="C++">
    <compoundname>eigen.cxx</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">complex</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="5">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>cstdio</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="1">
        <label>eigen.cxx</label>
        <link refid="eigen_8cxx"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>complex</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" prot="public" static="no">
        <name>SIZE</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/workspaces/AnalysisG/test/contraction/eigen.cxx" line="6" column="9" bodyfile="/workspaces/AnalysisG/test/contraction/eigen.cxx" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="eigen_8cxx_1aabc5ca74b285f437273ca97c1f44c9e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void multiply</definition>
        <argsstring>(double matrix[SIZE][SIZE], double vector[SIZE], double result[SIZE])</argsstring>
        <name>multiply</name>
        <param>
          <type>double</type>
          <declname>matrix</declname>
          <array>[SIZE][SIZE]</array>
        </param>
        <param>
          <type>double</type>
          <declname>vector</declname>
          <array>[SIZE]</array>
        </param>
        <param>
          <type>double</type>
          <declname>result</declname>
          <array>[SIZE]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/workspaces/AnalysisG/test/contraction/eigen.cxx" line="8" column="6" bodyfile="/workspaces/AnalysisG/test/contraction/eigen.cxx" bodystart="8" bodyend="13"/>
        <references refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" compoundref="eigen_8cxx" startline="6">SIZE</references>
        <references refid="namespacehelper_1a6a86af0e435c054cabd85eebb8a45782" compoundref="neutrino_2helper_8py" startline="35" endline="35">helper.vector</references>
        <referencedby refid="eigen_8cxx_1ac6c240c2155a4dca6e90fb5c7afbf248" compoundref="eigen_8cxx" startline="26" endline="45">power_iteration</referencedby>
      </memberdef>
      <memberdef kind="function" id="eigen_8cxx_1a825a5056aa8fbb18b890a43871124215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vector_norm</definition>
        <argsstring>(double vector[SIZE])</argsstring>
        <name>vector_norm</name>
        <param>
          <type>double</type>
          <declname>vector</declname>
          <array>[SIZE]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/workspaces/AnalysisG/test/contraction/eigen.cxx" line="15" column="8" bodyfile="/workspaces/AnalysisG/test/contraction/eigen.cxx" bodystart="15" bodyend="19"/>
        <references refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" compoundref="eigen_8cxx" startline="6">SIZE</references>
        <references refid="namespacehelper_1a6a86af0e435c054cabd85eebb8a45782" compoundref="neutrino_2helper_8py" startline="35" endline="35">helper.vector</references>
        <referencedby refid="eigen_8cxx_1a4e6fa9aa25e3ac6cab32d6e42cf43142" compoundref="eigen_8cxx" startline="21" endline="24">normalize</referencedby>
        <referencedby refid="eigen_8cxx_1ac6c240c2155a4dca6e90fb5c7afbf248" compoundref="eigen_8cxx" startline="26" endline="45">power_iteration</referencedby>
      </memberdef>
      <memberdef kind="function" id="eigen_8cxx_1a4e6fa9aa25e3ac6cab32d6e42cf43142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void normalize</definition>
        <argsstring>(double vector[SIZE])</argsstring>
        <name>normalize</name>
        <param>
          <type>double</type>
          <declname>vector</declname>
          <array>[SIZE]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/workspaces/AnalysisG/test/contraction/eigen.cxx" line="21" column="6" bodyfile="/workspaces/AnalysisG/test/contraction/eigen.cxx" bodystart="21" bodyend="24"/>
        <references refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" compoundref="eigen_8cxx" startline="6">SIZE</references>
        <references refid="namespacehelper_1a6a86af0e435c054cabd85eebb8a45782" compoundref="neutrino_2helper_8py" startline="35" endline="35">helper.vector</references>
        <references refid="eigen_8cxx_1a825a5056aa8fbb18b890a43871124215" compoundref="eigen_8cxx" startline="15" endline="19">vector_norm</references>
        <referencedby refid="eigen_8cxx_1ac6c240c2155a4dca6e90fb5c7afbf248" compoundref="eigen_8cxx" startline="26" endline="45">power_iteration</referencedby>
      </memberdef>
      <memberdef kind="function" id="eigen_8cxx_1ac6c240c2155a4dca6e90fb5c7afbf248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double power_iteration</definition>
        <argsstring>(double matrix[SIZE][SIZE], double eigenvector[SIZE], int max_iterations, double tolerance)</argsstring>
        <name>power_iteration</name>
        <param>
          <type>double</type>
          <declname>matrix</declname>
          <array>[SIZE][SIZE]</array>
        </param>
        <param>
          <type>double</type>
          <declname>eigenvector</declname>
          <array>[SIZE]</array>
        </param>
        <param>
          <type>int</type>
          <declname>max_iterations</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/workspaces/AnalysisG/test/contraction/eigen.cxx" line="26" column="8" bodyfile="/workspaces/AnalysisG/test/contraction/eigen.cxx" bodystart="26" bodyend="45"/>
        <references refid="eigen_8cxx_1aabc5ca74b285f437273ca97c1f44c9e0" compoundref="eigen_8cxx" startline="8" endline="13">multiply</references>
        <references refid="eigen_8cxx_1a4e6fa9aa25e3ac6cab32d6e42cf43142" compoundref="eigen_8cxx" startline="21" endline="24">normalize</references>
        <references refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" compoundref="eigen_8cxx" startline="6">SIZE</references>
        <references refid="eigen_8cxx_1a825a5056aa8fbb18b890a43871124215" compoundref="eigen_8cxx" startline="15" endline="19">vector_norm</references>
        <referencedby refid="eigen_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="eigen_8cxx" startline="47" endline="71">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="eigen_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/workspaces/AnalysisG/test/contraction/eigen.cxx" line="47" column="5" bodyfile="/workspaces/AnalysisG/test/contraction/eigen.cxx" bodystart="47" bodyend="71"/>
        <references refid="namespacetest__particles_1aad178dcf6e7313adddddce0674c990d0" compoundref="test__particles_8py" startline="166">test_particles.e</references>
        <references refid="namespacepyc_1_1physics_1_1cartesian_1_1separate_1adb6b95ef1d9eb19796bda77aa1d5caf6" compoundref="pyc_2interface_2physics_8cxx" startline="132" endline="135">pyc::physics::cartesian::separate::M</references>
        <references refid="eigen_8cxx_1ac6c240c2155a4dca6e90fb5c7afbf248" compoundref="eigen_8cxx" startline="26" endline="45">power_iteration</references>
        <references refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" compoundref="eigen_8cxx" startline="6">SIZE</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIZE<sp/>3<sp/><sp/>//<sp/>Define<sp/>the<sp/>size<sp/>of<sp/>the<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="eigen_8cxx_1aabc5ca74b285f437273ca97c1f44c9e0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="eigen_8cxx_1aabc5ca74b285f437273ca97c1f44c9e0" kindref="member">multiply</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>matrix[<ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>][<ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacehelper_1a6a86af0e435c054cabd85eebb8a45782" kindref="member">vector</ref>[<ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result[<ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>])<sp/>{<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>;<sp/>i++)<sp/>{<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[i]<sp/>=<sp/>0.0;<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>;<sp/>j++)<sp/>{result[i]<sp/>+=<sp/>matrix[i][j]<sp/>*<sp/><ref refid="namespacehelper_1a6a86af0e435c054cabd85eebb8a45782" kindref="member">vector</ref>[j];}<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="15" refid="eigen_8cxx_1a825a5056aa8fbb18b890a43871124215" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="eigen_8cxx_1a825a5056aa8fbb18b890a43871124215" kindref="member">vector_norm</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacehelper_1a6a86af0e435c054cabd85eebb8a45782" kindref="member">vector</ref>[<ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>])<sp/>{<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>norm<sp/>=<sp/>0.0;<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>;<sp/>i++)<sp/>{norm<sp/>+=<sp/><ref refid="namespacehelper_1a6a86af0e435c054cabd85eebb8a45782" kindref="member">vector</ref>[i]<sp/>*<sp/><ref refid="namespacehelper_1a6a86af0e435c054cabd85eebb8a45782" kindref="member">vector</ref>[i];}<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(norm);<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="21" refid="eigen_8cxx_1a4e6fa9aa25e3ac6cab32d6e42cf43142" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="eigen_8cxx_1a4e6fa9aa25e3ac6cab32d6e42cf43142" kindref="member">normalize</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacehelper_1a6a86af0e435c054cabd85eebb8a45782" kindref="member">vector</ref>[<ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>])<sp/>{<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>norm<sp/>=<sp/><ref refid="eigen_8cxx_1a825a5056aa8fbb18b890a43871124215" kindref="member">vector_norm</ref>(<ref refid="namespacehelper_1a6a86af0e435c054cabd85eebb8a45782" kindref="member">vector</ref>);<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>;<sp/>i++)<sp/>{<ref refid="namespacehelper_1a6a86af0e435c054cabd85eebb8a45782" kindref="member">vector</ref>[i]<sp/>/=<sp/>norm;}<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="eigen_8cxx_1ac6c240c2155a4dca6e90fb5c7afbf248" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="eigen_8cxx_1ac6c240c2155a4dca6e90fb5c7afbf248" kindref="member">power_iteration</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>matrix[<ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>][<ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eigenvector[<ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_iterations,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eigenvalue<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp_vector[<ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>]<sp/>=<sp/>{1.0,<sp/>1.0,<sp/>1.0};<sp/><sp/></highlight><highlight class="comment">//<sp/>Initial<sp/>guess<sp/>for<sp/>the<sp/>eigenvector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration<sp/>=<sp/>0;<sp/>iteration<sp/>&lt;<sp/>max_iterations;<sp/>iteration++)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result[<ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>];</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="eigen_8cxx_1aabc5ca74b285f437273ca97c1f44c9e0" kindref="member">multiply</ref>(matrix,<sp/>temp_vector,<sp/>result);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>new<sp/>eigenvalue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>new_eigenvalue<sp/>=<sp/><ref refid="eigen_8cxx_1a825a5056aa8fbb18b890a43871124215" kindref="member">vector_norm</ref>(result);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="eigen_8cxx_1a4e6fa9aa25e3ac6cab32d6e42cf43142" kindref="member">normalize</ref>(result);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>convergence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(new_eigenvalue<sp/>-<sp/>eigenvalue)<sp/>&lt;<sp/>tolerance)<sp/>{</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigenvalue<sp/>=<sp/>new_eigenvalue;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>;<sp/>i++)<sp/>{temp_vector[i]<sp/>=<sp/>result[i];}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>;<sp/>i++)<sp/>{eigenvector[i]<sp/>=<sp/>result[i];}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eigenvalue;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="eigen_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="eigen_8cxx_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacepyc_1_1physics_1_1cartesian_1_1separate_1adb6b95ef1d9eb19796bda77aa1d5caf6" kindref="member">M</ref>[3][3]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8.01318657e+01,<sp/>5.51435597e+00,<sp/>1.16572607e+07,<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.27558938e+01,<sp/>8.36588978e+00,<sp/>7.40343012e+06,<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.33325465e-05<sp/>-4.11361520e-05,<sp/>-7.23462912e+00</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eigenvector[<ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>];</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eigenvalue<sp/>=<sp/><ref refid="eigen_8cxx_1ac6c240c2155a4dca6e90fb5c7afbf248" kindref="member">power_iteration</ref>(<ref refid="namespacepyc_1_1physics_1_1cartesian_1_1separate_1adb6b95ef1d9eb19796bda77aa1d5caf6" kindref="member">M</ref>,<sp/>eigenvector,<sp/>10000,<sp/>1<ref refid="namespacetest__particles_1aad178dcf6e7313adddddce0674c990d0" kindref="member">e</ref>-12);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%.10g<sp/>%.10g<sp/>%.10g<sp/>\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacepyc_1_1physics_1_1cartesian_1_1separate_1adb6b95ef1d9eb19796bda77aa1d5caf6" kindref="member">M</ref>[0][0],<sp/><ref refid="namespacepyc_1_1physics_1_1cartesian_1_1separate_1adb6b95ef1d9eb19796bda77aa1d5caf6" kindref="member">M</ref>[0][1],<sp/><ref refid="namespacepyc_1_1physics_1_1cartesian_1_1separate_1adb6b95ef1d9eb19796bda77aa1d5caf6" kindref="member">M</ref>[0][2]);<sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%.10g<sp/>%.10g<sp/>%.10g<sp/>\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacepyc_1_1physics_1_1cartesian_1_1separate_1adb6b95ef1d9eb19796bda77aa1d5caf6" kindref="member">M</ref>[1][0],<sp/><ref refid="namespacepyc_1_1physics_1_1cartesian_1_1separate_1adb6b95ef1d9eb19796bda77aa1d5caf6" kindref="member">M</ref>[1][1],<sp/><ref refid="namespacepyc_1_1physics_1_1cartesian_1_1separate_1adb6b95ef1d9eb19796bda77aa1d5caf6" kindref="member">M</ref>[1][2]);<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%.10g<sp/>%.10g<sp/>%.10g<sp/>\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacepyc_1_1physics_1_1cartesian_1_1separate_1adb6b95ef1d9eb19796bda77aa1d5caf6" kindref="member">M</ref>[2][0],<sp/><ref refid="namespacepyc_1_1physics_1_1cartesian_1_1separate_1adb6b95ef1d9eb19796bda77aa1d5caf6" kindref="member">M</ref>[2][1],<sp/><ref refid="namespacepyc_1_1physics_1_1cartesian_1_1separate_1adb6b95ef1d9eb19796bda77aa1d5caf6" kindref="member">M</ref>[2][2]);<sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Dominant<sp/>Eigenvalue:<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>eigenvalue);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Corresponding<sp/>Eigenvector:<sp/>[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%f&quot;</highlight><highlight class="normal">,<sp/>eigenvector[i]);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/><ref refid="eigen_8cxx_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref><sp/>-<sp/>1)<sp/>printf(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;]\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>determinant<sp/>of<sp/>3x3<sp/>matrix<sp/>(unchecked)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//double<sp/>det3x3(double<sp/>A[3][3]){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>return<sp/>A[0][0]<sp/>*<sp/>(A[1][1]<sp/>*<sp/>A[2][2]<sp/>-<sp/>A[1][2]<sp/>*<sp/>A[2][1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>A[0][1]<sp/>*<sp/>(A[1][0]<sp/>*<sp/>A[2][2]<sp/>-<sp/>A[1][2]<sp/>*<sp/>A[2][0])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>A[0][2]<sp/>*<sp/>(A[1][0]<sp/>*<sp/>A[2][1]<sp/>-<sp/>A[1][1]<sp/>*<sp/>A[2][0]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//int<sp/>main(){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>double<sp/>M[3][3]<sp/>=<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>9.3871e-09<sp/>,<sp/><sp/>1.7943e-08<sp/>,<sp/>-2.9486e-08,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.7943e-08<sp/>,<sp/><sp/>3.4296e-08<sp/>,<sp/>-3.1988e-08,<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2.9486e-08,<sp/><sp/>-3.1988e-08,<sp/>-2.9142e-08</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>};<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>printf(&quot;%.10g<sp/>%.10g<sp/>%.10g<sp/>\n&quot;,<sp/>M[0][0],<sp/>M[0][1],<sp/>M[0][2]);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>printf(&quot;%.10g<sp/>%.10g<sp/>%.10g<sp/>\n&quot;,<sp/>M[1][0],<sp/>M[1][1],<sp/>M[1][2]);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>printf(&quot;%.10g<sp/>%.10g<sp/>%.10g<sp/>\n&quot;,<sp/>M[2][0],<sp/>M[2][1],<sp/>M[2][2]);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>Set<sp/>up<sp/>characteristic<sp/>equation:<sp/><sp/><sp/>det(<sp/>A<sp/>-<sp/>lambda<sp/>I<sp/>)<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>as<sp/>a<sp/>cubic<sp/>in<sp/>lambda:<sp/><sp/>a.lambda^3<sp/>+<sp/>b.lambda^2<sp/>+<sp/>c.lambda<sp/>+<sp/>d<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>double<sp/>a<sp/>=<sp/>-1.0;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>double<sp/>b<sp/>=<sp/>M[0][0]<sp/>+<sp/>M[1][1]<sp/>+<sp/>M[2][2];<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>double<sp/>c<sp/>=<sp/>M[1][2]<sp/>*<sp/>M[2][1]<sp/>-<sp/>M[1][1]<sp/>*<sp/>M[2][2]<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>M[2][0]<sp/>*<sp/>M[0][2]<sp/>-<sp/>M[2][2]<sp/>*<sp/>M[0][0]<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>M[0][1]<sp/>*<sp/>M[1][0]<sp/>-<sp/>M[0][0]<sp/>*<sp/>M[1][1];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>double<sp/>d<sp/>=<sp/>det3x3(M);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>printf(&quot;%.10g\n&quot;,<sp/>d);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>Solve<sp/>cubic<sp/>by<sp/>Cardano&apos;s<sp/>method<sp/>(easier<sp/>in<sp/>complex<sp/>numbers!)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>double<sp/>p<sp/>=<sp/>(<sp/>b<sp/>*<sp/>b<sp/>-<sp/>3.0<sp/>*<sp/>a<sp/>*<sp/>c<sp/>)<sp/>/<sp/>(<sp/>9.0<sp/>*<sp/>a<sp/>*<sp/>a<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>double<sp/>q<sp/>=<sp/>(<sp/>9.0<sp/>*<sp/>a<sp/>*<sp/>b<sp/>*<sp/>c<sp/>-<sp/>27.0<sp/>*<sp/>a<sp/>*<sp/>a<sp/>*<sp/>d<sp/>-<sp/>2.0<sp/>*<sp/>b<sp/>*<sp/>b<sp/>*<sp/>b<sp/>)<sp/>/<sp/>(<sp/>54.0<sp/>*<sp/>a<sp/>*<sp/>a<sp/>*<sp/>a<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::complex<sp/>delta<sp/>=<sp/>std::complex&lt;double&gt;(q<sp/>*<sp/>q<sp/>-<sp/>p<sp/>*<sp/>p<sp/>*<sp/>p,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>warning:<sp/>complex<sp/>exponents<sp/>and<sp/>sqrt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::complex<sp/>g1<sp/>=<sp/>std::pow(<sp/>q<sp/>+<sp/>std::sqrt(<sp/>delta<sp/>),<sp/>1.0<sp/>/<sp/>3.0<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::complex<sp/>g2<sp/>=<sp/>std::pow(<sp/>q<sp/>-<sp/>std::sqrt(<sp/>delta<sp/>),<sp/>1.0<sp/>/<sp/>3.0<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>double<sp/>offset<sp/>=<sp/>-b<sp/>/<sp/>(<sp/>3.0<sp/>*<sp/>a<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>complex<sp/>cube<sp/>root<sp/>of<sp/>unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::complex<sp/>omega<sp/><sp/>=<sp/>std::complex&lt;double&gt;(<sp/>-0.5,<sp/>0.5<sp/>*<sp/>std::sqrt(<sp/>3.0<sp/>)<sp/>);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::complex<sp/>omega2<sp/>=<sp/>omega<sp/>*<sp/>omega;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>omega2<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::complex<sp/>lmb1<sp/>=<sp/>g1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>g2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>offset;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::complex<sp/>lmb2<sp/>=<sp/>g1<sp/>*<sp/>omega<sp/><sp/>+<sp/>g2<sp/>*<sp/>omega2<sp/>+<sp/>offset;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::complex<sp/>lmb3<sp/>=<sp/>g1<sp/>*<sp/>omega2<sp/>+<sp/>g2<sp/>*<sp/>omega<sp/><sp/>+<sp/>offset;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>printf(&quot;r:<sp/>%.20g,<sp/>i:<sp/>%.20g,<sp/>\n&quot;,<sp/>lmb1.real(),<sp/>lmb1.imag());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>printf(&quot;r:<sp/>%.20g,<sp/>i:<sp/>%.20g,<sp/>\n&quot;,<sp/>lmb2.real(),<sp/>lmb2.imag());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>printf(&quot;r:<sp/>%.20g,<sp/>i:<sp/>%.20g,<sp/>\n&quot;,<sp/>lmb3.real(),<sp/>lmb3.imag());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//}<sp/></highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/workspaces/AnalysisG/test/contraction/eigen.cxx"/>
  </compounddef>
</doxygen>
