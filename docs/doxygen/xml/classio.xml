<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classio" kind="class" language="C++" prot="public">
    <compoundname>io</compoundname>
    <basecompoundref refid="classtools" prot="public" virt="non-virtual">tools</basecompoundref>
    <basecompoundref refid="classnotification" prot="public" virt="non-virtual">notification</basecompoundref>
    <includes refid="io_8h" local="no">io.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classio_1a62caa70c9bfcaef4a32e954d94e86213" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool io::enable_pyami</definition>
        <argsstring></argsstring>
        <name>enable_pyami</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>Flag to enable or disable PyAMI (ATLAS Metadata Interface) usage. Default true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="177" column="10" bodyfile="modules/io/include/io/io.h" bodystart="177" bodyend="-1"/>
        <referencedby refid="classio_1a81a70b8811ceea05c8827af288c6a341" compoundref="io_2cxx_2io_8cxx" startline="26" endline="32">import_settings</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classio_1af0b0e9364667b77b04d96001b372e946" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string io::metacache_path</definition>
        <argsstring></argsstring>
        <name>metacache_path</name>
        <initializer>= &quot;./&quot;</initializer>
        <briefdescription>
<para>Path to the directory for caching metadata. Default current directory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="178" column="17" bodyfile="modules/io/include/io/io.h" bodystart="178" bodyend="-1"/>
        <referencedby refid="classio_1a81a70b8811ceea05c8827af288c6a341" compoundref="io_2cxx_2io_8cxx" startline="26" endline="32">import_settings</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classio_1a942b4d90a023e4f5dd7259c837506067" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string io::current_working_path</definition>
        <argsstring></argsstring>
        <name>current_working_path</name>
        <initializer>= &quot;.&quot;</initializer>
        <briefdescription>
<para>Current working directory path. Default &quot;.&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="179" column="17" bodyfile="modules/io/include/io/io.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classio_1a22d8f26e96fe3423ca834f3a09ba0a0a" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string io::sow_name</definition>
        <argsstring></argsstring>
        <name>sow_name</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
<para>Name for Sum-Of-Weights information, if applicable. Default empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="180" column="17" bodyfile="modules/io/include/io/io.h" bodystart="180" bodyend="-1"/>
        <referencedby refid="classio_1a81a70b8811ceea05c8827af288c6a341" compoundref="io_2cxx_2io_8cxx" startline="26" endline="32">import_settings</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classio_1a793e5c59d9bf747540db2570e9e40d10" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; io::trees</definition>
        <argsstring></argsstring>
        <name>trees</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Vector to store names of TTrees to be processed. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="182" column="17" bodyfile="modules/io/include/io/io.h" bodystart="182" bodyend="-1"/>
        <referencedby refid="classio_1aacb050c4cb6c10038d6bf8edb7244a28" compoundref="io_2cxx_2root_8cxx" startline="181" endline="288">scan_keys</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classio_1a21d6fc9f9b2e516e8b53900c507966c3" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; io::branches</definition>
        <argsstring></argsstring>
        <name>branches</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Vector to store names of TBranches to be processed. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="183" column="17" bodyfile="modules/io/include/io/io.h" bodystart="183" bodyend="-1"/>
        <referencedby refid="classio_1aacb050c4cb6c10038d6bf8edb7244a28" compoundref="io_2cxx_2root_8cxx" startline="181" endline="288">scan_keys</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classio_1a77890c20f1b193b44925763aca5b7aca" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; io::leaves</definition>
        <argsstring></argsstring>
        <name>leaves</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Vector to store names of TLeaves (variables) to be processed. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="184" column="17" bodyfile="modules/io/include/io/io.h" bodystart="184" bodyend="-1"/>
        <referencedby refid="classio_1aacb050c4cb6c10038d6bf8edb7244a28" compoundref="io_2cxx_2root_8cxx" startline="181" endline="288">scan_keys</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classio_1af427cf94896f4fe763a1d0a8d8cfba94" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, TFile * &gt;</type>
        <definition>std::map&lt;std::string, TFile*&gt; io::files_open</definition>
        <argsstring></argsstring>
        <name>files_open</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map storing pointers to open TFile objects, keyed by filename. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="186" column="14" bodyfile="modules/io/include/io/io.h" bodystart="186" bodyend="-1"/>
        <referencedby refid="classio_1a65c36380ef79524e8235f792abe9625c" compoundref="io_2cxx_2root_8cxx" startline="301" endline="351">root_begin</referencedby>
        <referencedby refid="classio_1aacb050c4cb6c10038d6bf8edb7244a28" compoundref="io_2cxx_2root_8cxx" startline="181" endline="288">scan_keys</referencedby>
        <referencedby refid="classio_1a4837676c45d56b2de96228e5fbea33ce" compoundref="io_2cxx_2io_8cxx" startline="8" endline="24">~io</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classio_1ab8ba9b78fd2627d93d7ddd2dd8f8627a" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> * &gt;</type>
        <definition>std::map&lt;std::string, meta*&gt; io::meta_data</definition>
        <argsstring></argsstring>
        <name>meta_data</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map storing pointers to <computeroutput>meta</computeroutput> objects (metadata), keyed by an identifier (e.g., filename or sample label). Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="187" column="16" bodyfile="modules/io/include/io/io.h" bodystart="187" bodyend="-1"/>
        <referencedby refid="classio_1a4837676c45d56b2de96228e5fbea33ce" compoundref="io_2cxx_2io_8cxx" startline="8" endline="24">~io</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classio_1abcc5293fdc6bfafbe00806ed11c97cc6" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, std::map&lt; std::string, TTree * &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::map&lt;std::string, TTree*&gt; &gt; io::tree_data</definition>
        <argsstring></argsstring>
        <name>tree_data</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Nested map storing TTree pointers: Filename -&gt; (Tree Name -&gt; TTree*). Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="190" column="14" bodyfile="modules/io/include/io/io.h" bodystart="190" bodyend="-1"/>
        <referencedby refid="classio_1aacb050c4cb6c10038d6bf8edb7244a28" compoundref="io_2cxx_2root_8cxx" startline="181" endline="288">scan_keys</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classio_1a56dde12fc0f8422180940e9239b12731" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, std::map&lt; std::string, long &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::map&lt;std::string, long&gt; &gt; io::tree_entries</definition>
        <argsstring></argsstring>
        <name>tree_entries</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Nested map storing TTree entry counts: Filename -&gt; (Tree Name -&gt; N_Entries). Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="191" column="14" bodyfile="modules/io/include/io/io.h" bodystart="191" bodyend="-1"/>
        <referencedby refid="classio_1a65c36380ef79524e8235f792abe9625c" compoundref="io_2cxx_2root_8cxx" startline="301" endline="351">root_begin</referencedby>
        <referencedby refid="classio_1a66a6d354d07e8aa4f9fdadc8f74a314b" compoundref="io_2cxx_2root_8cxx" startline="290" endline="299">root_size</referencedby>
        <referencedby refid="classio_1aacb050c4cb6c10038d6bf8edb7244a28" compoundref="io_2cxx_2root_8cxx" startline="181" endline="288">scan_keys</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classio_1aeee1cb0ef3e70e8d42ac226db588274a" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, std::map&lt; std::string, TBranch * &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::map&lt;std::string, TBranch*&gt; &gt; io::branch_data</definition>
        <argsstring></argsstring>
        <name>branch_data</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Nested map storing TBranch pointers: Branch Path (e.g., File/Tree) -&gt; (Branch Name -&gt; TBranch*). Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="193" column="14" bodyfile="modules/io/include/io/io.h" bodystart="193" bodyend="-1"/>
        <referencedby refid="classio_1aacb050c4cb6c10038d6bf8edb7244a28" compoundref="io_2cxx_2root_8cxx" startline="181" endline="288">scan_keys</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classio_1a824813b5a46adebe68dd83c569c90e73" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, std::map&lt; std::string, TLeaf * &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::map&lt;std::string, TLeaf*&gt; &gt; io::leaf_data</definition>
        <argsstring></argsstring>
        <name>leaf_data</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Nested map storing TLeaf pointers: Filename -&gt; (Leaf Name -&gt; TLeaf*). Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="196" column="19" bodyfile="modules/io/include/io/io.h" bodystart="196" bodyend="-1"/>
        <referencedby refid="classio_1a65c36380ef79524e8235f792abe9625c" compoundref="io_2cxx_2root_8cxx" startline="301" endline="351">root_begin</referencedby>
        <referencedby refid="classio_1aacb050c4cb6c10038d6bf8edb7244a28" compoundref="io_2cxx_2root_8cxx" startline="181" endline="288">scan_keys</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classio_1aa880042a14225e1bd9d6c5453cf97a2f" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, std::map&lt; std::string, std::string &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::map&lt;std::string, std::string&gt; &gt; io::leaf_typed</definition>
        <argsstring></argsstring>
        <name>leaf_typed</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Nested map storing TLeaf type names: Filename -&gt; (Leaf Name -&gt; Type String). Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="197" column="14" bodyfile="modules/io/include/io/io.h" bodystart="197" bodyend="-1"/>
        <referencedby refid="classio_1a65c36380ef79524e8235f792abe9625c" compoundref="io_2cxx_2root_8cxx" startline="301" endline="351">root_begin</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classio_1a0837c4856145c3a8e6a85e23eb6b4e8f" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, bool &gt;</type>
        <definition>std::map&lt;std::string, bool&gt; io::root_files</definition>
        <argsstring></argsstring>
        <name>root_files</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map indicating if a given string (filename) corresponds to a (successfully opened) ROOT file. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="198" column="14" bodyfile="modules/io/include/io/io.h" bodystart="198" bodyend="-1"/>
        <referencedby refid="classio_1ad9ed4dbed35a168511c44b38f8e8269b" compoundref="io_2cxx_2root_8cxx" startline="31" endline="61">check_root_file_paths</referencedby>
        <referencedby refid="classio_1aacb050c4cb6c10038d6bf8edb7244a28" compoundref="io_2cxx_2root_8cxx" startline="181" endline="288">scan_keys</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classio_1a44e4131caa287c82c98f8f0bc51782d2" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, std::map&lt; std::string, std::map&lt; std::string, std::vector&lt; std::string &gt; &gt; &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::map&lt;std::string, std::map&lt;std::string, std::vector&lt;std::string&gt; &gt; &gt; &gt; io::keys</definition>
        <argsstring></argsstring>
        <name>keys</name>
        <briefdescription>
<para>Complex nested map for storing scanned keys from ROOT files (e.g., File -&gt; Tree -&gt; Branch -&gt; Leaves). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="200" column="14" bodyfile="modules/io/include/io/io.h" bodystart="200" bodyend="-1"/>
        <referencedby refid="classio_1aacb050c4cb6c10038d6bf8edb7244a28" compoundref="io_2cxx_2root_8cxx" startline="181" endline="288">scan_keys</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classio_1a4b4a0dcaf8a268ba7980945f77d54b6d" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string io::current_file</definition>
        <argsstring></argsstring>
        <name>current_file</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
<para>Name of the currently open file. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="328" column="17" bodyfile="modules/io/include/io/io.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classio_1af961906e8baf0226d231a161ce9e22a0" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string io::reader_mode</definition>
        <argsstring></argsstring>
        <name>reader_mode</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
<para>Current reader mode (&quot;read&quot; or &quot;write&quot;). Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="329" column="17" bodyfile="modules/io/include/io/io.h" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classio_1a11b438e5d21d5a569fdde6fedcd7b919" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string io::filename_data</definition>
        <argsstring></argsstring>
        <name>filename_data</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
<para>Filename associated with data, possibly for metadata. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="330" column="17" bodyfile="modules/io/include/io/io.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classio_1ac455b3edb714fb07585c2ae1bc2cb188" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string io::filename_meta</definition>
        <argsstring></argsstring>
        <name>filename_meta</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
<para>Filename associated with metadata. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="331" column="17" bodyfile="modules/io/include/io/io.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classio_1a0846f9ec8709e0113acb8385ebf5f140" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; io::file_to_access_path</definition>
        <argsstring></argsstring>
        <name>file_to_access_path</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Maps a file identifier to its access path. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="333" column="14" bodyfile="modules/io/include/io/io.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classio_1a7c21c65c3ad7c2cd3eac9d17b2da292b" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::vector&lt;std::string&gt; &gt; io::files_in_dir</definition>
        <argsstring></argsstring>
        <name>files_in_dir</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Maps directory paths to a list of files within them. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="334" column="14" bodyfile="modules/io/include/io/io.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classio_1a38bf474105aa27e37da8573a3613eb71" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; io::files_in_dir_cache</definition>
        <argsstring></argsstring>
        <name>files_in_dir_cache</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Cache for directory listings. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="335" column="14" bodyfile="modules/io/include/io/io.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classio_1ab62fdc2e4d8ea9a3492ac3ea35294f46" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="structdata__t" kindref="compound">data_t</ref> * &gt;</type>
        <definition>std::map&lt;std::string, data_t*&gt; io::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map storing data read from files, keyed by an identifier. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="337" column="14" bodyfile="modules/io/include/io/io.h" bodystart="337" bodyend="-1"/>
        <referencedby refid="classsimply__plot_1_1_data_x_1aaacf4239206d59867e979e047388effe" compoundref="simply__plot_8py" startline="531" endline="532">simply_plot.DataX.num_events</referencedby>
        <referencedby refid="classsimply__plot_1_1_data_x_1a41f0e58c621248ecb74fbe1deb30cc7e" compoundref="simply__plot_8py" startline="538" endline="544">simply_plot.DataX.hist</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classio_1adbd8372f8f858732e77093dcc20860d3" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, TTreeReader * &gt;</type>
        <definition>std::map&lt;std::string, TTreeReader*&gt; io::m_readers</definition>
        <argsstring></argsstring>
        <name>m_readers</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map storing TTreeReader objects, keyed by an identifier (e.g., tree name). Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="338" column="14" bodyfile="modules/io/include/io/io.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classio_1aad8ace615604d32aac171f6aaceaeb71" prot="private" static="no" mutable="no">
        <type>H5::H5File *</type>
        <definition>H5::H5File* io::m_h5_file</definition>
        <argsstring></argsstring>
        <name>m_h5_file</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Pointer to an HDF5 file object. Initialized to nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="340" column="16" bodyfile="modules/io/include/io/io.h" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classio_1a901d2f68c380fdfd0101c589a5686e5b" prot="private" static="no" mutable="no">
        <type>hdf5 *</type>
        <definition>hdf5* io::m_h5</definition>
        <argsstring></argsstring>
        <name>m_h5</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Pointer to a custom hdf5 handler class instance. Initialized to nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="341" column="10" bodyfile="modules/io/include/io/io.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classio_1a1507bc75b37689abad6c5ffff498aae0" prot="private" static="no" mutable="no">
        <type><ref refid="structsettings__t" kindref="compound">settings_t</ref> *</type>
        <definition>settings_t* io::m_settings</definition>
        <argsstring></argsstring>
        <name>m_settings</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Pointer to the settings object. Initialized to nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="342" column="16" bodyfile="modules/io/include/io/io.h" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classio_1aec67f9dca5281bcbc91450a7baa23813" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool io::m_write</definition>
        <argsstring></argsstring>
        <name>m_write</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Flag indicating if in write mode. Initialized to false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="344" column="10" bodyfile="modules/io/include/io/io.h" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classio_1a224a225850efbe1fd0de30da21071d36" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool io::m_H5event</definition>
        <argsstring></argsstring>
        <name>m_H5event</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>Flag related to HDF5 event processing mode. Initialized to true. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="345" column="10" bodyfile="modules/io/include/io/io.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classio_1afabfc2b19ff576cd1c67dd3be7fb9441" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool io::m_use_h5</definition>
        <argsstring></argsstring>
        <name>m_use_h5</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Flag indicating if HDF5 is being used. Initialized to false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="346" column="10" bodyfile="modules/io/include/io/io.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classio_1adf79a67dfa326edb458b08e5da943740" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool io::m_use_root</definition>
        <argsstring></argsstring>
        <name>m_use_root</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Flag indicating if ROOT is being used. Initialized to false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="347" column="10" bodyfile="modules/io/include/io/io.h" bodystart="347" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classio_1a87d6c9bb433c979e3d469090b7e4f873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>io::io</definition>
        <argsstring>()</argsstring>
        <name>io</name>
        <briefdescription>
<para>&lt; Public access specifier for the following members. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor for the <computeroutput>io</computeroutput> class. Initializes a new io instance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="51" column="5" bodyfile="modules/io/cxx/io.cxx" bodystart="6" bodyend="6"/>
        <references refid="classnotification_1a913d4c8a7736df782f900dd436cfeaa6" compoundref="notification_8h" startline="126">notification::prefix</references>
      </memberdef>
      <memberdef kind="function" id="classio_1a4837676c45d56b2de96228e5fbea33ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>io::~io</definition>
        <argsstring>()</argsstring>
        <name>~io</name>
        <briefdescription>
<para>Destructor for the <computeroutput>io</computeroutput> class. </para>
        </briefdescription>
        <detaileddescription>
<para>Cleans up resources, such as closing open files. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="56" column="5" bodyfile="modules/io/cxx/io.cxx" bodystart="8" bodyend="24"/>
        <references refid="classio_1a65ca69ec5f12d0f3a463396bcff84d77" compoundref="hdf5_8cxx" startline="28" endline="40">end</references>
        <references refid="classio_1af427cf94896f4fe763a1d0a8d8cfba94" compoundref="io_8h" startline="186">files_open</references>
        <references refid="classio_1ab8ba9b78fd2627d93d7ddd2dd8f8627a" compoundref="io_8h" startline="187">meta_data</references>
        <references refid="classio_1a1c994985d2405202c19fb391cc43a5de" compoundref="io_2cxx_2root_8cxx" startline="358" endline="373">root_end</references>
      </memberdef>
      <memberdef kind="function" id="classio_1a39a32d23eeb4ae8f422bb416256fd9cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void io::write</definition>
        <argsstring>(std::vector&lt; g &gt; *inpt, std::string set_name)</argsstring>
        <name>write</name>
        <param>
          <type>std::vector&lt; g &gt; *</type>
          <declname>inpt</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>set_name</declname>
        </param>
        <briefdescription>
<para>Templated method to write a vector of objects to a dataset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of objects in the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inpt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a vector of objects of type <computeroutput>g</computeroutput> to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the dataset to write to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Get the type name of g.</para>
<para>&lt; Write data to HDF5.</para>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="65" column="10" bodyfile="modules/io/include/io/io.h" bodystart="65" bodyend="71"/>
        <references refid="classnotification_1ab758dafbb449e142fb68e11c0470b5c9">notification::Warning</references>
      </memberdef>
      <memberdef kind="function" id="classio_1acbb361e3301373cce246acf6208b60ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void io::write</definition>
        <argsstring>(g *inpt, std::string set_name)</argsstring>
        <name>write</name>
        <param>
          <type>g *</type>
          <declname>inpt</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>set_name</declname>
        </param>
        <briefdescription>
<para>Templated method to write a single object to a dataset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inpt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an object of type <computeroutput>g</computeroutput> to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the dataset to write to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Get the type name of g.</para>
<para>&lt; Write data to HDF5.</para>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="80" column="10" bodyfile="modules/io/include/io/io.h" bodystart="80" bodyend="86"/>
        <references refid="classnotification_1ab758dafbb449e142fb68e11c0470b5c9">notification::Warning</references>
      </memberdef>
      <memberdef kind="function" id="classio_1a2a0214e493a7a2ef5e9507c0e6aa4e70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void io::read</definition>
        <argsstring>(std::vector&lt; g &gt; *outpt, std::string set_name)</argsstring>
        <name>read</name>
        <param>
          <type>std::vector&lt; g &gt; *</type>
          <declname>outpt</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>set_name</declname>
        </param>
        <briefdescription>
<para>Templated method to read a vector of objects from a dataset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of objects in the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outpt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a vector of objects of type <computeroutput>g</computeroutput> where read data will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the dataset to read from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Read data from HDF5.</para>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="95" column="10" bodyfile="modules/io/include/io/io.h" bodystart="95" bodyend="99"/>
        <references refid="classnotification_1ab758dafbb449e142fb68e11c0470b5c9">notification::Warning</references>
        <referencedby refid="classio_1a4744173c6cc8c89a6145fbfb11c3831e" compoundref="hdf5_8cxx" startline="3" endline="13">read</referencedby>
      </memberdef>
      <memberdef kind="function" id="classio_1ae9363859101b007dedf420f10e437014" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void io::read</definition>
        <argsstring>(g *out, std::string set_name)</argsstring>
        <name>read</name>
        <param>
          <type>g *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>set_name</declname>
        </param>
        <briefdescription>
<para>Templated method to read a single object from a dataset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an object of type <computeroutput>g</computeroutput> where read data will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the dataset to read from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Read data from HDF5.</para>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="108" column="10" bodyfile="modules/io/include/io/io.h" bodystart="108" bodyend="112"/>
        <references refid="namespacemain_1a0cfc6c3cbcca8f2703f7ceb7991f196c" compoundref="performance_2main_8py" startline="69">main.out</references>
        <references refid="classnotification_1ab758dafbb449e142fb68e11c0470b5c9">notification::Warning</references>
      </memberdef>
      <memberdef kind="function" id="classio_1a4744173c6cc8c89a6145fbfb11c3831e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void io::read</definition>
        <argsstring>(graph_hdf5_w *out, std::string set_name)</argsstring>
        <name>read</name>
        <param>
          <type><ref refid="structgraph__hdf5__w" kindref="compound">graph_hdf5_w</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>set_name</declname>
        </param>
        <briefdescription>
<para>Reads graph data in HDF5 format specifically for <computeroutput><ref refid="structgraph__hdf5__w" kindref="compound">graph_hdf5_w</ref></computeroutput> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="structgraph__hdf5__w" kindref="compound">graph_hdf5_w</ref></computeroutput> object to store the read data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the dataset to read from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="119" column="10" bodyfile="modules/io/cxx/hdf5.cxx" bodystart="3" bodyend="13"/>
        <references refid="namespacemain_1a0cfc6c3cbcca8f2703f7ceb7991f196c" compoundref="performance_2main_8py" startline="69">main.out</references>
        <references refid="classio_1a2a0214e493a7a2ef5e9507c0e6aa4e70" compoundref="io_8h" startline="95" endline="99">read</references>
      </memberdef>
      <memberdef kind="function" id="classio_1a228b6ce6f26848a9adfc0ccf3619a53e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool io::start</definition>
        <argsstring>(std::string filename, std::string read_write)</argsstring>
        <name>start</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>read_write</declname>
        </param>
        <briefdescription>
<para>Starts an I/O session, opening a file for reading or writing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to open. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_write</parametername>
</parameternamelist>
<parameterdescription>
<para>Mode of operation: &quot;read&quot; or &quot;write&quot;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the file was successfully opened in the specified mode, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="127" column="10" bodyfile="modules/io/cxx/hdf5.cxx" bodystart="15" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classio_1a65ca69ec5f12d0f3a463396bcff84d77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void io::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>Ends the current I/O session, closing any open files. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="131" column="10" bodyfile="modules/io/cxx/hdf5.cxx" bodystart="28" bodyend="40"/>
        <references refid="_3event-name_4_8cxx_1ad909c3cfb5bcea8ede732f1c3da64879" compoundref="_3event-name_4_8cxx" startline="7">this</references>
        <referencedby refid="classio_1a65c36380ef79524e8235f792abe9625c" compoundref="io_2cxx_2root_8cxx" startline="301" endline="351">root_begin</referencedby>
        <referencedby refid="classio_1a1c994985d2405202c19fb391cc43a5de" compoundref="io_2cxx_2root_8cxx" startline="358" endline="373">root_end</referencedby>
        <referencedby refid="classio_1aacb050c4cb6c10038d6bf8edb7244a28" compoundref="io_2cxx_2root_8cxx" startline="181" endline="288">scan_keys</referencedby>
        <referencedby refid="classio_1a4837676c45d56b2de96228e5fbea33ce" compoundref="io_2cxx_2io_8cxx" startline="8" endline="24">~io</referencedby>
      </memberdef>
      <memberdef kind="function" id="classio_1ac572af35ee4e5a6dc17a35a1d8eb4561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; io::dataset_names</definition>
        <argsstring>()</argsstring>
        <name>dataset_names</name>
        <briefdescription>
<para>Retrieves the names of datasets available in the currently open HDF5 file. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A vector of strings, where each string is a dataset name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="137" column="17" bodyfile="modules/io/cxx/hdf5.cxx" bodystart="62" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classio_1a66a6d354d07e8aa4f9fdadc8f74a314b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, long &gt;</type>
        <definition>std::map&lt; std::string, long &gt; io::root_size</definition>
        <argsstring>()</argsstring>
        <name>root_size</name>
        <briefdescription>
<para>Retrieves the sizes (number of entries) of TTrees in the open ROOT files. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A map where keys are TTree names (or unique identifiers) and values are their sizes (long). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="143" column="14" bodyfile="modules/io/cxx/root.cxx" bodystart="290" bodyend="299"/>
        <references refid="classio_1aacb050c4cb6c10038d6bf8edb7244a28" compoundref="io_2cxx_2root_8cxx" startline="181" endline="288">scan_keys</references>
        <references refid="_3event-name_4_8cxx_1ad909c3cfb5bcea8ede732f1c3da64879" compoundref="_3event-name_4_8cxx" startline="7">this</references>
        <references refid="classio_1a56dde12fc0f8422180940e9239b12731" compoundref="io_8h" startline="191">tree_entries</references>
      </memberdef>
      <memberdef kind="function" id="classio_1ad9ed4dbed35a168511c44b38f8e8269b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void io::check_root_file_paths</definition>
        <argsstring>()</argsstring>
        <name>check_root_file_paths</name>
        <briefdescription>
<para>Checks the validity or accessibility of ROOT file paths defined in settings or configurations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="147" column="10" bodyfile="modules/io/cxx/root.cxx" bodystart="31" bodyend="61"/>
        <references refid="classtools_1a408b66ad73b7b4bb962634c14a55b619" compoundref="tools_2cxx_2io_8cxx" startline="49" endline="51">tools::absolute_path</references>
        <references refid="classtools_1a3d538da5310467c9321b27cd6a75b9af" compoundref="strings_8cxx" startline="71" endline="75">tools::ends_with</references>
        <references refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a8fa14cdd754f91cc6554c9e71929cce7">f</references>
        <references refid="classtools_1a47d3d261edcb898daab56721e18d1e67" compoundref="tools_2cxx_2io_8cxx" startline="30" endline="33">tools::is_file</references>
        <references refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a2db95e8e1a9267b7a1188556b2013b33">l</references>
        <references refid="classtools_1a5ab0f2cc351dd97951358ebe19e9c18d" compoundref="tools_2cxx_2io_8cxx" startline="35" endline="47">tools::ls</references>
        <references refid="classio_1a0837c4856145c3a8e6a85e23eb6b4e8f" compoundref="io_8h" startline="198">root_files</references>
        <references refid="namespacemain_1ae3ad17ae2d2668bd3b0e760a13fcc567" compoundref="mc16__matching_2main_8py" startline="108">main.tmp</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
      </memberdef>
      <memberdef kind="function" id="classio_1aacb050c4cb6c10038d6bf8edb7244a28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool io::scan_keys</definition>
        <argsstring>()</argsstring>
        <name>scan_keys</name>
        <briefdescription>
<para>Scans for keys (e.g., TTree names, TBranch names) in the open ROOT files. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if keys were successfully scanned, false otherwise (e.g., no files open). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="152" column="10" bodyfile="modules/io/cxx/root.cxx" bodystart="181" bodyend="288"/>
        <references refid="classio_1aeee1cb0ef3e70e8d42ac226db588274a" compoundref="io_8h" startline="193">branch_data</references>
        <references refid="classio_1a21d6fc9f9b2e516e8b53900c507966c3" compoundref="io_8h" startline="183">branches</references>
        <references refid="structs_2cxx_2base_8cxx_1a4eee7b291ed2cdcd4e3c2496c603c48c" compoundref="structs_2cxx_2base_8cxx" startline="62" endline="67">count</references>
        <references refid="classio_1a65ca69ec5f12d0f3a463396bcff84d77" compoundref="hdf5_8cxx" startline="28" endline="40">end</references>
        <references refid="classtools_1a3d538da5310467c9321b27cd6a75b9af" compoundref="strings_8cxx" startline="71" endline="75">tools::ends_with</references>
        <references refid="classio_1af427cf94896f4fe763a1d0a8d8cfba94" compoundref="io_8h" startline="186">files_open</references>
        <references refid="namespacesample__consistency_1a55a51c365bbd868bf90c826e36c51ad3" compoundref="sample__consistency_8py" startline="103">sample_consistency.fname</references>
        <references refid="classtools_1a13633d4d63c55bcf537ff141e7605f13" compoundref="strings_8cxx" startline="77" endline="83">tools::has_value</references>
        <references refid="classio_1a44e4131caa287c82c98f8f0bc51782d2" compoundref="io_8h" startline="200">keys</references>
        <references refid="classio_1a824813b5a46adebe68dd83c569c90e73" compoundref="io_8h" startline="196">leaf_data</references>
        <references refid="classio_1a77890c20f1b193b44925763aca5b7aca" compoundref="io_8h" startline="184">leaves</references>
        <references refid="classio_1a0837c4856145c3a8e6a85e23eb6b4e8f" compoundref="io_8h" startline="198">root_files</references>
        <references refid="classio_1abcc5293fdc6bfafbe00806ed11c97cc6" compoundref="io_8h" startline="190">tree_data</references>
        <references refid="classio_1a56dde12fc0f8422180940e9239b12731" compoundref="io_8h" startline="191">tree_entries</references>
        <references refid="classio_1a793e5c59d9bf747540db2570e9e40d10" compoundref="io_8h" startline="182">trees</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
        <referencedby refid="classio_1a65c36380ef79524e8235f792abe9625c" compoundref="io_2cxx_2root_8cxx" startline="301" endline="351">root_begin</referencedby>
        <referencedby refid="classio_1a66a6d354d07e8aa4f9fdadc8f74a314b" compoundref="io_2cxx_2root_8cxx" startline="290" endline="299">root_size</referencedby>
      </memberdef>
      <memberdef kind="function" id="classio_1a65c36380ef79524e8235f792abe9625c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void io::root_begin</definition>
        <argsstring>()</argsstring>
        <name>root_begin</name>
        <briefdescription>
<para>Initializes ROOT file processing, potentially opening files specified in settings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="156" column="10" bodyfile="modules/io/cxx/root.cxx" bodystart="301" bodyend="351"/>
        <references refid="structs_2cxx_2base_8cxx_1a4eee7b291ed2cdcd4e3c2496c603c48c" compoundref="structs_2cxx_2base_8cxx" startline="62" endline="67">count</references>
        <references refid="namespacesample__consistency_1a85366822fbdd064f24b53f9236541c0f" compoundref="sample__consistency_8py" startline="54">sample_consistency.dt</references>
        <references refid="classio_1a65ca69ec5f12d0f3a463396bcff84d77" compoundref="hdf5_8cxx" startline="28" endline="40">end</references>
        <references refid="classio_1af427cf94896f4fe763a1d0a8d8cfba94" compoundref="io_8h" startline="186">files_open</references>
        <references refid="namespacesample__consistency_1a55a51c365bbd868bf90c826e36c51ad3" compoundref="sample__consistency_8py" startline="103">sample_consistency.fname</references>
        <references refid="namespacemain_1a1eba0669b3d0fd1cef430ae99c82cc59" compoundref="benchmarks_2main_8py" startline="21">main.fx</references>
        <references refid="classio_1a824813b5a46adebe68dd83c569c90e73" compoundref="io_8h" startline="196">leaf_data</references>
        <references refid="classio_1aa880042a14225e1bd9d6c5453cf97a2f" compoundref="io_8h" startline="197">leaf_typed</references>
        <references refid="namespacechildrenkinematics_1_1figures_1a4b217acaa3fe7d5c60c04978cbf782dc" compoundref="mc16__matching_2childrenkinematics_2figures_8py" startline="9" endline="14">childrenkinematics.figures.path</references>
        <references refid="classio_1a1c994985d2405202c19fb391cc43a5de" compoundref="io_2cxx_2root_8cxx" startline="358" endline="373">root_end</references>
        <references refid="classio_1aacb050c4cb6c10038d6bf8edb7244a28" compoundref="io_2cxx_2root_8cxx" startline="181" endline="288">scan_keys</references>
        <references refid="classtools_1a352a6965f2f3c768f0f4ecd1f978fcc0" compoundref="strings_8cxx" startline="23" endline="36">tools::split</references>
        <references refid="_3event-name_4_8cxx_1ad909c3cfb5bcea8ede732f1c3da64879" compoundref="_3event-name_4_8cxx" startline="7">this</references>
        <references refid="classio_1a56dde12fc0f8422180940e9239b12731" compoundref="io_8h" startline="191">tree_entries</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
        <referencedby refid="classio_1ae346e23a45d73c24f844827495912941" compoundref="io_2cxx_2root_8cxx" startline="353" endline="356">get_data</referencedby>
      </memberdef>
      <memberdef kind="function" id="classio_1a1c994985d2405202c19fb391cc43a5de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void io::root_end</definition>
        <argsstring>()</argsstring>
        <name>root_end</name>
        <briefdescription>
<para>Finalizes ROOT file processing, closing any ROOT files opened by <computeroutput>root_begin</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="160" column="10" bodyfile="modules/io/cxx/root.cxx" bodystart="358" bodyend="373"/>
        <references refid="classio_1a65ca69ec5f12d0f3a463396bcff84d77" compoundref="hdf5_8cxx" startline="28" endline="40">end</references>
        <references refid="classtools_1abce97603aeadeaa04fa6c6ff6c721eda" compoundref="tools_8h" startline="167" endline="174">tools::flush</references>
        <references refid="namespacemain_1a1eba0669b3d0fd1cef430ae99c82cc59" compoundref="benchmarks_2main_8py" startline="21">main.fx</references>
        <referencedby refid="classio_1a65c36380ef79524e8235f792abe9625c" compoundref="io_2cxx_2root_8cxx" startline="301" endline="351">root_begin</referencedby>
        <referencedby refid="classio_1a4837676c45d56b2de96228e5fbea33ce" compoundref="io_2cxx_2io_8cxx" startline="8" endline="24">~io</referencedby>
      </memberdef>
      <memberdef kind="function" id="classio_1a38cda1cf4b0ad6920e19780ad985d374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void io::trigger_pcm</definition>
        <argsstring>()</argsstring>
        <name>trigger_pcm</name>
        <briefdescription>
<para>Triggers the generation of a ROOT PCM (Precompiled Module) if needed for dictionary generation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="164" column="10" bodyfile="modules/io/cxx/root.cxx" bodystart="7" bodyend="29"/>
        <references refid="classtools_1a408b66ad73b7b4bb962634c14a55b619" compoundref="tools_2cxx_2io_8cxx" startline="49" endline="51">tools::absolute_path</references>
        <references refid="structs_2cxx_2base_8cxx_1aa67f17555eea254a2f080d4bfaa19262" compoundref="structs_2cxx_2base_8cxx" startline="24" endline="57">buildAll</references>
        <references refid="structs_2cxx_2base_8cxx_1a25eaf56fcdb4b2d9583f6d55ee6bd9b7" compoundref="structs_2cxx_2base_8cxx" startline="5" endline="8">buildDict</references>
        <references refid="classtools_1aed9f3247b474a8fb1840860d51cde7ca" compoundref="tools_2cxx_2io_8cxx" startline="6" endline="16">tools::create_path</references>
        <references refid="classtools_1a5ab0f2cc351dd97951358ebe19e9c18d" compoundref="tools_2cxx_2io_8cxx" startline="35" endline="47">tools::ls</references>
        <references refid="namespacemain_1ae3ad17ae2d2668bd3b0e760a13fcc567" compoundref="mc16__matching_2main_8py" startline="108">main.tmp</references>
        <references refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3af31ee5e3824f1f5e5d206bdf3029f22b">undef</references>
      </memberdef>
      <memberdef kind="function" id="classio_1a81a70b8811ceea05c8827af288c6a341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void io::import_settings</definition>
        <argsstring>(settings_t *params)</argsstring>
        <name>import_settings</name>
        <param>
          <type><ref refid="structsettings__t" kindref="compound">settings_t</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Imports settings from a <computeroutput><ref refid="structsettings__t" kindref="compound">settings_t</ref></computeroutput> object to configure the <computeroutput>io</computeroutput> instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="structsettings__t" kindref="compound">settings_t</ref></computeroutput> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="169" column="10" bodyfile="modules/io/cxx/io.cxx" bodystart="26" bodyend="32"/>
        <references refid="classio_1a62caa70c9bfcaef4a32e954d94e86213" compoundref="io_8h" startline="177">enable_pyami</references>
        <references refid="namespacemain_1a3dc21daf80e643442377875b43f3afd1" compoundref="performance_2main_8py" startline="61">main.fetch_meta</references>
        <references refid="classio_1af0b0e9364667b77b04d96001b372e946" compoundref="io_8h" startline="178">metacache_path</references>
        <references refid="namespacernn__model_1a9f4e388fbf8accc0434484d8989dca0d" compoundref="rnn__model_8py" startline="22">rnn_model.params</references>
        <references refid="classio_1a22d8f26e96fe3423ca834f3a09ba0a0a" compoundref="io_8h" startline="180">sow_name</references>
      </memberdef>
      <memberdef kind="function" id="classio_1ae346e23a45d73c24f844827495912941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, <ref refid="structdata__t" kindref="compound">data_t</ref> * &gt; *</type>
        <definition>std::map&lt; std::string, data_t * &gt; * io::get_data</definition>
        <argsstring>()</argsstring>
        <name>get_data</name>
        <briefdescription>
<para>Retrieves the data read from ROOT files, likely structured as a map of <computeroutput><ref refid="structdata__t" kindref="compound">data_t</ref></computeroutput> objects. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to a map where keys are data identifiers (e.g., branch names) and values are <computeroutput><ref refid="structdata__t" kindref="compound">data_t</ref></computeroutput> pointers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="175" column="14" bodyfile="modules/io/cxx/root.cxx" bodystart="353" bodyend="356"/>
        <references refid="classio_1a65c36380ef79524e8235f792abe9625c" compoundref="io_2cxx_2root_8cxx" startline="301" endline="351">root_begin</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classio_1a1b1fcdf426ced67387cc9579f8f0f3e2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hid_t</type>
        <definition>hid_t io::member</definition>
        <argsstring>(folds_t t)</argsstring>
        <name>member</name>
        <param>
          <type><ref refid="structfolds__t" kindref="compound">folds_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>&lt; Private access specifier for the following members. </para>
        </briefdescription>
        <detaileddescription>
<para>HDF5 member type creation for <computeroutput><ref refid="structfolds__t" kindref="compound">folds_t</ref></computeroutput> struct. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of <computeroutput><ref refid="structfolds__t" kindref="compound">folds_t</ref></computeroutput> (used for type deduction, not value). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HDF5 data type identifier (<computeroutput>hid_t</computeroutput>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="208" column="11" bodyfile="modules/io/cxx/types.cxx" bodystart="3" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classio_1a0436554bbb721689f800d2e3a82ee70a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hid_t</type>
        <definition>hid_t io::member</definition>
        <argsstring>(graph_hdf5_w t)</argsstring>
        <name>member</name>
        <param>
          <type><ref refid="structgraph__hdf5__w" kindref="compound">graph_hdf5_w</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>HDF5 member type creation for <computeroutput><ref refid="structgraph__hdf5__w" kindref="compound">graph_hdf5_w</ref></computeroutput> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>An instance of <computeroutput><ref refid="structgraph__hdf5__w" kindref="compound">graph_hdf5_w</ref></computeroutput> (used for type deduction, not value). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HDF5 data type identifier (<computeroutput>hid_t</computeroutput>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="214" column="11" bodyfile="modules/io/cxx/types.cxx" bodystart="17" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classio_1a9ceaef5ce2a5f32905f1409a8c14ca20" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void io::write_event_h5</definition>
        <argsstring>(std::vector&lt; g &gt; *evnt, std::string name)</argsstring>
        <name>write_event_h5</name>
        <param>
          <type>std::vector&lt; g &gt; *</type>
          <declname>evnt</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Templated method to write event data (vector of objects) to HDF5. </para>
        </briefdescription>
        <detaileddescription>
<para>Specific implementation for event-like data structures. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of objects in the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a vector of objects of type <computeroutput>g</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the dataset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="243" column="10" bodyfile="modules/io/include/io/io.h" bodystart="243" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classio_1a6dadf1033346f6025a4047a17ddf0227" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void io::write_event_h5</definition>
        <argsstring>(g *evnt, std::string name)</argsstring>
        <name>write_event_h5</name>
        <param>
          <type>g *</type>
          <declname>evnt</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Templated method to write single event data object to HDF5. </para>
        </briefdescription>
        <detaileddescription>
<para>Specific implementation for event-like data structures. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an object of type <computeroutput>g</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the dataset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="253" column="10" bodyfile="modules/io/include/io/io.h" bodystart="253" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classio_1a4cdbdd389d60e2ba4759269123381e25" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void io::read_event_h5</definition>
        <argsstring>(std::vector&lt; g &gt; *evnt, std::string name)</argsstring>
        <name>read_event_h5</name>
        <param>
          <type>std::vector&lt; g &gt; *</type>
          <declname>evnt</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Templated method to read event data (vector of objects) from HDF5. </para>
        </briefdescription>
        <detaileddescription>
<para>Specific implementation for event-like data structures. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of objects in the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a vector of objects of type <computeroutput>g</computeroutput> to store read data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the dataset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="263" column="10" bodyfile="modules/io/include/io/io.h" bodystart="263" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classio_1a169a51324caf1e4a293a8f3df9741593" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void io::read_event_h5</definition>
        <argsstring>(g *evnt, std::string name)</argsstring>
        <name>read_event_h5</name>
        <param>
          <type>g *</type>
          <declname>evnt</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Templated method to read single event data object from HDF5. </para>
        </briefdescription>
        <detaileddescription>
<para>Specific implementation for event-like data structures. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>evnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an object of type <computeroutput>g</computeroutput> to store read data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the dataset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="273" column="10" bodyfile="modules/io/include/io/io.h" bodystart="273" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classio_1a6fdc4311aa9426644ffffc6fa45a2bf3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void io::H5Write</definition>
        <argsstring>(std::vector&lt; g &gt; *data, std::string set_name)</argsstring>
        <name>H5Write</name>
        <param>
          <type>std::vector&lt; g &gt; *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>set_name</declname>
        </param>
        <briefdescription>
<para>Generic HDF5 write operation for a vector of objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of objects in the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a vector of objects of type <computeroutput>g</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the dataset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Get HDF5 member type for the first element.</para>
<para>&lt; Perform HDF5 write using the obtained member type.</para>
<para>&lt; Close the HDF5 datatype.</para>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="282" column="10" bodyfile="modules/io/include/io/io.h" bodystart="282" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classio_1aa8eb654ca32652fde83cdd0d3ef83968" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void io::H5Write</definition>
        <argsstring>(g *data, std::string set_name)</argsstring>
        <name>H5Write</name>
        <param>
          <type>g *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>set_name</declname>
        </param>
        <briefdescription>
<para>Generic HDF5 write operation for a single object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an object of type <computeroutput>g</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the dataset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Get HDF5 member type for the object.</para>
<para>&lt; Perform HDF5 write using the obtained member type.</para>
<para>&lt; Close the HDF5 datatype.</para>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="295" column="10" bodyfile="modules/io/include/io/io.h" bodystart="295" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="classio_1a9c5e08cc995a18eff996b3cfcda641eb" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void io::H5Read</definition>
        <argsstring>(std::vector&lt; g &gt; *data, std::string set_name)</argsstring>
        <name>H5Read</name>
        <param>
          <type>std::vector&lt; g &gt; *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>set_name</declname>
        </param>
        <briefdescription>
<para>Generic HDF5 read operation for a vector of objects. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of objects in the vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a vector of objects of type <computeroutput>g</computeroutput> to store read data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the dataset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Create a default-initialized element of type g to get member type.</para>
<para>&lt; Get HDF5 member type.</para>
<para>&lt; Perform HDF5 read.</para>
<para>&lt; Close the HDF5 datatype.</para>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="308" column="10" bodyfile="modules/io/include/io/io.h" bodystart="308" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classio_1a85958081a1bfdd553a3799657a553986" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void io::H5Read</definition>
        <argsstring>(g *data, std::string set_name)</argsstring>
        <name>H5Read</name>
        <param>
          <type>g *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>set_name</declname>
        </param>
        <briefdescription>
<para>Generic HDF5 read operation for a single object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an object of type <computeroutput>g</computeroutput> to store read data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the dataset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Get HDF5 member type for the object.</para>
<para>&lt; Perform HDF5 read.</para>
<para>&lt; Close the HDF5 datatype.</para>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="322" column="10" bodyfile="modules/io/include/io/io.h" bodystart="322" bodyend="326"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classio_1a0a188e43f5e4e5b8a3b1cefa677351c2" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>herr_t</type>
        <definition>herr_t io::file_info</definition>
        <argsstring>(hid_t loc_id, const char *name, const H5L_info_t *linfo, void *opdata)</argsstring>
        <name>file_info</name>
        <param>
          <type>hid_t</type>
          <declname>loc_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const H5L_info_t *</type>
          <declname>linfo</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>opdata</declname>
        </param>
        <briefdescription>
<para>Static callback function for H5Literate, used to iterate over objects in an HDF5 file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Location identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to H5L_info_t struct containing link information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to operator data (user-supplied). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HDF5 error status. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="224" column="19" bodyfile="modules/io/cxx/hdf5.cxx" bodystart="53" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classio_1a0572259493734c39a2c7b3dd53bea717" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>herr_t</type>
        <definition>static herr_t io::op_func</definition>
        <argsstring>(hid_t loc_id, const char *name, const H5L_info_t *linfo, void *opdata)</argsstring>
        <name>op_func</name>
        <param>
          <type>hid_t</type>
          <declname>loc_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const H5L_info_t *</type>
          <declname>linfo</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>opdata</declname>
        </param>
        <briefdescription>
<para>Static callback function for H5Literate (alternative version or specific use case). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Location identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>linfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to H5L_info_t struct containing link information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opdata</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to operator data (user-supplied). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HDF5 error status. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/io/include/io/io.h" line="233" column="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>&lt; Inherits from the <computeroutput>notification</computeroutput> class for logging capabilities. </para>
    </briefdescription>
    <detaileddescription>
<para>Manages input and output operations for analysis data.</para>
<para>The <computeroutput>io</computeroutput> class provides an interface for reading from and writing to various data formats, with a focus on ROOT files (TTrees) and HDF5 files. It handles file opening/closing, data reading/writing for different data types (single objects, vectors of objects), and manages internal data structures for tracking file and dataset information. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>io</label>
        <link refid="classio"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>notification</label>
        <link refid="classnotification"/>
      </node>
      <node id="2">
        <label>tools</label>
        <link refid="classtools"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="17">
        <label>cproperty&lt; std::vector&lt; int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>meta</label>
        <link refid="classmeta"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>config</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>run_number</edgelabel>
          <edgelabel>events</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>dsid</edgelabel>
          <edgelabel>nFiles</edgelabel>
          <edgelabel>datasetNumber</edgelabel>
          <edgelabel>totalEvents</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>fileSize</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>LFN</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>inputrange</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>keyword</edgelabel>
          <edgelabel>weights</edgelabel>
          <edgelabel>keywords</edgelabel>
          <edgelabel>fileGUID</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>principalPhysicsGroup</edgelabel>
          <edgelabel>DatasetName</edgelabel>
          <edgelabel>generatorName</edgelabel>
          <edgelabel>productionStep</edgelabel>
          <edgelabel>campaign</edgelabel>
          <edgelabel>projectName</edgelabel>
          <edgelabel>physicsShort</edgelabel>
          <edgelabel>logicalDatasetName</edgelabel>
          <edgelabel>conditionsTag</edgelabel>
          <edgelabel>derivationFormat</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>cross_section_nb</edgelabel>
          <edgelabel>completion</edgelabel>
          <edgelabel>cross_section_fb</edgelabel>
          <edgelabel>ecmEnergy</edgelabel>
          <edgelabel>event_index</edgelabel>
          <edgelabel>sum_of_weights</edgelabel>
          <edgelabel>beam_energy</edgelabel>
          <edgelabel>cross_section_pb</edgelabel>
          <edgelabel>genFiltEff</edgelabel>
          <edgelabel>eventNumber</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>misc</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>inputfiles</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>isMC</edgelabel>
          <edgelabel>found</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>K</label>
      </node>
      <node id="9">
        <label>T</label>
      </node>
      <node id="10">
        <label>std::map&lt; std::string, std::map&lt; std::string, TBranch * &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::string, std::map&lt; std::string, TBranch * &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>cproperty&lt; unsigned int, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; unsigned int, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>std::map&lt; std::string, meta * &gt;</label>
        <childnode refid="14" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::string, meta * &gt;</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="9" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>std::map&lt; std::string, std::map&lt; std::string, TTree * &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::string, std::map&lt; std::string, TTree * &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>cproperty&lt; std::string, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; std::string, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>cproperty&lt; double, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; double, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::map&lt; std::string, bool &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::string, bool &gt;</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>cproperty&lt; std::vector&lt; double &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; double &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>cproperty&lt; std::map&lt; int, int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; std::map&lt; int, int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>std::map&lt; std::string, std::map&lt; std::string, std::string &gt; &gt;</label>
        <childnode refid="32" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::string, std::map&lt; std::string, std::string &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>cproperty&lt; std::map&lt; std::string, std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>cproperty&lt; T, G &gt;</label>
        <link refid="classcproperty"/>
      </node>
      <node id="22">
        <label>cproperty&lt; std::vector&lt; std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>cproperty&lt; std::map&lt; int, std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; std::map&lt; int, std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="32">
        <label>std::map&lt; std::string, std::string &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::string, std::string &gt;</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="34" relation="template-instance">
          <edgelabel>&lt; std::string &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::map&lt; std::string, std::map&lt; std::string, std::map&lt; std::string, std::vector&lt; std::string &gt; &gt; &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::string, std::map&lt; std::string, std::map&lt; std::string, std::vector&lt; std::string &gt; &gt; &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>std::map&lt; std::string, TFile * &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::string, TFile * &gt;</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>std::map&lt; std::string, std::map&lt; std::string, long &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::string, std::map&lt; std::string, long &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>cproperty&lt; bool, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; bool, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::map&lt; std::string, std::map&lt; std::string, TLeaf * &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::string, std::map&lt; std::string, TLeaf * &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>io</label>
        <link refid="classio"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>branch_data</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>root_files</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>leaf_data</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>meta_data</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>files_open</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>metacache_path</edgelabel>
          <edgelabel>current_working_path</edgelabel>
          <edgelabel>sow_name</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>tree_data</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>tree_entries</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>leaf_typed</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>branches</edgelabel>
          <edgelabel>leaves</edgelabel>
          <edgelabel>trees</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>cproperty&lt; std::map&lt; std::string, int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>notification</label>
        <link refid="classnotification"/>
        <childnode refid="4" relation="usage">
          <edgelabel>prefix</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>tools</label>
        <link refid="classtools"/>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>cproperty&lt; std::map&lt; std::string, weights_t &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, weights_t &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="modules/io/include/io/io.h" line="45" column="1" bodyfile="modules/io/include/io/io.h" bodystart="42" bodyend="349"/>
    <listofallmembers>
      <member refid="classtools_1a408b66ad73b7b4bb962634c14a55b619" prot="public" virt="non-virtual"><scope>io</scope><name>absolute_path</name></member>
      <member refid="classio_1aeee1cb0ef3e70e8d42ac226db588274a" prot="public" virt="non-virtual"><scope>io</scope><name>branch_data</name></member>
      <member refid="classio_1a21d6fc9f9b2e516e8b53900c507966c3" prot="public" virt="non-virtual"><scope>io</scope><name>branches</name></member>
      <member refid="classio_1ad9ed4dbed35a168511c44b38f8e8269b" prot="public" virt="non-virtual"><scope>io</scope><name>check_root_file_paths</name></member>
      <member refid="classtools_1aed9f3247b474a8fb1840860d51cde7ca" prot="public" virt="non-virtual"><scope>io</scope><name>create_path</name></member>
      <member refid="classio_1a4b4a0dcaf8a268ba7980945f77d54b6d" prot="private" virt="non-virtual"><scope>io</scope><name>current_file</name></member>
      <member refid="classio_1a942b4d90a023e4f5dd7259c837506067" prot="public" virt="non-virtual"><scope>io</scope><name>current_working_path</name></member>
      <member refid="classio_1ab62fdc2e4d8ea9a3492ac3ea35294f46" prot="private" virt="non-virtual"><scope>io</scope><name>data</name></member>
      <member refid="classio_1ac572af35ee4e5a6dc17a35a1d8eb4561" prot="public" virt="non-virtual"><scope>io</scope><name>dataset_names</name></member>
      <member refid="classnotification_1a8dd1ebb578269118b18bf7f0e176bf14" prot="public" virt="non-virtual"><scope>io</scope><name>Debug</name></member>
      <member refid="classnotification_1aa14ded524569ac1d7fd121c161a733be" prot="protected" virt="non-virtual"><scope>io</scope><name>debug_mode</name></member>
      <member refid="classtools_1a1f8f5e775e758e3d2442a9dd46daf78c" prot="public" virt="non-virtual"><scope>io</scope><name>delete_path</name></member>
      <member refid="classio_1a62caa70c9bfcaef4a32e954d94e86213" prot="public" virt="non-virtual"><scope>io</scope><name>enable_pyami</name></member>
      <member refid="classio_1a65ca69ec5f12d0f3a463396bcff84d77" prot="public" virt="non-virtual"><scope>io</scope><name>end</name></member>
      <member refid="classtools_1a3d538da5310467c9321b27cd6a75b9af" prot="public" virt="non-virtual"><scope>io</scope><name>ends_with</name></member>
      <member refid="classnotification_1ab0c3843575c157d799e532a9ea5acbd0" prot="public" virt="non-virtual"><scope>io</scope><name>Error</name></member>
      <member refid="classtools_1a86175bf887f3e82780cb72910181961d" prot="public" virt="non-virtual"><scope>io</scope><name>extract</name></member>
      <member refid="classio_1a0a188e43f5e4e5b8a3b1cefa677351c2" prot="private" virt="non-virtual"><scope>io</scope><name>file_info</name></member>
      <member refid="classio_1a0846f9ec8709e0113acb8385ebf5f140" prot="private" virt="non-virtual"><scope>io</scope><name>file_to_access_path</name></member>
      <member refid="classio_1a11b438e5d21d5a569fdde6fedcd7b919" prot="private" virt="non-virtual"><scope>io</scope><name>filename_data</name></member>
      <member refid="classio_1ac455b3edb714fb07585c2ae1bc2cb188" prot="private" virt="non-virtual"><scope>io</scope><name>filename_meta</name></member>
      <member refid="classio_1a7c21c65c3ad7c2cd3eac9d17b2da292b" prot="private" virt="non-virtual"><scope>io</scope><name>files_in_dir</name></member>
      <member refid="classio_1a38bf474105aa27e37da8573a3613eb71" prot="private" virt="non-virtual"><scope>io</scope><name>files_in_dir_cache</name></member>
      <member refid="classio_1af427cf94896f4fe763a1d0a8d8cfba94" prot="public" virt="non-virtual"><scope>io</scope><name>files_open</name></member>
      <member refid="classtools_1abce97603aeadeaa04fa6c6ff6c721eda" prot="public" virt="non-virtual"><scope>io</scope><name>flush</name></member>
      <member refid="classio_1ae346e23a45d73c24f844827495912941" prot="public" virt="non-virtual"><scope>io</scope><name>get_data</name></member>
      <member refid="classnotification_1ae25782afd10b3cb5fffe17afaf4fffc0" prot="public" virt="non-virtual"><scope>io</scope><name>get_debug_mode</name></member>
      <member refid="classnotification_1aa0aad214cf167691e516ecc343306244" prot="public" virt="non-virtual"><scope>io</scope><name>get_prefix</name></member>
      <member refid="classnotification_1a3a12e8eaf363a320abee5393436123f0" prot="public" virt="non-virtual"><scope>io</scope><name>get_suppress_info</name></member>
      <member refid="classnotification_1ab53313e9343e9ef6deaefa2bdd3a837a" prot="public" virt="non-virtual"><scope>io</scope><name>get_suppress_warning</name></member>
      <member refid="classio_1a9c5e08cc995a18eff996b3cfcda641eb" prot="private" virt="non-virtual"><scope>io</scope><name>H5Read</name></member>
      <member refid="classio_1a85958081a1bfdd553a3799657a553986" prot="private" virt="non-virtual"><scope>io</scope><name>H5Read</name></member>
      <member refid="classio_1a6fdc4311aa9426644ffffc6fa45a2bf3" prot="private" virt="non-virtual"><scope>io</scope><name>H5Write</name></member>
      <member refid="classio_1aa8eb654ca32652fde83cdd0d3ef83968" prot="private" virt="non-virtual"><scope>io</scope><name>H5Write</name></member>
      <member refid="classtools_1ad7229c72cee65da3605c4be82f9b42d4" prot="public" virt="non-virtual"><scope>io</scope><name>has_string</name></member>
      <member refid="classtools_1a13633d4d63c55bcf537ff141e7605f13" prot="public" virt="non-virtual"><scope>io</scope><name>has_value</name></member>
      <member refid="classio_1a81a70b8811ceea05c8827af288c6a341" prot="public" virt="non-virtual"><scope>io</scope><name>import_settings</name></member>
      <member refid="classnotification_1a2ea9e0828e3d323b5bb5cdecc8f018a8" prot="public" virt="non-virtual"><scope>io</scope><name>Info</name></member>
      <member refid="classio_1a87d6c9bb433c979e3d469090b7e4f873" prot="public" virt="non-virtual"><scope>io</scope><name>io</name></member>
      <member refid="classtools_1a47d3d261edcb898daab56721e18d1e67" prot="public" virt="non-virtual"><scope>io</scope><name>is_file</name></member>
      <member refid="classio_1a44e4131caa287c82c98f8f0bc51782d2" prot="public" virt="non-virtual"><scope>io</scope><name>keys</name></member>
      <member refid="classio_1a824813b5a46adebe68dd83c569c90e73" prot="public" virt="non-virtual"><scope>io</scope><name>leaf_data</name></member>
      <member refid="classio_1aa880042a14225e1bd9d6c5453cf97a2f" prot="public" virt="non-virtual"><scope>io</scope><name>leaf_typed</name></member>
      <member refid="classio_1a77890c20f1b193b44925763aca5b7aca" prot="public" virt="non-virtual"><scope>io</scope><name>leaves</name></member>
      <member refid="classtools_1a5ab0f2cc351dd97951358ebe19e9c18d" prot="public" virt="non-virtual"><scope>io</scope><name>ls</name></member>
      <member refid="classio_1a901d2f68c380fdfd0101c589a5686e5b" prot="private" virt="non-virtual"><scope>io</scope><name>m_h5</name></member>
      <member refid="classio_1aad8ace615604d32aac171f6aaceaeb71" prot="private" virt="non-virtual"><scope>io</scope><name>m_h5_file</name></member>
      <member refid="classio_1a224a225850efbe1fd0de30da21071d36" prot="private" virt="non-virtual"><scope>io</scope><name>m_H5event</name></member>
      <member refid="classio_1adbd8372f8f858732e77093dcc20860d3" prot="private" virt="non-virtual"><scope>io</scope><name>m_readers</name></member>
      <member refid="classio_1a1507bc75b37689abad6c5ffff498aae0" prot="private" virt="non-virtual"><scope>io</scope><name>m_settings</name></member>
      <member refid="classio_1afabfc2b19ff576cd1c67dd3be7fb9441" prot="private" virt="non-virtual"><scope>io</scope><name>m_use_h5</name></member>
      <member refid="classio_1adf79a67dfa326edb458b08e5da943740" prot="private" virt="non-virtual"><scope>io</scope><name>m_use_root</name></member>
      <member refid="classio_1aec67f9dca5281bcbc91450a7baa23813" prot="private" virt="non-virtual"><scope>io</scope><name>m_write</name></member>
      <member refid="classio_1a1b1fcdf426ced67387cc9579f8f0f3e2" prot="private" virt="non-virtual"><scope>io</scope><name>member</name></member>
      <member refid="classio_1a0436554bbb721689f800d2e3a82ee70a" prot="private" virt="non-virtual"><scope>io</scope><name>member</name></member>
      <member refid="classnotification_1a47e2d300e33c44a24b0c51d9e9a83914" prot="public" virt="non-virtual"><scope>io</scope><name>Message</name></member>
      <member refid="classio_1ab8ba9b78fd2627d93d7ddd2dd8f8627a" prot="public" virt="non-virtual"><scope>io</scope><name>meta_data</name></member>
      <member refid="classio_1af0b0e9364667b77b04d96001b372e946" prot="public" virt="non-virtual"><scope>io</scope><name>metacache_path</name></member>
      <member refid="classnotification_1a3ec5fe2d8db29cf32853858ff58fdbd7" prot="public" virt="non-virtual"><scope>io</scope><name>notification</name></member>
      <member refid="classio_1a0572259493734c39a2c7b3dd53bea717" prot="private" virt="non-virtual"><scope>io</scope><name>op_func</name></member>
      <member refid="classnotification_1a913d4c8a7736df782f900dd436cfeaa6" prot="protected" virt="non-virtual"><scope>io</scope><name>prefix</name></member>
      <member refid="classtools_1a4450b1e48193bef904b44f7a90aaee98" prot="public" virt="non-virtual"><scope>io</scope><name>put</name></member>
      <member refid="classio_1a2a0214e493a7a2ef5e9507c0e6aa4e70" prot="public" virt="non-virtual"><scope>io</scope><name>read</name></member>
      <member refid="classio_1ae9363859101b007dedf420f10e437014" prot="public" virt="non-virtual"><scope>io</scope><name>read</name></member>
      <member refid="classio_1a4744173c6cc8c89a6145fbfb11c3831e" prot="public" virt="non-virtual"><scope>io</scope><name>read</name></member>
      <member refid="classio_1a4cdbdd389d60e2ba4759269123381e25" prot="private" virt="non-virtual"><scope>io</scope><name>read_event_h5</name></member>
      <member refid="classio_1a169a51324caf1e4a293a8f3df9741593" prot="private" virt="non-virtual"><scope>io</scope><name>read_event_h5</name></member>
      <member refid="classio_1af961906e8baf0226d231a161ce9e22a0" prot="private" virt="non-virtual"><scope>io</scope><name>reader_mode</name></member>
      <member refid="classtools_1a9265b9f87bde50d0352c6cd1959ae5fc" prot="public" virt="non-virtual"><scope>io</scope><name>rename</name></member>
      <member refid="classtools_1aeae88ebd7116d59008600f0723716dba" prot="public" virt="non-virtual"><scope>io</scope><name>replace</name></member>
      <member refid="classio_1a65c36380ef79524e8235f792abe9625c" prot="public" virt="non-virtual"><scope>io</scope><name>root_begin</name></member>
      <member refid="classio_1a1c994985d2405202c19fb391cc43a5de" prot="public" virt="non-virtual"><scope>io</scope><name>root_end</name></member>
      <member refid="classio_1a0837c4856145c3a8e6a85e23eb6b4e8f" prot="public" virt="non-virtual"><scope>io</scope><name>root_files</name></member>
      <member refid="classio_1a66a6d354d07e8aa4f9fdadc8f74a314b" prot="public" virt="non-virtual"><scope>io</scope><name>root_size</name></member>
      <member refid="classio_1aacb050c4cb6c10038d6bf8edb7244a28" prot="public" virt="non-virtual"><scope>io</scope><name>scan_keys</name></member>
      <member refid="classnotification_1a5a69a50032f5dcf38bed2bb27dc048fc" prot="public" virt="non-virtual"><scope>io</scope><name>set_debug_mode</name></member>
      <member refid="classnotification_1a575db6b2e3b67a7d679205600d83b576" prot="public" virt="non-virtual"><scope>io</scope><name>set_prefix</name></member>
      <member refid="classnotification_1a58eec7023935cff9332ce21e58fc3f5a" prot="public" virt="non-virtual"><scope>io</scope><name>set_suppress_info</name></member>
      <member refid="classnotification_1a9bb77ba73a5f25af292e9eea8a8de970" prot="public" virt="non-virtual"><scope>io</scope><name>set_suppress_warning</name></member>
      <member refid="classio_1a22d8f26e96fe3423ca834f3a09ba0a0a" prot="public" virt="non-virtual"><scope>io</scope><name>sow_name</name></member>
      <member refid="classtools_1a352a6965f2f3c768f0f4ecd1f978fcc0" prot="public" virt="non-virtual"><scope>io</scope><name>split</name></member>
      <member refid="classio_1a228b6ce6f26848a9adfc0ccf3619a53e" prot="public" virt="non-virtual"><scope>io</scope><name>start</name></member>
      <member refid="classtools_1a7b784121d8b368a64995feddc7083469" prot="public" virt="non-virtual"><scope>io</scope><name>sum</name></member>
      <member refid="classnotification_1a77a99c28092cf053b395805c75dde6da" prot="protected" virt="non-virtual"><scope>io</scope><name>suppress_info</name></member>
      <member refid="classnotification_1ab2d4ba20d7bc164eece8982b413eab13" prot="protected" virt="non-virtual"><scope>io</scope><name>suppress_warnings</name></member>
      <member refid="classtools_1afd037c109d75a9f119ec042e1ba922d9" prot="public" virt="non-virtual"><scope>io</scope><name>to_string</name></member>
      <member refid="classtools_1a882f089d855dc4b3e0b60c591e11b092" prot="public" virt="non-virtual"><scope>io</scope><name>to_string</name></member>
      <member refid="classtools_1af0028ec6242448428f7c548b6e7cb714" prot="public" virt="non-virtual"><scope>io</scope><name>tools</name></member>
      <member refid="classio_1abcc5293fdc6bfafbe00806ed11c97cc6" prot="public" virt="non-virtual"><scope>io</scope><name>tree_data</name></member>
      <member refid="classio_1a56dde12fc0f8422180940e9239b12731" prot="public" virt="non-virtual"><scope>io</scope><name>tree_entries</name></member>
      <member refid="classio_1a793e5c59d9bf747540db2570e9e40d10" prot="public" virt="non-virtual"><scope>io</scope><name>trees</name></member>
      <member refid="classio_1a38cda1cf4b0ad6920e19780ad985d374" prot="public" virt="non-virtual"><scope>io</scope><name>trigger_pcm</name></member>
      <member refid="classtools_1a69be8c55f9fd7036080317a2ce98d4de" prot="public" virt="non-virtual"><scope>io</scope><name>trim</name></member>
      <member refid="classtools_1ab46f1f3892604cb366b861cb54ce30e0" prot="public" virt="non-virtual"><scope>io</scope><name>type_name</name></member>
      <member refid="classnotification_1ab758dafbb449e142fb68e11c0470b5c9" prot="public" virt="non-virtual"><scope>io</scope><name>Warning</name></member>
      <member refid="classio_1a39a32d23eeb4ae8f422bb416256fd9cd" prot="public" virt="non-virtual"><scope>io</scope><name>write</name></member>
      <member refid="classio_1acbb361e3301373cce246acf6208b60ea" prot="public" virt="non-virtual"><scope>io</scope><name>write</name></member>
      <member refid="classio_1a9ceaef5ce2a5f32905f1409a8c14ca20" prot="private" virt="non-virtual"><scope>io</scope><name>write_event_h5</name></member>
      <member refid="classio_1a6dadf1033346f6025a4047a17ddf0227" prot="private" virt="non-virtual"><scope>io</scope><name>write_event_h5</name></member>
      <member refid="classio_1a4837676c45d56b2de96228e5fbea33ce" prot="public" virt="non-virtual"><scope>io</scope><name>~io</name></member>
      <member refid="classnotification_1a0b7272463b149418caf592e398cae64e" prot="public" virt="non-virtual"><scope>io</scope><name>~notification</name></member>
      <member refid="classtools_1a04762ddd5cc588520c89a387341f77f4" prot="public" virt="non-virtual"><scope>io</scope><name>~tools</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
