<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classanalysis" kind="class" language="C++" prot="public">
    <compoundname>analysis</compoundname>
    <basecompoundref refid="classnotification" prot="public" virt="non-virtual">notification</basecompoundref>
    <basecompoundref refid="classtools" prot="public" virt="non-virtual">tools</basecompoundref>
    <includes refid="analysis_8h" local="no">analysis.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classanalysis_1a7142e8c027e12fc8b46e0045f733e107" prot="public" static="no" mutable="no">
        <type><ref refid="structsettings__t" kindref="compound">settings_t</ref></type>
        <definition>settings_t analysis::m_settings</definition>
        <argsstring></argsstring>
        <name>m_settings</name>
        <briefdescription>
<para>Object holding the analysis-wide settings and configurations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="125" column="16" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="125" bodyend="-1"/>
        <referencedby refid="classanalysis_1a401745bb4bcae03160ffa0b5df2887e7" compoundref="analysis_8cxx" startline="153" endline="226">start</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1ac827f2b50df0df252ced2499df1aaa77" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> * &gt;</type>
        <definition>std::map&lt;std::string, meta*&gt; analysis::meta_data</definition>
        <argsstring></argsstring>
        <name>meta_data</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map storing metadata objects, keyed by a string identifier (e.g., sample label). Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="126" column="14" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="126" bodyend="-1"/>
        <referencedby refid="classanalysis_1a401745bb4bcae03160ffa0b5df2887e7" compoundref="analysis_8cxx" startline="153" endline="226">start</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classanalysis_1afbcf09c1a93ecbb03fafcae06f4fe0cd" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool analysis::started</definition>
        <argsstring></argsstring>
        <name>started</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Flag indicating whether the analysis has been started. Initialized to false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="177" column="10" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1a53662412e135714fdc7b3187693ca44d" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; analysis::file_labels</definition>
        <argsstring></argsstring>
        <name>file_labels</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map to associate file paths or identifiers with user-defined labels. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="259" column="14" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1a8a45dbaf60898a4c94a5064c3f56a840" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="classevent__template" kindref="compound">event_template</ref> * &gt;</type>
        <definition>std::map&lt;std::string, event_template*&gt; analysis::event_labels</definition>
        <argsstring></argsstring>
        <name>event_labels</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map storing event templates, keyed by a label. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="260" column="14" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1aec96ec3ad94a774cfd20964b49a7aa2f" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="classmetric__template" kindref="compound">metric_template</ref> * &gt;</type>
        <definition>std::map&lt;std::string, metric_template*&gt; analysis::metric_names</definition>
        <argsstring></argsstring>
        <name>metric_names</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map storing metric templates, keyed by a name or identifier. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="261" column="14" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1aa79f70d61ab201e0334b6a54dba9bdf3" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="classselection__template" kindref="compound">selection_template</ref> * &gt;</type>
        <definition>std::map&lt;std::string, selection_template*&gt; analysis::selection_names</definition>
        <argsstring></argsstring>
        <name>selection_names</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map storing selection templates, keyed by a name or identifier. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="262" column="14" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1ad5d3c5419663b94a65af1ee441cef270" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::map&lt; std::string, <ref refid="classgraph__template" kindref="compound">graph_template</ref> * &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::map&lt;std::string, graph_template*&gt; &gt; analysis::graph_labels</definition>
        <argsstring></argsstring>
        <name>graph_labels</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map storing graph templates, nested by two string keys (e.g., category and label). Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="263" column="14" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1a6c20130e667d1e675dbc8511c4cdedbf" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; analysis::model_session_names</definition>
        <argsstring></argsstring>
        <name>model_session_names</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Vector storing names of model sessions (e.g., for different training runs). Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="265" column="17" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1a271e58c473bacd7640640a8e1ebaab57" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="classmodel__template" kindref="compound">model_template</ref> * &gt;</type>
        <definition>std::map&lt;std::string, model_template*&gt; analysis::model_inference</definition>
        <argsstring></argsstring>
        <name>model_inference</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map storing models configured for inference, keyed by a run name. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="266" column="14" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1acef1dd43b189afd9a891199718074e7a" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="classmodel__template" kindref="compound">model_template</ref> * &gt;</type>
        <definition>std::map&lt;std::string, model_template*&gt; analysis::model_metrics</definition>
        <argsstring></argsstring>
        <name>model_metrics</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map storing models for which metrics are to be calculated, keyed by a run name. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="267" column="14" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1a643dc17e6a318cdc2ab39f3c992a8520" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::tuple&lt; <ref refid="classmodel__template" kindref="compound">model_template</ref> *, <ref refid="structoptimizer__params__t" kindref="compound">optimizer_params_t</ref> * &gt; &gt;</type>
        <definition>std::vector&lt;std::tuple&lt;model_template*, optimizer_params_t*&gt; &gt; analysis::model_sessions</definition>
        <argsstring></argsstring>
        <name>model_sessions</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Vector storing tuples of model templates and their optimizer parameters for training sessions. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="268" column="17" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1a4fc756934790a7380f15cd28e1daa078" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="classoptimizer" kindref="compound">optimizer</ref> * &gt;</type>
        <definition>std::map&lt;std::string, optimizer*&gt; analysis::trainer</definition>
        <argsstring></argsstring>
        <name>trainer</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map storing optimizer objects, keyed by a run name or model identifier. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="270" column="14" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1adf711875e0f20a9f03062c8e291cbf1f" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="structmodel__report" kindref="compound">model_report</ref> * &gt;</type>
        <definition>std::map&lt;std::string, model_report*&gt; analysis::reports</definition>
        <argsstring></argsstring>
        <name>reports</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map storing model reports (e.g., training progress, evaluation results), keyed by a run name. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="271" column="14" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1a8bb38d2cd57494aef1fefae85721f003" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::thread * &gt;</type>
        <definition>std::vector&lt;std::thread*&gt; analysis::threads</definition>
        <argsstring></argsstring>
        <name>threads</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Vector to store pointers to <computeroutput>std::thread</computeroutput> objects for multithreaded execution. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="272" column="17" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1a4fb98b456d1c8364662ea08370148a21" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::map&lt; std::string, bool &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::map&lt;std::string, bool&gt; &gt; analysis::in_cache</definition>
        <argsstring></argsstring>
        <name>in_cache</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map to track cache status for data, nested by two string keys (e.g., sample and data type). Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="274" column="14" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1a6fad881637791beceddd0781e60248f9" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, bool &gt;</type>
        <definition>std::map&lt;std::string, bool&gt; analysis::skip_event_build</definition>
        <argsstring></argsstring>
        <name>skip_event_build</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map to indicate whether event building should be skipped for certain samples/labels. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="275" column="14" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1a2c2ce70ad82f95642b9b7c493691da64" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; analysis::graph_types</definition>
        <argsstring></argsstring>
        <name>graph_types</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>Map to store types of graphs associated with labels. Initialized empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="276" column="14" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1ac29ffaea303515853a3fe6f7dbfe8699" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structfolds__t" kindref="compound">folds_t</ref> &gt; *</type>
        <definition>std::vector&lt;folds_t&gt;* analysis::tags</definition>
        <argsstring></argsstring>
        <name>tags</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Pointer to a vector of <computeroutput><ref refid="structfolds__t" kindref="compound">folds_t</ref></computeroutput> (tags for data partitioning/versioning). Initialized to nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="278" column="17" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1a5bbc9622c0eb23dd70a48ae608b42cdc" prot="private" static="no" mutable="no">
        <type><ref refid="classdataloader" kindref="compound">dataloader</ref> *</type>
        <definition>dataloader* analysis::loader</definition>
        <argsstring></argsstring>
        <name>loader</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Pointer to the <computeroutput>dataloader</computeroutput> object. Initialized to nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="279" column="25" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1aaf8e5c6be13ad0fa7f3343445fae561b" prot="private" static="no" mutable="no">
        <type><ref refid="classsampletracer" kindref="compound">sampletracer</ref> *</type>
        <definition>sampletracer* analysis::tracer</definition>
        <argsstring></argsstring>
        <name>tracer</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Pointer to the <computeroutput>sampletracer</computeroutput> object. Initialized to nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="280" column="25" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classanalysis_1af38f85a26c4a5625fee64ee8c98ba247" prot="private" static="no" mutable="no">
        <type><ref refid="classio" kindref="compound">io</ref> *</type>
        <definition>io* analysis::reader</definition>
        <argsstring></argsstring>
        <name>reader</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Pointer to the <computeroutput>io</computeroutput> object for data input. Initialized to nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="281" column="25" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classanalysis_1a1391073bb18c75cdad4132e90992fcd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>analysis::analysis</definition>
        <argsstring>()</argsstring>
        <name>analysis</name>
        <briefdescription>
<para>&lt; Public access specifier for the following members. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor for the <computeroutput>analysis</computeroutput> class. Initializes a new analysis instance. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="45" column="5" bodyfile="modules/analysis/analysis.cxx" bodystart="7" bodyend="34"/>
        <references refid="classtools_1a408b66ad73b7b4bb962634c14a55b619" compoundref="tools_2cxx_2io_8cxx" startline="49" endline="51">tools::absolute_path</references>
        <references refid="structs_2cxx_2base_8cxx_1aa67f17555eea254a2f080d4bfaa19262" compoundref="structs_2cxx_2base_8cxx" startline="24" endline="57">buildAll</references>
        <references refid="structs_2cxx_2base_8cxx_1a25eaf56fcdb4b2d9583f6d55ee6bd9b7" compoundref="structs_2cxx_2base_8cxx" startline="5" endline="8">buildDict</references>
        <references refid="classtools_1aed9f3247b474a8fb1840860d51cde7ca" compoundref="tools_2cxx_2io_8cxx" startline="6" endline="16">tools::create_path</references>
        <references refid="classtools_1a5ab0f2cc351dd97951358ebe19e9c18d" compoundref="tools_2cxx_2io_8cxx" startline="35" endline="47">tools::ls</references>
        <references refid="classnotification_1a913d4c8a7736df782f900dd436cfeaa6" compoundref="notification_8h" startline="126">notification::prefix</references>
        <references refid="namespacemain_1ae3ad17ae2d2668bd3b0e760a13fcc567" compoundref="mc16__matching_2main_8py" startline="108">main.tmp</references>
        <references refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3af31ee5e3824f1f5e5d206bdf3029f22b">undef</references>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1af5938086aabb68bf478a72b0593e4bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>analysis::~analysis</definition>
        <argsstring>()</argsstring>
        <name>~analysis</name>
        <briefdescription>
<para>Destructor for the <computeroutput>analysis</computeroutput> class. </para>
        </briefdescription>
        <detaileddescription>
<para>Cleans up resources, such as deleting dynamically allocated objects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="50" column="5" bodyfile="modules/analysis/analysis.cxx" bodystart="36" bodyend="46"/>
        <references refid="classtools_1abce97603aeadeaa04fa6c6ff6c721eda" compoundref="tools_8h" startline="167" endline="174">tools::flush</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1ad49ba744577bd6d17f83efa48909f767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::add_samples</definition>
        <argsstring>(std::string path, std::string label)</argsstring>
        <name>add_samples</name>
        <param>
          <type>std::string</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Adds data samples to the analysis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the data sample (file or directory). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>A label to identify this sample. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="57" column="10" bodyfile="modules/analysis/analysis.cxx" bodystart="48" bodyend="50"/>
        <references refid="namespacemain_1aced2f0e5b178381f9f0a0bf045d8b11d" compoundref="performance_2main_8py" startline="126">main.label</references>
        <references refid="namespacechildrenkinematics_1_1figures_1a4b217acaa3fe7d5c60c04978cbf782dc" compoundref="mc16__matching_2childrenkinematics_2figures_8py" startline="9" endline="14">childrenkinematics.figures.path</references>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a4ef9fa88fc930b37691ed93602c4b24c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::add_selection_template</definition>
        <argsstring>(selection_template *sel)</argsstring>
        <name>add_selection_template</name>
        <param>
          <type><ref refid="classselection__template" kindref="compound">selection_template</ref> *</type>
          <declname>sel</declname>
        </param>
        <briefdescription>
<para>Adds a selection template to the analysis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sel</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="classselection__template" kindref="compound">selection_template</ref></computeroutput> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="62" column="10" bodyfile="modules/analysis/analysis.cxx" bodystart="60" bodyend="62"/>
        <references refid="_3name_4_8h_1a13693d172ed8717c27f198afdd212a7e">name</references>
        <references refid="namespacemain_1a37e50d3a642b605bc387ae3703d9730b" compoundref="analysis_2main_8py" startline="11">main.sel</references>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a6d71bcd8dfe9deb47acba686df1e0058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::add_event_template</definition>
        <argsstring>(event_template *ev, std::string label)</argsstring>
        <name>add_event_template</name>
        <param>
          <type><ref refid="classevent__template" kindref="compound">event_template</ref> *</type>
          <declname>ev</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Adds an event template to the analysis, associating it with a label. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ev</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <computeroutput><ref refid="classevent__template" kindref="compound">event_template</ref></computeroutput> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>A label to identify this event template. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="68" column="10" bodyfile="modules/analysis/analysis.cxx" bodystart="52" bodyend="54"/>
        <references refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" compoundref="analysis_2main_8py" startline="10">main.ev</references>
        <references refid="namespacemain_1aced2f0e5b178381f9f0a0bf045d8b11d" compoundref="performance_2main_8py" startline="126">main.label</references>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a03e15b76f9271d2c98f094cd7cdb3863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::add_graph_template</definition>
        <argsstring>(graph_template *gr, std::string label)</argsstring>
        <name>add_graph_template</name>
        <param>
          <type><ref refid="classgraph__template" kindref="compound">graph_template</ref> *</type>
          <declname>gr</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Adds a graph template to the analysis, associating it with a label. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="classgraph__template" kindref="compound">graph_template</ref></computeroutput> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>A label to identify this graph template. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="74" column="10" bodyfile="modules/analysis/analysis.cxx" bodystart="56" bodyend="58"/>
        <references refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" compoundref="analysis_2main_8py" startline="10">main.ev</references>
        <references refid="namespacemain_1aced2f0e5b178381f9f0a0bf045d8b11d" compoundref="performance_2main_8py" startline="126">main.label</references>
        <references refid="_3name_4_8h_1a13693d172ed8717c27f198afdd212a7e">name</references>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a33de64cfd2bc244ff02feb0cc9b2db58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::add_metric_template</definition>
        <argsstring>(metric_template *mx, model_template *mdl)</argsstring>
        <name>add_metric_template</name>
        <param>
          <type><ref refid="classmetric__template" kindref="compound">metric_template</ref> *</type>
          <declname>mx</declname>
        </param>
        <param>
          <type><ref refid="classmodel__template" kindref="compound">model_template</ref> *</type>
          <declname>mdl</declname>
        </param>
        <briefdescription>
<para>Adds a metric template to the analysis, associating it with a model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="classmetric__template" kindref="compound">metric_template</ref></computeroutput> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mdl</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="classmodel__template" kindref="compound">model_template</ref></computeroutput> object that this metric applies to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="80" column="10" bodyfile="modules/analysis/analysis.cxx" bodystart="64" bodyend="68"/>
        <references refid="namespacemain_1a6e037a1111374e9b39a470eb175616d0" compoundref="performance_2main_8py" startline="141">main.mdl</references>
        <references refid="namespacetest__evaluation_1a8b69c4c7eca9cf96bd54661475a5a81b" compoundref="test__evaluation_8py" startline="29">test_evaluation.mx</references>
        <references refid="_3name_4_8h_1a13693d172ed8717c27f198afdd212a7e">name</references>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a51e47012fc4522964dbfba5baa89090c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::add_model</definition>
        <argsstring>(model_template *model, optimizer_params_t *op, std::string run_name)</argsstring>
        <name>add_model</name>
        <param>
          <type><ref refid="classmodel__template" kindref="compound">model_template</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="structoptimizer__params__t" kindref="compound">optimizer_params_t</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>run_name</declname>
        </param>
        <briefdescription>
<para>Adds a machine learning model and its optimizer parameters to the analysis for training. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="classmodel__template" kindref="compound">model_template</ref></computeroutput> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <computeroutput><ref refid="structoptimizer__params__t" kindref="compound">optimizer_params_t</ref></computeroutput> object containing optimizer settings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>run_name</parametername>
</parameternamelist>
<parameterdescription>
<para>A name for this training run or model session. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="87" column="10" bodyfile="modules/analysis/analysis.cxx" bodystart="70" bodyend="74"/>
        <references refid="_3model-name_4_8h_1ad0ded42ec33a25917cb08450648f7c49">model</references>
        <references refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" compoundref="test__generator_8py" startline="28">test_generator.op</references>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1afed2f6950a6dab942edbb811425d0502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::add_model</definition>
        <argsstring>(model_template *model, std::string run_name)</argsstring>
        <name>add_model</name>
        <param>
          <type><ref refid="classmodel__template" kindref="compound">model_template</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>run_name</declname>
        </param>
        <briefdescription>
<para>Adds a machine learning model to the analysis, typically for inference or metrics without explicit optimizer params here. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="classmodel__template" kindref="compound">model_template</ref></computeroutput> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>run_name</parametername>
</parameternamelist>
<parameterdescription>
<para>A name for this model session (e.g., for inference or pre-trained model metrics). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="93" column="10" bodyfile="modules/analysis/analysis.cxx" bodystart="76" bodyend="79"/>
        <references refid="_3model-name_4_8h_1ad0ded42ec33a25917cb08450648f7c49">model</references>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1aef743f474198aafe72fdbc2abe2b0b29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::attach_threads</definition>
        <argsstring>()</argsstring>
        <name>attach_threads</name>
        <briefdescription>
<para>Attaches or manages threads for parallel processing, if implemented. </para>
        </briefdescription>
        <detaileddescription>
<para>Attaches training threads for parallel execution.</para>
<para>This method starts training threads for each optimizer, allowing multiple models to train concurrently when appropriate hardware resources are available. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="97" column="10" bodyfile="modules/analysis/optimizer_build.cxx" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a401745bb4bcae03160ffa0b5df2887e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <briefdescription>
<para>Starts the analysis execution. </para>
        </briefdescription>
        <detaileddescription>
<para>This method triggers the main analysis loop, including data processing, model training/inference, etc. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="102" column="10" bodyfile="modules/analysis/analysis.cxx" bodystart="153" bodyend="226"/>
        <references refid="structsettings__t_1a4eca9affb4c99a15e46c00ce9f7b7835" compoundref="settings_8h" startline="202">settings_t::build_cache</references>
        <references refid="classtools_1aed9f3247b474a8fb1840860d51cde7ca" compoundref="tools_2cxx_2io_8cxx" startline="6" endline="16">tools::create_path</references>
        <references refid="structsettings__t_1a5df915d5d0eb7dd35eb8ada846a7aaa4" compoundref="settings_8h" startline="196">settings_t::debug_mode</references>
        <references refid="classtools_1a3d538da5310467c9321b27cd6a75b9af" compoundref="strings_8cxx" startline="71" endline="75">tools::ends_with</references>
        <references refid="namespacesample__consistency_1a55a51c365bbd868bf90c826e36c51ad3" compoundref="sample__consistency_8py" startline="103">sample_consistency.fname</references>
        <references refid="structsettings__t_1a432e549d09bb6a2e87fa37abf2468e83" compoundref="settings_8h" startline="134">settings_t::graph_cache</references>
        <references refid="classanalysis_1a7142e8c027e12fc8b46e0045f733e107" compoundref="analysis_8h" startline="125">m_settings</references>
        <references refid="classanalysis_1ac827f2b50df0df252ced2499df1aaa77" compoundref="analysis_8h" startline="126">meta_data</references>
        <references refid="structsettings__t_1adfb471fcc454bdfb97309137a9c75d9e" compoundref="settings_8h" startline="30">settings_t::output_path</references>
        <references refid="structsettings__t_1a2e1b9a538a4421480ac8726699575b3e" compoundref="settings_8h" startline="60">settings_t::pretagevents</references>
        <references refid="classtools_1aeae88ebd7116d59008600f0723716dba" compoundref="strings_8cxx" startline="5" endline="21">tools::replace</references>
        <references refid="classtools_1a352a6965f2f3c768f0f4ecd1f978fcc0" compoundref="strings_8cxx" startline="23" endline="36">tools::split</references>
        <references refid="_3event-name_4_8cxx_1ad909c3cfb5bcea8ede732f1c3da64879" compoundref="_3event-name_4_8cxx" startline="7">this</references>
        <references refid="structsettings__t_1a383cb4d94ff68571dc4cd2e8a9f4d00f" compoundref="settings_8h" startline="190">settings_t::threads</references>
        <referencedby refid="classdataloader_1a6a829ac2b88dd9655a52bdf3e3701259" compoundref="dataset_8cxx" startline="129" endline="173">dataloader::dump_dataset</referencedby>
        <referencedby refid="classdataloader_1a5fddffa25c532953896e2d1646ca1dc4" compoundref="dataset_8cxx" startline="175" endline="221">dataloader::restore_dataset</referencedby>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1ab550330c7c309f24423fa3d48481ea64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, std::vector&lt; float &gt; &gt;</type>
        <definition>std::map&lt; std::string, std::vector&lt; float &gt; &gt; analysis::progress</definition>
        <argsstring>()</argsstring>
        <name>progress</name>
        <briefdescription>
<para>Retrieves the progress of different analysis tasks or model trainings. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves training progress information for all models.</para>
<para><simplesect kind="return"><para>A map where keys are task/model names and values are vectors of floats representing progress (e.g., percentage or epoch number).</para>
</simplesect>
<simplesect kind="return"><para>A map of model names to vectors of float values representing progress metrics.</para>
</simplesect>
This method collects progress information from all active model training sessions, including metrics like loss and accuracy values over time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="108" column="14" bodyfile="modules/analysis/optimizer_build.cxx" bodystart="96" bodyend="106"/>
        <references refid="_3event-name_4_8cxx_1ad909c3cfb5bcea8ede732f1c3da64879" compoundref="_3event-name_4_8cxx" startline="7">this</references>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a14ff6c25448d59d0c6296c45ba180485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt; std::string, std::string &gt; analysis::progress_mode</definition>
        <argsstring>()</argsstring>
        <name>progress_mode</name>
        <briefdescription>
<para>Retrieves the current mode (e.g., training, evaluating) of different analysis tasks. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the current training mode for all models.</para>
<para><simplesect kind="return"><para>A map where keys are task/model names and values are strings describing the mode.</para>
</simplesect>
<simplesect kind="return"><para>A map of model names to strings indicating current training mode.</para>
</simplesect>
This method provides information about the current operation mode of each training session (e.g., &quot;training&quot;, &quot;validation&quot;, &quot;inference&quot;). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="113" column="14" bodyfile="modules/analysis/optimizer_build.cxx" bodystart="115" bodyend="126"/>
        <references refid="_3event-name_4_8cxx_1ad909c3cfb5bcea8ede732f1c3da64879" compoundref="_3event-name_4_8cxx" startline="7">this</references>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a6b719e04f433468bc84c45aa31abb400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt; std::string, std::string &gt; analysis::progress_report</definition>
        <argsstring>()</argsstring>
        <name>progress_report</name>
        <briefdescription>
<para>Retrieves a textual report of the progress or status of different analysis tasks. </para>
        </briefdescription>
        <detaileddescription>
<para>Retrieves detailed progress reports for all models.</para>
<para><simplesect kind="return"><para>A map where keys are task/model names and values are strings containing progress reports.</para>
</simplesect>
<simplesect kind="return"><para>A map of model names to report strings.</para>
</simplesect>
This method provides detailed textual progress reports for each training session, including current metrics, epoch information, and time estimates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="118" column="14" bodyfile="modules/analysis/optimizer_build.cxx" bodystart="135" bodyend="146"/>
        <references refid="_3event-name_4_8cxx_1ad909c3cfb5bcea8ede732f1c3da64879" compoundref="_3event-name_4_8cxx" startline="7">this</references>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1aa9288840e05af08f88af73f6ceca8f29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, bool &gt;</type>
        <definition>std::map&lt; std::string, bool &gt; analysis::is_complete</definition>
        <argsstring>()</argsstring>
        <name>is_complete</name>
        <briefdescription>
<para>Checks if specific analysis tasks or model trainings are complete. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks if training is complete for all models.</para>
<para><simplesect kind="return"><para>A map where keys are task/model names and values are booleans (true if complete, false otherwise).</para>
</simplesect>
<simplesect kind="return"><para>A map of model names to boolean values indicating completion status.</para>
</simplesect>
This method determines whether each model training session has completed its specified number of epochs or met other completion criteria. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="123" column="14" bodyfile="modules/analysis/optimizer_build.cxx" bodystart="155" bodyend="160"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classanalysis_1a0cbe44c90dab45066bfe074e506c5d8d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::check_cache</definition>
        <argsstring>()</argsstring>
        <name>check_cache</name>
        <briefdescription>
<para>&lt; Private access specifier for the following members. </para>
        </briefdescription>
        <detaileddescription>
<para>Checks for cached data and potentially loads it to speed up processing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="132" column="10" bodyfile="modules/analysis/analysis.cxx" bodystart="97" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1ab1e46d4a55389c9159584cc1c4f217a0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::build_project</definition>
        <argsstring>()</argsstring>
        <name>build_project</name>
        <briefdescription>
<para>Builds the project structure, possibly setting up directories or initial configurations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="136" column="10" bodyfile="modules/analysis/analysis.cxx" bodystart="81" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a68b520bbdb4d591d7375f9ecd6532ce8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::build_events</definition>
        <argsstring>()</argsstring>
        <name>build_events</name>
        <briefdescription>
<para>Builds or processes event data based on the added event templates and samples. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="140" column="10" bodyfile="modules/analysis/event_build.cxx" bodystart="4" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a12ac50912be5864fb354b7e0bd3341a3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::build_selections</definition>
        <argsstring>()</argsstring>
        <name>build_selections</name>
        <briefdescription>
<para>Builds or applies event selections based on the added selection templates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="144" column="10" bodyfile="modules/analysis/selection_build.cxx" bodystart="3" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a1c3e0d7bb80774d865586b18a1566704" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::build_graphs</definition>
        <argsstring>()</argsstring>
        <name>build_graphs</name>
        <briefdescription>
<para>Builds graph representations of the event data based on the added graph templates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="148" column="10" bodyfile="modules/analysis/graph_build.cxx" bodystart="3" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a9e329f763a57c75ca47bec379fab102e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::build_model_session</definition>
        <argsstring>()</argsstring>
        <name>build_model_session</name>
        <briefdescription>
<para>Sets up and configures machine learning model sessions for training or inference. </para>
        </briefdescription>
        <detaileddescription>
<para>Builds model sessions for training and inference.</para>
<para>This method initializes model sessions based on configuration settings, sets up optimizers, and transfers data to appropriate devices. It prepares the environment for model training or inference by:<orderedlist>
<listitem><para>Creating device maps for data tensors</para>
</listitem><listitem><para>Setting up optimizers with appropriate parameters</para>
</listitem><listitem><para>Configuring k-fold cross-validation</para>
</listitem><listitem><para>Distributing training/validation data appropriately </para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="152" column="10" bodyfile="modules/analysis/optimizer_build.cxx" bodystart="25" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a7b98125c72486407d782b2bc2ea67389" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::build_inference</definition>
        <argsstring>()</argsstring>
        <name>build_inference</name>
        <briefdescription>
<para>Sets up the environment for model inference (prediction). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="156" column="10" bodyfile="modules/analysis/inference_build.cxx" bodystart="5" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1ad1bf7fde8eafef15d4dcedcba5ce51f7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool analysis::build_metric</definition>
        <argsstring>()</argsstring>
        <name>build_metric</name>
        <briefdescription>
<para>Builds or calculates metrics for evaluating model performance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if metric building was successful, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="162" column="10" bodyfile="modules/analysis/metric_build.cxx" bodystart="16" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1ac4b2760bd5a08f9bd2b5553856dcbfff" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::build_metric_folds</definition>
        <argsstring>()</argsstring>
        <name>build_metric_folds</name>
        <briefdescription>
<para>Builds or calculates metrics across different data folds (e.g., for k-fold cross-validation). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="166" column="10" bodyfile="modules/analysis/metric_build.cxx" bodystart="4" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a929d006d8c02d16b6472d7625578aa21" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::build_dataloader</definition>
        <argsstring>(bool training)</argsstring>
        <name>build_dataloader</name>
        <param>
          <type>bool</type>
          <declname>training</declname>
        </param>
        <briefdescription>
<para>Builds or configures the data loader for training or evaluation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>training</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean flag, true if for training, false if for evaluation/inference. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="172" column="10" bodyfile="modules/analysis/graph_build.cxx" bodystart="32" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1aa5f5f1de2fe05c9fb8c5c0fffbf7b938" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::fetchtags</definition>
        <argsstring>()</argsstring>
        <name>fetchtags</name>
        <briefdescription>
<para>Fetches tags, possibly related to data versions, processing stages, or k-folds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="176" column="10" bodyfile="modules/analysis/analysis.cxx" bodystart="144" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a3cd3d6b2539ad3d5778cffabda174228" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void analysis::safe_clone</definition>
        <argsstring>(std::map&lt; std::string, g * &gt; *mp, g *in)</argsstring>
        <name>safe_clone</name>
        <param>
          <type>std::map&lt; std::string, g * &gt; *</type>
          <declname>mp</declname>
        </param>
        <param>
          <type>g *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Templated helper method to safely clone objects (e.g., event or graph templates). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the object to clone. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mp</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a map where the cloned object might be stored or looked up. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the object to be cloned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="253" column="10" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="253" bodyend="257"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classanalysis_1a25047bd23730c36cde68661179257c9b" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int analysis::add_content</definition>
        <argsstring>(std::map&lt; std::string, torch::Tensor * &gt; *data, std::vector&lt; variable_t &gt; *content, int index, std::string prefx, TTree *tt=nullptr)</argsstring>
        <name>add_content</name>
        <param>
          <type>std::map&lt; std::string, torch::Tensor * &gt; *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structvariable__t" kindref="compound">variable_t</ref> &gt; *</type>
          <declname>content</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>prefx</declname>
        </param>
        <param>
          <type>TTree *</type>
          <declname>tt</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Static helper method to add content (features) to a data map from various sources. </para>
        </briefdescription>
        <detaileddescription>
<para>This version likely handles adding features from a TTree to torch::Tensor objects. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a map where keys are feature names and values are <computeroutput>torch::Tensor</computeroutput> pointers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a vector of <computeroutput><ref refid="structvariable__t" kindref="compound">variable_t</ref></computeroutput> structs describing the features to extract. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Current event index or entry number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefx</parametername>
</parameternamelist>
<parameterdescription>
<para>A prefix string for feature names. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the TTree to read from (optional, defaults to nullptr). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An integer status code (e.g., 0 for success). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="189" column="16" bodyfile="modules/analysis/methods.cxx" bodystart="51" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a27d97e844c0bbe64df5392936f69cee4" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::add_content</definition>
        <argsstring>(std::map&lt; std::string, torch::Tensor * &gt; *data, std::vector&lt; std::vector&lt; torch::Tensor &gt;&gt; *buff, torch::Tensor *edge, torch::Tensor *node, torch::Tensor *batch, std::vector&lt; long &gt; mask)</argsstring>
        <name>add_content</name>
        <param>
          <type>std::map&lt; std::string, torch::Tensor * &gt; *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; torch::Tensor &gt;&gt; *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>edge</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>batch</declname>
        </param>
        <param>
          <type>std::vector&lt; long &gt;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Static helper method to add content (features) to a data map from a buffer of tensors. </para>
        </briefdescription>
        <detaileddescription>
<para>This version likely handles adding features from pre-loaded tensor buffers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a map where keys are feature names and values are <computeroutput>torch::Tensor</computeroutput> pointers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buff</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a vector of vectors of <computeroutput>torch::Tensor</computeroutput> (the buffer). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>edge</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput>torch::Tensor</computeroutput> object for edge features. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput>torch::Tensor</computeroutput> object for node features. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batch</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput>torch::Tensor</computeroutput> object for batch information. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of long integers representing a mask. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="205" column="17" bodyfile="modules/analysis/methods.cxx" bodystart="65" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a8a8e07da99928e764601ff8c56edc1df" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::execution</definition>
        <argsstring>(model_template *mdx, model_settings_t mds, std::vector&lt; graph_t * &gt; *data, size_t *prg, std::string output, std::vector&lt; variable_t &gt; *content, std::string *msg)</argsstring>
        <name>execution</name>
        <param>
          <type><ref refid="classmodel__template" kindref="compound">model_template</ref> *</type>
          <declname>mdx</declname>
        </param>
        <param>
          <type><ref refid="structmodel__settings__t" kindref="compound">model_settings_t</ref></type>
          <declname>mds</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structgraph__t" kindref="compound">graph_t</ref> * &gt; *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>prg</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>output</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structvariable__t" kindref="compound">variable_t</ref> &gt; *</type>
          <declname>content</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Static method to execute a model (training or inference) on a set of data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mdx</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput><ref refid="classmodel__template" kindref="compound">model_template</ref></computeroutput> to be executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mds</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput><ref refid="structmodel__settings__t" kindref="compound">model_settings_t</ref></computeroutput> object containing settings for this model execution. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a vector of <computeroutput><ref refid="structgraph__t" kindref="compound">graph_t</ref></computeroutput> objects (input data). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a size_t variable for progress tracking. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output</parametername>
</parameternamelist>
<parameterdescription>
<para>Path or identifier for the output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a vector of <computeroutput><ref refid="structvariable__t" kindref="compound">variable_t</ref></computeroutput> for output content description. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a string for status messages. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="220" column="17" bodyfile="modules/analysis/methods.cxx" bodystart="88" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1acf4137dd2ceda151a94d68b2ed199da8" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::execution_metric</definition>
        <argsstring>(metric_t *mt, size_t *prg, std::string *msg)</argsstring>
        <name>execution_metric</name>
        <param>
          <type><ref refid="structmetric__t" kindref="compound">metric_t</ref> *</type>
          <declname>mt</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>prg</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Static method to execute metric calculation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a <computeroutput><ref refid="structmetric__t" kindref="compound">metric_t</ref></computeroutput> object (likely containing metric definitions and results). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a size_t variable for progress tracking. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a string for status messages. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="231" column="17" bodyfile="modules/analysis/methods.cxx" bodystart="215" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classanalysis_1a1c8b808d255b490be4ea86df4d29cdf1" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void analysis::initialize_loop</definition>
        <argsstring>(optimizer *op, int k, model_template *model, optimizer_params_t *config, model_report **rep)</argsstring>
        <name>initialize_loop</name>
        <param>
          <type><ref refid="classoptimizer" kindref="compound">optimizer</ref> *</type>
          <declname>op</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classmodel__template" kindref="compound">model_template</ref> *</type>
          <declname>model</declname>
        </param>
        <param>
          <type><ref refid="structoptimizer__params__t" kindref="compound">optimizer_params_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="structmodel__report" kindref="compound">model_report</ref> **</type>
          <declname>rep</declname>
        </param>
        <briefdescription>
<para>Static method to initialize a training loop for an optimizer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>optimizer</computeroutput> object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The k-fold index or a similar loop identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput><ref refid="classmodel__template" kindref="compound">model_template</ref></computeroutput> being trained. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput><ref refid="structoptimizer__params__t" kindref="compound">optimizer_params_t</ref></computeroutput> for this training session. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rep</parametername>
</parameternamelist>
<parameterdescription>
<para>Double pointer to a <computeroutput><ref refid="structmodel__report" kindref="compound">model_report</ref></computeroutput> object to store training reports. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/analysis/include/AnalysisG/analysis.h" line="241" column="17" bodyfile="modules/analysis/methods.cxx" bodystart="7" bodyend="49"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>&lt; Inherits from the <computeroutput>tools</computeroutput> class for utility functions. </para>
    </briefdescription>
    <detaileddescription>
<para>Orchestrates the entire physics analysis workflow.</para>
<para>The <computeroutput>analysis</computeroutput> class is the main driver for performing a physics analysis. It manages the configuration, data processing, model execution, and result collection. Users interact with this class to define the analysis steps, add samples, specify models, and run the analysis. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>analysis</label>
        <link refid="classanalysis"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>notification</label>
        <link refid="classnotification"/>
      </node>
      <node id="3">
        <label>tools</label>
        <link refid="classtools"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="15">
        <label>cproperty&lt; std::vector&lt; int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="14" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>meta</label>
        <link refid="classmeta"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>config</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>run_number</edgelabel>
          <edgelabel>events</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>dsid</edgelabel>
          <edgelabel>nFiles</edgelabel>
          <edgelabel>datasetNumber</edgelabel>
          <edgelabel>totalEvents</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>fileSize</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>LFN</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>inputrange</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>keyword</edgelabel>
          <edgelabel>weights</edgelabel>
          <edgelabel>keywords</edgelabel>
          <edgelabel>fileGUID</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>principalPhysicsGroup</edgelabel>
          <edgelabel>DatasetName</edgelabel>
          <edgelabel>generatorName</edgelabel>
          <edgelabel>productionStep</edgelabel>
          <edgelabel>campaign</edgelabel>
          <edgelabel>projectName</edgelabel>
          <edgelabel>physicsShort</edgelabel>
          <edgelabel>logicalDatasetName</edgelabel>
          <edgelabel>conditionsTag</edgelabel>
          <edgelabel>derivationFormat</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>cross_section_nb</edgelabel>
          <edgelabel>completion</edgelabel>
          <edgelabel>cross_section_fb</edgelabel>
          <edgelabel>ecmEnergy</edgelabel>
          <edgelabel>event_index</edgelabel>
          <edgelabel>sum_of_weights</edgelabel>
          <edgelabel>beam_energy</edgelabel>
          <edgelabel>cross_section_pb</edgelabel>
          <edgelabel>genFiltEff</edgelabel>
          <edgelabel>eventNumber</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>misc</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>inputfiles</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>isMC</edgelabel>
          <edgelabel>found</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>analysis</label>
        <link refid="classanalysis"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_settings</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>meta_data</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>K</label>
      </node>
      <node id="9">
        <label>T</label>
      </node>
      <node id="16">
        <label>cproperty&lt; unsigned int, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="14" relation="template-instance">
          <edgelabel>&lt; unsigned int, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::map&lt; std::string, meta * &gt;</label>
        <childnode refid="12" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="26" relation="template-instance">
          <edgelabel>&lt; std::string, meta * &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="9" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>cproperty&lt; std::string, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="14" relation="template-instance">
          <edgelabel>&lt; std::string, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="27" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>cproperty&lt; double, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="14" relation="template-instance">
          <edgelabel>&lt; double, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>cproperty&lt; std::vector&lt; double &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="14" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; double &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>cproperty&lt; std::map&lt; int, int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="14" relation="template-instance">
          <edgelabel>&lt; std::map&lt; int, int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>cproperty&lt; std::map&lt; std::string, std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="14" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>cproperty&lt; T, G &gt;</label>
        <link refid="classcproperty"/>
      </node>
      <node id="20">
        <label>cproperty&lt; std::vector&lt; std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="14" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>cproperty&lt; std::map&lt; int, std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="14" relation="template-instance">
          <edgelabel>&lt; std::map&lt; int, std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="10">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; std::string &gt;</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>cproperty&lt; bool, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="14" relation="template-instance">
          <edgelabel>&lt; bool, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>cproperty&lt; std::map&lt; std::string, int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="14" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>notification</label>
        <link refid="classnotification"/>
        <childnode refid="3" relation="usage">
          <edgelabel>prefix</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::vector&lt; int &gt;</label>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; int &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>tools</label>
        <link refid="classtools"/>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>cproperty&lt; std::map&lt; std::string, weights_t &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="14" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, weights_t &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>settings_t</label>
        <link refid="structsettings__t"/>
        <childnode refid="3" relation="usage">
          <edgelabel>graph_cache</edgelabel>
          <edgelabel>output_path</edgelabel>
          <edgelabel>metacache_path</edgelabel>
          <edgelabel>run_name</edgelabel>
          <edgelabel>var_eta</edgelabel>
          <edgelabel>training_dataset</edgelabel>
          <edgelabel>sow_name</edgelabel>
          <edgelabel>var_phi</edgelabel>
          <edgelabel>var_pt</edgelabel>
          <edgelabel>var_energy</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>kfold</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>targets</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="modules/analysis/include/AnalysisG/analysis.h" line="39" column="1" bodyfile="modules/analysis/include/AnalysisG/analysis.h" bodystart="36" bodyend="283"/>
    <listofallmembers>
      <member refid="classtools_1a408b66ad73b7b4bb962634c14a55b619" prot="public" virt="non-virtual"><scope>analysis</scope><name>absolute_path</name></member>
      <member refid="classanalysis_1a25047bd23730c36cde68661179257c9b" prot="private" virt="non-virtual"><scope>analysis</scope><name>add_content</name></member>
      <member refid="classanalysis_1a27d97e844c0bbe64df5392936f69cee4" prot="private" virt="non-virtual"><scope>analysis</scope><name>add_content</name></member>
      <member refid="classanalysis_1a6d71bcd8dfe9deb47acba686df1e0058" prot="public" virt="non-virtual"><scope>analysis</scope><name>add_event_template</name></member>
      <member refid="classanalysis_1a03e15b76f9271d2c98f094cd7cdb3863" prot="public" virt="non-virtual"><scope>analysis</scope><name>add_graph_template</name></member>
      <member refid="classanalysis_1a33de64cfd2bc244ff02feb0cc9b2db58" prot="public" virt="non-virtual"><scope>analysis</scope><name>add_metric_template</name></member>
      <member refid="classanalysis_1a51e47012fc4522964dbfba5baa89090c" prot="public" virt="non-virtual"><scope>analysis</scope><name>add_model</name></member>
      <member refid="classanalysis_1afed2f6950a6dab942edbb811425d0502" prot="public" virt="non-virtual"><scope>analysis</scope><name>add_model</name></member>
      <member refid="classanalysis_1ad49ba744577bd6d17f83efa48909f767" prot="public" virt="non-virtual"><scope>analysis</scope><name>add_samples</name></member>
      <member refid="classanalysis_1a4ef9fa88fc930b37691ed93602c4b24c" prot="public" virt="non-virtual"><scope>analysis</scope><name>add_selection_template</name></member>
      <member refid="classanalysis_1a1391073bb18c75cdad4132e90992fcd3" prot="public" virt="non-virtual"><scope>analysis</scope><name>analysis</name></member>
      <member refid="classanalysis_1aef743f474198aafe72fdbc2abe2b0b29" prot="public" virt="non-virtual"><scope>analysis</scope><name>attach_threads</name></member>
      <member refid="classanalysis_1a929d006d8c02d16b6472d7625578aa21" prot="private" virt="non-virtual"><scope>analysis</scope><name>build_dataloader</name></member>
      <member refid="classanalysis_1a68b520bbdb4d591d7375f9ecd6532ce8" prot="private" virt="non-virtual"><scope>analysis</scope><name>build_events</name></member>
      <member refid="classanalysis_1a1c3e0d7bb80774d865586b18a1566704" prot="private" virt="non-virtual"><scope>analysis</scope><name>build_graphs</name></member>
      <member refid="classanalysis_1a7b98125c72486407d782b2bc2ea67389" prot="private" virt="non-virtual"><scope>analysis</scope><name>build_inference</name></member>
      <member refid="classanalysis_1ad1bf7fde8eafef15d4dcedcba5ce51f7" prot="private" virt="non-virtual"><scope>analysis</scope><name>build_metric</name></member>
      <member refid="classanalysis_1ac4b2760bd5a08f9bd2b5553856dcbfff" prot="private" virt="non-virtual"><scope>analysis</scope><name>build_metric_folds</name></member>
      <member refid="classanalysis_1a9e329f763a57c75ca47bec379fab102e" prot="private" virt="non-virtual"><scope>analysis</scope><name>build_model_session</name></member>
      <member refid="classanalysis_1ab1e46d4a55389c9159584cc1c4f217a0" prot="private" virt="non-virtual"><scope>analysis</scope><name>build_project</name></member>
      <member refid="classanalysis_1a12ac50912be5864fb354b7e0bd3341a3" prot="private" virt="non-virtual"><scope>analysis</scope><name>build_selections</name></member>
      <member refid="classanalysis_1a0cbe44c90dab45066bfe074e506c5d8d" prot="private" virt="non-virtual"><scope>analysis</scope><name>check_cache</name></member>
      <member refid="classtools_1aed9f3247b474a8fb1840860d51cde7ca" prot="public" virt="non-virtual"><scope>analysis</scope><name>create_path</name></member>
      <member refid="classnotification_1a8dd1ebb578269118b18bf7f0e176bf14" prot="public" virt="non-virtual"><scope>analysis</scope><name>Debug</name></member>
      <member refid="classnotification_1aa14ded524569ac1d7fd121c161a733be" prot="protected" virt="non-virtual"><scope>analysis</scope><name>debug_mode</name></member>
      <member refid="classtools_1a1f8f5e775e758e3d2442a9dd46daf78c" prot="public" virt="non-virtual"><scope>analysis</scope><name>delete_path</name></member>
      <member refid="classtools_1a3d538da5310467c9321b27cd6a75b9af" prot="public" virt="non-virtual"><scope>analysis</scope><name>ends_with</name></member>
      <member refid="classnotification_1ab0c3843575c157d799e532a9ea5acbd0" prot="public" virt="non-virtual"><scope>analysis</scope><name>Error</name></member>
      <member refid="classanalysis_1a8a45dbaf60898a4c94a5064c3f56a840" prot="private" virt="non-virtual"><scope>analysis</scope><name>event_labels</name></member>
      <member refid="classanalysis_1a8a8e07da99928e764601ff8c56edc1df" prot="private" virt="non-virtual"><scope>analysis</scope><name>execution</name></member>
      <member refid="classanalysis_1acf4137dd2ceda151a94d68b2ed199da8" prot="private" virt="non-virtual"><scope>analysis</scope><name>execution_metric</name></member>
      <member refid="classtools_1a86175bf887f3e82780cb72910181961d" prot="public" virt="non-virtual"><scope>analysis</scope><name>extract</name></member>
      <member refid="classanalysis_1aa5f5f1de2fe05c9fb8c5c0fffbf7b938" prot="private" virt="non-virtual"><scope>analysis</scope><name>fetchtags</name></member>
      <member refid="classanalysis_1a53662412e135714fdc7b3187693ca44d" prot="private" virt="non-virtual"><scope>analysis</scope><name>file_labels</name></member>
      <member refid="classtools_1abce97603aeadeaa04fa6c6ff6c721eda" prot="public" virt="non-virtual"><scope>analysis</scope><name>flush</name></member>
      <member refid="classnotification_1ae25782afd10b3cb5fffe17afaf4fffc0" prot="public" virt="non-virtual"><scope>analysis</scope><name>get_debug_mode</name></member>
      <member refid="classnotification_1aa0aad214cf167691e516ecc343306244" prot="public" virt="non-virtual"><scope>analysis</scope><name>get_prefix</name></member>
      <member refid="classnotification_1a3a12e8eaf363a320abee5393436123f0" prot="public" virt="non-virtual"><scope>analysis</scope><name>get_suppress_info</name></member>
      <member refid="classnotification_1ab53313e9343e9ef6deaefa2bdd3a837a" prot="public" virt="non-virtual"><scope>analysis</scope><name>get_suppress_warning</name></member>
      <member refid="classanalysis_1ad5d3c5419663b94a65af1ee441cef270" prot="private" virt="non-virtual"><scope>analysis</scope><name>graph_labels</name></member>
      <member refid="classanalysis_1a2c2ce70ad82f95642b9b7c493691da64" prot="private" virt="non-virtual"><scope>analysis</scope><name>graph_types</name></member>
      <member refid="classtools_1ad7229c72cee65da3605c4be82f9b42d4" prot="public" virt="non-virtual"><scope>analysis</scope><name>has_string</name></member>
      <member refid="classtools_1a13633d4d63c55bcf537ff141e7605f13" prot="public" virt="non-virtual"><scope>analysis</scope><name>has_value</name></member>
      <member refid="classanalysis_1a4fb98b456d1c8364662ea08370148a21" prot="private" virt="non-virtual"><scope>analysis</scope><name>in_cache</name></member>
      <member refid="classnotification_1a2ea9e0828e3d323b5bb5cdecc8f018a8" prot="public" virt="non-virtual"><scope>analysis</scope><name>Info</name></member>
      <member refid="classanalysis_1a1c8b808d255b490be4ea86df4d29cdf1" prot="private" virt="non-virtual"><scope>analysis</scope><name>initialize_loop</name></member>
      <member refid="classanalysis_1aa9288840e05af08f88af73f6ceca8f29" prot="public" virt="non-virtual"><scope>analysis</scope><name>is_complete</name></member>
      <member refid="classtools_1a47d3d261edcb898daab56721e18d1e67" prot="public" virt="non-virtual"><scope>analysis</scope><name>is_file</name></member>
      <member refid="classanalysis_1a5bbc9622c0eb23dd70a48ae608b42cdc" prot="private" virt="non-virtual"><scope>analysis</scope><name>loader</name></member>
      <member refid="classtools_1a5ab0f2cc351dd97951358ebe19e9c18d" prot="public" virt="non-virtual"><scope>analysis</scope><name>ls</name></member>
      <member refid="classanalysis_1a7142e8c027e12fc8b46e0045f733e107" prot="public" virt="non-virtual"><scope>analysis</scope><name>m_settings</name></member>
      <member refid="classnotification_1a47e2d300e33c44a24b0c51d9e9a83914" prot="public" virt="non-virtual"><scope>analysis</scope><name>Message</name></member>
      <member refid="classanalysis_1ac827f2b50df0df252ced2499df1aaa77" prot="public" virt="non-virtual"><scope>analysis</scope><name>meta_data</name></member>
      <member refid="classanalysis_1aec96ec3ad94a774cfd20964b49a7aa2f" prot="private" virt="non-virtual"><scope>analysis</scope><name>metric_names</name></member>
      <member refid="classanalysis_1a271e58c473bacd7640640a8e1ebaab57" prot="private" virt="non-virtual"><scope>analysis</scope><name>model_inference</name></member>
      <member refid="classanalysis_1acef1dd43b189afd9a891199718074e7a" prot="private" virt="non-virtual"><scope>analysis</scope><name>model_metrics</name></member>
      <member refid="classanalysis_1a6c20130e667d1e675dbc8511c4cdedbf" prot="private" virt="non-virtual"><scope>analysis</scope><name>model_session_names</name></member>
      <member refid="classanalysis_1a643dc17e6a318cdc2ab39f3c992a8520" prot="private" virt="non-virtual"><scope>analysis</scope><name>model_sessions</name></member>
      <member refid="classnotification_1a3ec5fe2d8db29cf32853858ff58fdbd7" prot="public" virt="non-virtual"><scope>analysis</scope><name>notification</name></member>
      <member refid="classnotification_1a913d4c8a7736df782f900dd436cfeaa6" prot="protected" virt="non-virtual"><scope>analysis</scope><name>prefix</name></member>
      <member refid="classanalysis_1ab550330c7c309f24423fa3d48481ea64" prot="public" virt="non-virtual"><scope>analysis</scope><name>progress</name></member>
      <member refid="classanalysis_1a14ff6c25448d59d0c6296c45ba180485" prot="public" virt="non-virtual"><scope>analysis</scope><name>progress_mode</name></member>
      <member refid="classanalysis_1a6b719e04f433468bc84c45aa31abb400" prot="public" virt="non-virtual"><scope>analysis</scope><name>progress_report</name></member>
      <member refid="classtools_1a4450b1e48193bef904b44f7a90aaee98" prot="public" virt="non-virtual"><scope>analysis</scope><name>put</name></member>
      <member refid="classanalysis_1af38f85a26c4a5625fee64ee8c98ba247" prot="private" virt="non-virtual"><scope>analysis</scope><name>reader</name></member>
      <member refid="classtools_1a9265b9f87bde50d0352c6cd1959ae5fc" prot="public" virt="non-virtual"><scope>analysis</scope><name>rename</name></member>
      <member refid="classtools_1aeae88ebd7116d59008600f0723716dba" prot="public" virt="non-virtual"><scope>analysis</scope><name>replace</name></member>
      <member refid="classanalysis_1adf711875e0f20a9f03062c8e291cbf1f" prot="private" virt="non-virtual"><scope>analysis</scope><name>reports</name></member>
      <member refid="classanalysis_1a3cd3d6b2539ad3d5778cffabda174228" prot="private" virt="non-virtual"><scope>analysis</scope><name>safe_clone</name></member>
      <member refid="classanalysis_1aa79f70d61ab201e0334b6a54dba9bdf3" prot="private" virt="non-virtual"><scope>analysis</scope><name>selection_names</name></member>
      <member refid="classnotification_1a5a69a50032f5dcf38bed2bb27dc048fc" prot="public" virt="non-virtual"><scope>analysis</scope><name>set_debug_mode</name></member>
      <member refid="classnotification_1a575db6b2e3b67a7d679205600d83b576" prot="public" virt="non-virtual"><scope>analysis</scope><name>set_prefix</name></member>
      <member refid="classnotification_1a58eec7023935cff9332ce21e58fc3f5a" prot="public" virt="non-virtual"><scope>analysis</scope><name>set_suppress_info</name></member>
      <member refid="classnotification_1a9bb77ba73a5f25af292e9eea8a8de970" prot="public" virt="non-virtual"><scope>analysis</scope><name>set_suppress_warning</name></member>
      <member refid="classanalysis_1a6fad881637791beceddd0781e60248f9" prot="private" virt="non-virtual"><scope>analysis</scope><name>skip_event_build</name></member>
      <member refid="classtools_1a352a6965f2f3c768f0f4ecd1f978fcc0" prot="public" virt="non-virtual"><scope>analysis</scope><name>split</name></member>
      <member refid="classanalysis_1a401745bb4bcae03160ffa0b5df2887e7" prot="public" virt="non-virtual"><scope>analysis</scope><name>start</name></member>
      <member refid="classanalysis_1afbcf09c1a93ecbb03fafcae06f4fe0cd" prot="private" virt="non-virtual"><scope>analysis</scope><name>started</name></member>
      <member refid="classtools_1a7b784121d8b368a64995feddc7083469" prot="public" virt="non-virtual"><scope>analysis</scope><name>sum</name></member>
      <member refid="classnotification_1a77a99c28092cf053b395805c75dde6da" prot="protected" virt="non-virtual"><scope>analysis</scope><name>suppress_info</name></member>
      <member refid="classnotification_1ab2d4ba20d7bc164eece8982b413eab13" prot="protected" virt="non-virtual"><scope>analysis</scope><name>suppress_warnings</name></member>
      <member refid="classanalysis_1ac29ffaea303515853a3fe6f7dbfe8699" prot="private" virt="non-virtual"><scope>analysis</scope><name>tags</name></member>
      <member refid="classanalysis_1a8bb38d2cd57494aef1fefae85721f003" prot="private" virt="non-virtual"><scope>analysis</scope><name>threads</name></member>
      <member refid="classtools_1afd037c109d75a9f119ec042e1ba922d9" prot="public" virt="non-virtual"><scope>analysis</scope><name>to_string</name></member>
      <member refid="classtools_1a882f089d855dc4b3e0b60c591e11b092" prot="public" virt="non-virtual"><scope>analysis</scope><name>to_string</name></member>
      <member refid="classtools_1af0028ec6242448428f7c548b6e7cb714" prot="public" virt="non-virtual"><scope>analysis</scope><name>tools</name></member>
      <member refid="classanalysis_1aaf8e5c6be13ad0fa7f3343445fae561b" prot="private" virt="non-virtual"><scope>analysis</scope><name>tracer</name></member>
      <member refid="classanalysis_1a4fc756934790a7380f15cd28e1daa078" prot="private" virt="non-virtual"><scope>analysis</scope><name>trainer</name></member>
      <member refid="classtools_1a69be8c55f9fd7036080317a2ce98d4de" prot="public" virt="non-virtual"><scope>analysis</scope><name>trim</name></member>
      <member refid="classtools_1ab46f1f3892604cb366b861cb54ce30e0" prot="public" virt="non-virtual"><scope>analysis</scope><name>type_name</name></member>
      <member refid="classnotification_1ab758dafbb449e142fb68e11c0470b5c9" prot="public" virt="non-virtual"><scope>analysis</scope><name>Warning</name></member>
      <member refid="classanalysis_1af5938086aabb68bf478a72b0593e4bb8" prot="public" virt="non-virtual"><scope>analysis</scope><name>~analysis</name></member>
      <member refid="classnotification_1a0b7272463b149418caf592e398cae64e" prot="public" virt="non-virtual"><scope>analysis</scope><name>~notification</name></member>
      <member refid="classtools_1a04762ddd5cc588520c89a387341f77f4" prot="public" virt="non-virtual"><scope>analysis</scope><name>~tools</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
