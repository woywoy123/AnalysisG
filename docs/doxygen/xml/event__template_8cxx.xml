<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="event__template_8cxx" kind="file" language="C++">
    <compoundname>event_template.cxx</compoundname>
    <includes refid="event__template_8h" local="no">templates/event_template.h</includes>
    <incdepgraph>
      <node id="18">
        <label>c10/core/DeviceType.h</label>
      </node>
      <node id="9">
        <label>functional</label>
      </node>
      <node id="16">
        <label>TTreeReader.h</label>
      </node>
      <node id="1">
        <label>event_template.cxx</label>
        <link refid="event__template_8cxx"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>templates/event_template.h</label>
        <link refid="event__template_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>structs/element.h</label>
        <link refid="element_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>tools/vector_cast.h</label>
        <link refid="vector__cast_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>TTreeReaderArray.h</label>
      </node>
      <node id="25">
        <label>cstdint</label>
      </node>
      <node id="3">
        <label>templates/particle_template.h</label>
        <link refid="particle__template_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>structs/folds.h</label>
        <link refid="folds_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>cmath</label>
      </node>
      <node id="22">
        <label>structs/enums.h</label>
        <link refid="enums_8h"/>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="29">
        <label>structs/event.h</label>
        <link refid="modules_2structs_2include_2structs_2event_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>rapidjson/document.h</label>
      </node>
      <node id="19">
        <label>structs/meta.h</label>
        <link refid="structs_2include_2structs_2meta_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="33">
        <label>notification/notification.h</label>
        <link refid="notification_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>TFile.h</label>
      </node>
      <node id="26">
        <label>sstream</label>
      </node>
      <node id="4">
        <label>structs/particles.h</label>
        <link refid="modules_2structs_2include_2structs_2particles_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>tools/tools.h</label>
        <link refid="tools_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>cstdlib</label>
      </node>
      <node id="23">
        <label>torch/torch.h</label>
      </node>
      <node id="34">
        <label>TH1F.h</label>
      </node>
      <node id="14">
        <label>TLeaf.h</label>
      </node>
      <node id="20">
        <label>iostream</label>
      </node>
      <node id="21">
        <label>structs/base.h</label>
        <link refid="modules_2structs_2include_2structs_2base_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>meta/meta.h</label>
        <link refid="meta_2include_2meta_2meta_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>TBranch.h</label>
      </node>
      <node id="8">
        <label>structs/property.h</label>
        <link refid="property_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>TTree.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
<para>Implementation of <ref refid="classevent__template" kindref="compound">event_template</ref> class methods for physics event data handling. </para>
    </briefdescription>
    <detaileddescription>
<para>This file implements the methods declared in the <ref refid="event__template_8h" kindref="compound">event_template.h</ref> header file. It provides functionality for managing event data, including registration and manipulation of particles, trees, branches, and leaves within the event structure. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>@file<sp/>event_template.cxx</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Implementation<sp/>of<sp/>event_template<sp/>class<sp/>methods<sp/>for<sp/>physics<sp/>event<sp/>data<sp/>handling.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>implements<sp/>the<sp/>methods<sp/>declared<sp/>in<sp/>the<sp/>event_template.h<sp/>header<sp/>file.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>It<sp/>provides<sp/>functionality<sp/>for<sp/>managing<sp/>event<sp/>data,<sp/>including<sp/>registration<sp/>and</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>manipulation<sp/>of<sp/>particles,<sp/>trees,<sp/>branches,<sp/>and<sp/>leaves<sp/>within<sp/>the<sp/>event<sp/>structure.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="event__template_8h" kindref="compound">templates/event_template.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Constructor<sp/>for<sp/>the<sp/>event_template<sp/>class.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>Initializes<sp/>a<sp/>new<sp/>event_template<sp/>instance<sp/>and<sp/>sets<sp/>up<sp/>property<sp/>accessors</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>for<sp/>all<sp/>the<sp/>class<sp/>properties.<sp/>These<sp/>accessors<sp/>enable<sp/>controlled<sp/>access<sp/>to</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>the<sp/>internal<sp/>state<sp/>of<sp/>the<sp/>event<sp/>and<sp/>ensure<sp/>proper<sp/>synchronization<sp/>between</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>the<sp/>properties<sp/>and<sp/>their<sp/>underlying<sp/>data.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">event_template::event_template(){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="_3event-name_4_8cxx_1a5e0f2787f92f983370938617945f3ec8" kindref="member">trees</ref>.set_setter(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>set_trees);<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="_3event-name_4_8cxx_1a5e0f2787f92f983370938617945f3ec8" kindref="member">trees</ref>.set_object(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>branches.set_setter(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>set_branches);<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>branches.set_object(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>leaves.set_getter(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>get_leaves);<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>leaves.set_object(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="_3name_4_8h_1a13693d172ed8717c27f198afdd212a7e" kindref="member">name</ref>.set_setter(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>set_name);<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="_3name_4_8h_1a13693d172ed8717c27f198afdd212a7e" kindref="member">name</ref>.set_object(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>hash.set_setter(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>set_hash);<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>hash.set_getter(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>get_hash);<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>hash.set_object(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>tree.set_setter(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>set_tree);<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>tree.set_getter(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>get_tree);<sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>tree.set_object(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="enums_8h_1a71db5b98a8935886920bcc7eaaf49fb9a7edabf994b76a00cbc60c95af337db8f" kindref="member">weight</ref>.set_setter(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>set_weight);<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="enums_8h_1a71db5b98a8935886920bcc7eaaf49fb9a7edabf994b76a00cbc60c95af337db8f" kindref="member">weight</ref>.set_object(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="enums_8h_1a666fa98df084d96fc481369704153b28a6a992d5529f459a44fee58c733255e86" kindref="member">index</ref>.set_setter(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>set_index);<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="enums_8h_1a666fa98df084d96fc481369704153b28a6a992d5529f459a44fee58c733255e86" kindref="member">index</ref>.set_object(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Destructor<sp/>for<sp/>the<sp/>event_template<sp/>class.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>Cleans<sp/>up<sp/>resources<sp/>used<sp/>by<sp/>the<sp/>event_template<sp/>instance.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>This<sp/>includes<sp/>deregistering<sp/>particles<sp/>and<sp/>cleaning<sp/>up<sp/>any<sp/>dynamically</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>allocated<sp/>memory<sp/>to<sp/>prevent<sp/>memory<sp/>leaks.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">event_template::~event_template(){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>filename.size()){</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>flush_particles();}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>deregister_particle(&amp;</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>particle_generators);<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Equality<sp/>operator<sp/>for<sp/>event_template<sp/>objects.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>@param<sp/>p<sp/>Reference<sp/>to<sp/>another<sp/>event_template<sp/>object</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>@return<sp/>True<sp/>if<sp/>the<sp/>two<sp/>objects<sp/>are<sp/>equal,<sp/>false<sp/>otherwise</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>Compares<sp/>two<sp/>event_template<sp/>objects<sp/>based<sp/>on<sp/>their<sp/>hash<sp/>values.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>event_template::operator<sp/>==<sp/>(<ref refid="classevent__template" kindref="compound">event_template</ref>&amp;<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>hash<sp/>==<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>.hash;<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Builds<sp/>a<sp/>mapping<sp/>between<sp/>event<sp/>data<sp/>and<sp/>tree/branch<sp/>structures.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>@param<sp/>evnt<sp/>Map<sp/>of<sp/>data<sp/>pointers<sp/>keyed<sp/>by<sp/>name</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>Creates<sp/>internal<sp/>mapping<sp/>between<sp/>the<sp/>data<sp/>containers<sp/>and<sp/>the<sp/>logical</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>tree/branch/leaf<sp/>structure<sp/>used<sp/>in<sp/>physics<sp/>analysis.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>event_template::build_mapping(std::map&lt;std::string,<sp/>data_t*&gt;*<sp/>evnt){</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>tree_variable_link.size()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>data_t*&gt;::iterator<sp/>ite;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;::iterator<sp/>itl;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>tr<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="_3event-name_4_8cxx_1a5e0f2787f92f983370938617945f3ec8" kindref="member">trees</ref>;<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>(0);<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>&lt;<sp/>tr.size();<sp/>++<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>next_[tr[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>]]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ite<sp/>=<sp/>evnt<sp/>-&gt;<sp/>begin();<sp/>ite<sp/>!=<sp/>evnt<sp/>-&gt;<sp/><ref refid="_3name_4_8h_1a64e9fa75beda50a9e8400ee0d4e61984" kindref="member">end</ref>();<sp/>++ite){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>tr[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>]<sp/>==<sp/>ite<sp/>-&gt;<sp/>second<sp/>-&gt;<sp/>tree_name;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s){</highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itl<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>m_leaves.begin();<sp/>itl<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>m_leaves.end();<sp/>++itl){</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ite<sp/>-&gt;<sp/>second<sp/>-&gt;<sp/>leaf_name<sp/>!=<sp/>itl<sp/>-&gt;<sp/>second){</highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>type_name<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>split(itl<sp/>-&gt;<sp/>first,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>tree_variable_link[tr[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>]][type_name[0]].tree<sp/>=<sp/>tr[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>];<sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>tree_variable_link[tr[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>]][type_name[0]].handle[type_name[1]]<sp/>=<sp/>ite<sp/>-&gt;<sp/>second;<sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>particle_link.clear();<sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Builds<sp/>an<sp/>event<sp/>from<sp/>the<sp/>mapped<sp/>data.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>@param<sp/>evnt<sp/>Map<sp/>of<sp/>data<sp/>pointers<sp/>keyed<sp/>by<sp/>name</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>@return<sp/>Map<sp/>of<sp/>event_template<sp/>objects<sp/>keyed<sp/>by<sp/>tree<sp/>name</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>Constructs<sp/>event_template<sp/>objects<sp/>for<sp/>each<sp/>tree<sp/>in<sp/>the<sp/>mapping,</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>populating<sp/>them<sp/>with<sp/>the<sp/>corresponding<sp/>data<sp/>and<sp/>particles.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">std::map&lt;std::string,<sp/>event_template*&gt;<sp/>event_template::build_event(std::map&lt;std::string,<sp/>data_t*&gt;*<sp/>evnt){</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>build_mapping(evnt);<sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>event_template*&gt;<sp/>output<sp/>=<sp/>{};<sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::map&lt;std::string,<sp/>element_t&gt;&gt;::iterator<sp/>itr<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>tree_variable_link.begin();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>tree_variable_link.end();<sp/>++itr){</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>next_[itr<sp/>-&gt;<sp/>first]){</highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classevent__template" kindref="compound">event_template</ref>*<sp/><ref refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" kindref="member">ev</ref><sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="_3name_4_8h_1a288a32e73fa14ea1042eac9569469fab" kindref="member">clone</ref>();<sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" kindref="member">ev</ref><sp/>-&gt;<sp/>tree<sp/>=<sp/>itr<sp/>-&gt;<sp/>first;<sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>element_t&gt;::iterator<sp/>itrx<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>tree_variable_link[itr<sp/>-&gt;<sp/>first].begin();<sp/></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itrx<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>tree_variable_link[itr<sp/>-&gt;<sp/>first].end();<sp/>++itrx){</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!itrx<sp/>-&gt;<sp/>second.boundary()){</highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" kindref="member">ev</ref>;<sp/><ref refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" kindref="member">ev</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itrx<sp/>-&gt;<sp/>second.set_meta();<sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itrx<sp/>-&gt;<sp/>first<sp/>==<sp/>std::string(<ref refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" kindref="member">ev</ref><sp/>-&gt;<sp/><ref refid="_3name_4_8h_1a13693d172ed8717c27f198afdd212a7e" kindref="member">name</ref>)){</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" kindref="member">ev</ref><sp/>-&gt;<sp/>build(&amp;itrx<sp/>-&gt;<sp/>second);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" kindref="member">ev</ref><sp/>-&gt;<sp/><ref refid="enums_8h_1a666fa98df084d96fc481369704153b28a6a992d5529f459a44fee58c733255e86" kindref="member">index</ref><sp/>=<sp/>itrx<sp/>-&gt;<sp/>second.event_index;<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" kindref="member">ev</ref><sp/>-&gt;<sp/>hash<sp/>=<sp/>itrx<sp/>-&gt;<sp/>second.filename;<sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" kindref="member">ev</ref><sp/>-&gt;<sp/>filename<sp/>=<sp/>itrx<sp/>-&gt;<sp/>second.filename;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>particle_template*&gt;*<sp/>builder<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>particle_template*&gt;();<sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" kindref="member">ev</ref><sp/>-&gt;<sp/>particle_generators[itrx<sp/>-&gt;<sp/>first]<sp/>-&gt;<sp/>build(builder,<sp/>&amp;itrx<sp/>-&gt;<sp/>second);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>particle_template*&gt;*<sp/>m_link<sp/>=<sp/><ref refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" kindref="member">ev</ref><sp/>-&gt;<sp/>particle_link[itrx<sp/>-&gt;<sp/>first];<sp/></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_link<sp/>-&gt;<sp/>insert(builder<sp/>-&gt;<sp/>begin(),<sp/>builder<sp/>-&gt;<sp/><ref refid="_3name_4_8h_1a64e9fa75beda50a9e8400ee0d4e61984" kindref="member">end</ref>());<sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" kindref="member">ev</ref><sp/>-&gt;<sp/>particle_link[itrx<sp/>-&gt;<sp/>first]<sp/>=<sp/>builder;<sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>next_[itr<sp/>-&gt;<sp/>first]<sp/>*=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>tree_variable_link[itr<sp/>-&gt;<sp/>first][itrx<sp/>-&gt;<sp/>first].next();<sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" kindref="member">ev</ref>){</highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;}<sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" kindref="member">ev</ref><sp/>-&gt;<sp/>flush_leaf_string();<sp/></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[itr<sp/>-&gt;<sp/>first]<sp/>=<sp/><ref refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" kindref="member">ev</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;<sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Empty<sp/>implementation<sp/>of<sp/>the<sp/>build<sp/>method<sp/>(to<sp/>be<sp/>overridden<sp/>in<sp/>derived<sp/>classes).</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>@param<sp/>ele<sp/>Pointer<sp/>to<sp/>an<sp/>element_t<sp/>structure</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>a<sp/>placeholder<sp/>method<sp/>that<sp/>derived<sp/>classes<sp/>are<sp/>expected<sp/>to<sp/>override</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>with<sp/>their<sp/>specific<sp/>event<sp/>building<sp/>logic.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>event_template::build(<ref refid="structelement__t" kindref="compound">element_t</ref>*){</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Clears<sp/>all<sp/>registered<sp/>leaves,<sp/>trees,<sp/>and<sp/>branches.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>This<sp/>method<sp/>resets<sp/>the<sp/>internal<sp/>data<sp/>structures<sp/>that<sp/>maintain<sp/>the</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>event&apos;s<sp/>logical<sp/>organization,<sp/>including<sp/>trees,<sp/>branches,<sp/>and<sp/>leaves.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>It<sp/>also<sp/>clears<sp/>leaf<sp/>data<sp/>from<sp/>all<sp/>registered<sp/>particles.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>event_template::flush_leaf_string(){</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>m_trees<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>m_branches<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>m_leaves<sp/>=<sp/>{};<sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::map&lt;std::string,<sp/>particle_template*&gt;*&gt;::iterator<sp/>itr;<sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itr<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>particle_link.begin();<sp/>itr<sp/>!=<sp/><ref refid="_3event-name_4_8cxx_1ad909c3cfb5bcea8ede732f1c3da64879" kindref="member">this</ref><sp/>-&gt;<sp/>particle_link.end();<sp/>++itr){</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>particle_template*&gt;*<sp/>pmap<sp/>=<sp/>itr<sp/>-&gt;<sp/>second;<sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>particle_template*&gt;::iterator<sp/>itx<sp/>=<sp/>pmap<sp/>-&gt;<sp/>begin();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itx<sp/>!=<sp/>pmap<sp/>-&gt;<sp/><ref refid="_3name_4_8h_1a64e9fa75beda50a9e8400ee0d4e61984" kindref="member">end</ref>();<sp/>++itx){itx<sp/>-&gt;<sp/>second<sp/>-&gt;<sp/>leaves<sp/>=<sp/>{};}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>deregister_particle(&amp;</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>particle_generators);<sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="179"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Clears<sp/>all<sp/>particles<sp/>from<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>This<sp/>method<sp/>removes<sp/>all<sp/>particles<sp/>from<sp/>the<sp/>event,<sp/>deregistering</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>them<sp/>and<sp/>freeing<sp/>any<sp/>associated<sp/>memory.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>event_template::flush_particles(){</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>next_.size()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::map&lt;std::string,<sp/>particle_template*&gt;*&gt;::iterator<sp/>itr;<sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itr<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>particle_link.begin();<sp/>itr<sp/>!=<sp/><ref refid="_3event-name_4_8cxx_1ad909c3cfb5bcea8ede732f1c3da64879" kindref="member">this</ref><sp/>-&gt;<sp/>particle_link.end();<sp/>++itr){</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>deregister_particle(itr<sp/>-&gt;<sp/>second);<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>itr<sp/>-&gt;<sp/>second;<sp/><sp/>itr<sp/>-&gt;<sp/>second<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>particle_link<sp/>=<sp/>{};<sp/></highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="194"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Placeholder<sp/>for<sp/>event<sp/>compilation<sp/>logic.</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>This<sp/>method<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>overridden<sp/>in<sp/>derived<sp/>classes</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>to<sp/>implement<sp/>specific<sp/>event<sp/>compilation<sp/>logic.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>event_template::CompileEvent(){</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="204"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Creates<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>current<sp/>event_template<sp/>object.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>newly<sp/>created<sp/>event_template<sp/>object</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>This<sp/>method<sp/>creates<sp/>a<sp/>new<sp/>instance<sp/>of<sp/>the<sp/>event_template<sp/>class,</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>copying<sp/>the<sp/>current<sp/>object&apos;s<sp/>state<sp/>into<sp/>the<sp/>new<sp/>instance.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><ref refid="classevent__template" kindref="compound">event_template</ref>*<sp/><ref refid="_3name_4_8h_1a288a32e73fa14ea1042eac9569469fab" kindref="member">event_template::clone</ref>(){</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classevent__template" kindref="compound">event_template</ref>();<sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="modules/event/cxx/event_template.cxx"/>
  </compounddef>
</doxygen>
