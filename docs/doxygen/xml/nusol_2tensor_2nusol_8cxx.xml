<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="nusol_2tensor_2nusol_8cxx" kind="file" language="C++">
    <compoundname>nusol/tensor/nusol.cxx</compoundname>
    <includes refid="operators_8h" local="no">operators/operators.h</includes>
    <includes refid="transform_8h" local="no">transform/transform.h</includes>
    <includes refid="physics_8h" local="no">physics/physics.h</includes>
    <includes refid="utils_8h" local="no">utils/utils.h</includes>
    <includes refid="nusol_8h" local="no">nusol/nusol.h</includes>
    <incdepgraph>
      <node id="2">
        <label>operators/operators.h</label>
        <link refid="operators_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>physics/physics.h</label>
        <link refid="physics_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>string</label>
      </node>
      <node id="6">
        <label>utils/utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>map</label>
      </node>
      <node id="8">
        <label>nusol/nusol.h</label>
        <link refid="nusol_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>nusol.cxx</label>
        <link refid="nusol_2tensor_2nusol_8cxx"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>transform/transform.h</label>
        <link refid="transform_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>tuple</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="3">
        <label>torch/torch.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="nusol_2tensor_2nusol_8cxx_1ae8c5e5e9f8d45d429cba841a542cf64a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, torch::Tensor &gt;</type>
        <definition>std::map&lt;std::string, torch::Tensor&gt; GetMasses</definition>
        <argsstring>(torch::Tensor *L, torch::Tensor *masses)</argsstring>
        <name>GetMasses</name>
        <param>
          <type>torch::Tensor *</type>
          <declname>L</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>masses</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pyc/nusol/tensor/nusol.cxx" line="8" column="10" bodyfile="pyc/nusol/tensor/nusol.cxx" bodystart="8" bodyend="18"/>
        <references refid="utils_8h_1a1652e53abd2299dd0f10e093948e4fa3" compoundref="utils_8cxx" startline="21" endline="23">MakeOp</references>
        <references refid="namespacemain_1ac9ec47d188b4a9306435147b589e3d03" compoundref="mc16__matching_2main_8py" startline="99">main.masses</references>
        <references refid="namespacemain_1a0cfc6c3cbcca8f2703f7ceb7991f196c" compoundref="performance_2main_8py" startline="69">main.out</references>
        <referencedby refid="namespacenusol___1a526c0e4a558a1201624ea0b639bc747c" compoundref="nusol_2tensor_2nusol_8cxx" startline="198" endline="242">nusol_::BaseMatrix</referencedby>
      </memberdef>
      <memberdef kind="function" id="nusol_2tensor_2nusol_8cxx_1ac73ce1484f270adbb1791bd876e80dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor _x0</definition>
        <argsstring>(torch::Tensor *pmc, torch::Tensor *_pm2, torch::Tensor *mH2, torch::Tensor *mL2)</argsstring>
        <name>_x0</name>
        <param>
          <type>torch::Tensor *</type>
          <declname>pmc</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>_pm2</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>mH2</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>mL2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pyc/nusol/tensor/nusol.cxx" line="20" column="15" bodyfile="pyc/nusol/tensor/nusol.cxx" bodystart="20" bodyend="23"/>
        <references refid="namespacetest__particles_1aad178dcf6e7313adddddce0674c990d0" compoundref="test__particles_8py" startline="166">test_particles.e</references>
        <references refid="enums_8h_1a666fa98df084d96fc481369704153b28a04130da60e65c7800006cd7886515b56">pmc</references>
        <referencedby refid="namespacenusol___1a526c0e4a558a1201624ea0b639bc747c" compoundref="nusol_2tensor_2nusol_8cxx" startline="198" endline="242">nusol_::BaseMatrix</referencedby>
      </memberdef>
      <memberdef kind="function" id="nusol_2tensor_2nusol_8cxx_1aae1454f2383ba884c21b646a772061b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor HorizontalVertical</definition>
        <argsstring>(torch::Tensor *G)</argsstring>
        <name>HorizontalVertical</name>
        <param>
          <type>torch::Tensor *</type>
          <declname>G</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pyc/nusol/tensor/nusol.cxx" line="25" column="15" bodyfile="pyc/nusol/tensor/nusol.cxx" bodystart="25" bodyend="31"/>
        <referencedby refid="namespacenusol___1a2cdd92aeb32c05137ebc7ef96c47a3da" compoundref="nusol_2tensor_2nusol_8cxx" startline="253" endline="395">nusol_::Intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="nusol_2tensor_2nusol_8cxx_1af09f8e81392582428eefa4b074f3f098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor Parallel</definition>
        <argsstring>(torch::Tensor *G, torch::Tensor *CoF)</argsstring>
        <name>Parallel</name>
        <param>
          <type>torch::Tensor *</type>
          <declname>G</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>CoF</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pyc/nusol/tensor/nusol.cxx" line="33" column="15" bodyfile="pyc/nusol/tensor/nusol.cxx" bodystart="33" bodyend="65"/>
        <referencedby refid="namespacenusol___1a2cdd92aeb32c05137ebc7ef96c47a3da" compoundref="nusol_2tensor_2nusol_8cxx" startline="253" endline="395">nusol_::Intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="nusol_2tensor_2nusol_8cxx_1acf51fdc50b75894636c847810af38706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor Intersecting</definition>
        <argsstring>(torch::Tensor *G, torch::Tensor *g22, torch::Tensor *CoF)</argsstring>
        <name>Intersecting</name>
        <param>
          <type>torch::Tensor *</type>
          <declname>G</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>g22</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>CoF</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pyc/nusol/tensor/nusol.cxx" line="67" column="15" bodyfile="pyc/nusol/tensor/nusol.cxx" bodystart="67" bodyend="121"/>
        <referencedby refid="namespacenusol___1a2cdd92aeb32c05137ebc7ef96c47a3da" compoundref="nusol_2tensor_2nusol_8cxx" startline="253" endline="395">nusol_::Intersection</referencedby>
      </memberdef>
      <memberdef kind="function" id="nusol_2tensor_2nusol_8cxx_1acf38ad4d8eeaff43568c7ef70cf2b815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor Pi_2</definition>
        <argsstring>(torch::Tensor *x)</argsstring>
        <name>Pi_2</name>
        <param>
          <type>torch::Tensor *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pyc/nusol/tensor/nusol.cxx" line="123" column="15" bodyfile="pyc/nusol/tensor/nusol.cxx" bodystart="123" bodyend="128"/>
        <references refid="utils_8h_1a1652e53abd2299dd0f10e093948e4fa3" compoundref="utils_8cxx" startline="21" endline="23">MakeOp</references>
        <references refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" compoundref="test__generator_8py" startline="28">test_generator.op</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
        <referencedby refid="nusol_2tensor_2nusol_8cxx_1a790e49074636379226f3084e553998f3" compoundref="nusol_2tensor_2nusol_8cxx" startline="397" endline="428">_xNu</referencedby>
        <referencedby refid="nusol_2tensor_2nusol_8cxx_1a28531a30b80ecbd780392279d8a8adf3" compoundref="nusol_2tensor_2nusol_8cxx" startline="130" endline="153">Rotation</referencedby>
      </memberdef>
      <memberdef kind="function" id="nusol_2tensor_2nusol_8cxx_1a28531a30b80ecbd780392279d8a8adf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor Rotation</definition>
        <argsstring>(torch::Tensor *pmc_b, torch::Tensor *pmc_mu, torch::Tensor *base)</argsstring>
        <name>Rotation</name>
        <param>
          <type>torch::Tensor *</type>
          <declname>pmc_b</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>pmc_mu</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pyc/nusol/tensor/nusol.cxx" line="130" column="15" bodyfile="pyc/nusol/tensor/nusol.cxx" bodystart="130" bodyend="153"/>
        <references refid="namespacetransform___1aa90019603231f23c1e857b5f5832b587" compoundref="transform_2transform_8cxx" startline="70" endline="74">transform_::Phi</references>
        <references refid="nusol_2tensor_2nusol_8cxx_1acf38ad4d8eeaff43568c7ef70cf2b815" compoundref="nusol_2tensor_2nusol_8cxx" startline="123" endline="128">Pi_2</references>
        <references refid="namespaceoperators___1a7ce1f1b4f84306a157386ac5fd54ea1a" compoundref="operators_2operators_8cxx" startline="23" endline="35">operators_::Rx</references>
        <references refid="namespacepyc_1_1operators_1a99b031f4c597d8075f46fdf850a8bd41" compoundref="interface_2operators_8cxx" startline="28" endline="31">pyc::operators::Rx</references>
        <references refid="namespaceoperators___1a7f4dbc7ab056202b3b43d621f6c8df50" compoundref="operators_2operators_8cxx" startline="37" endline="49">operators_::Ry</references>
        <references refid="namespacepyc_1_1operators_1abcfa7b9cf2af875ac48807e57dafffdc" compoundref="interface_2operators_8cxx" startline="33" endline="36">pyc::operators::Ry</references>
        <references refid="namespaceoperators___1a38a28124e97111d3a1f2809ce2039769" compoundref="operators_2operators_8cxx" startline="51" endline="63">operators_::Rz</references>
        <references refid="namespacepyc_1_1operators_1a0a4de4024b67c144c057a812aa618c4b" compoundref="interface_2operators_8cxx" startline="38" endline="41">pyc::operators::Rz</references>
        <references refid="namespacephysics___1a6d323b672a05eb19edce0b4d818bdb7f" compoundref="pyc_2physics_2physics_8cxx" startline="88" endline="91">physics_::Theta</references>
        <referencedby refid="nusol_2tensor_2nusol_8cxx_1a790e49074636379226f3084e553998f3" compoundref="nusol_2tensor_2nusol_8cxx" startline="397" endline="428">_xNu</referencedby>
        <referencedby refid="namespacenusol___1a3aacd3a83799d6a470d6188008fd069a" compoundref="nusol_2tensor_2nusol_8cxx" startline="244" endline="251">nusol_::Hperp</referencedby>
        <referencedby refid="namespacenusol___1ac849ef3564c5ac968727dce36494fd0a" compoundref="nusol_2tensor_2nusol_8cxx" startline="473" endline="560">nusol_::NuNu</referencedby>
      </memberdef>
      <memberdef kind="function" id="nusol_2tensor_2nusol_8cxx_1a695a1b065a09564a65159bac242c506c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor Shape</definition>
        <argsstring>(torch::Tensor *x, std::vector&lt; int &gt; diag)</argsstring>
        <name>Shape</name>
        <param>
          <type>torch::Tensor *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>diag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pyc/nusol/tensor/nusol.cxx" line="155" column="15" bodyfile="pyc/nusol/tensor/nusol.cxx" bodystart="155" bodyend="161"/>
        <references refid="utils_8h_1a1652e53abd2299dd0f10e093948e4fa3" compoundref="utils_8cxx" startline="21" endline="23">MakeOp</references>
        <references refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" compoundref="test__generator_8py" startline="28">test_generator.op</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
        <referencedby refid="nusol_2tensor_2nusol_8cxx_1a154959ee15ff2420eef7a772682767b7" compoundref="nusol_2tensor_2nusol_8cxx" startline="190" endline="195">_N</referencedby>
        <referencedby refid="nusol_2tensor_2nusol_8cxx_1a790e49074636379226f3084e553998f3" compoundref="nusol_2tensor_2nusol_8cxx" startline="397" endline="428">_xNu</referencedby>
        <referencedby refid="namespacenusol___1a6f05175e14627bd3c34ffa61686b7da4" compoundref="nusol_2tensor_2nusol_8cxx" startline="430" endline="471">nusol_::Nu</referencedby>
        <referencedby refid="namespacenusol___1ac849ef3564c5ac968727dce36494fd0a" compoundref="nusol_2tensor_2nusol_8cxx" startline="473" endline="560">nusol_::NuNu</referencedby>
      </memberdef>
      <memberdef kind="function" id="nusol_2tensor_2nusol_8cxx_1aef9831ef9e2e1bcce9c0ec932ae2973d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor Sigma</definition>
        <argsstring>(torch::Tensor *x, torch::Tensor *sigma)</argsstring>
        <name>Sigma</name>
        <param>
          <type>torch::Tensor *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pyc/nusol/tensor/nusol.cxx" line="164" column="15" bodyfile="pyc/nusol/tensor/nusol.cxx" bodystart="164" bodyend="174"/>
        <references refid="utils_8h_1a1652e53abd2299dd0f10e093948e4fa3" compoundref="utils_8cxx" startline="21" endline="23">MakeOp</references>
        <references refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" compoundref="test__generator_8py" startline="28">test_generator.op</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
        <referencedby refid="nusol_2tensor_2nusol_8cxx_1a790e49074636379226f3084e553998f3" compoundref="nusol_2tensor_2nusol_8cxx" startline="397" endline="428">_xNu</referencedby>
      </memberdef>
      <memberdef kind="function" id="nusol_2tensor_2nusol_8cxx_1aa2f3034bed6ef5a865741a89972d44d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor _met</definition>
        <argsstring>(torch::Tensor *met_xy)</argsstring>
        <name>_met</name>
        <param>
          <type>torch::Tensor *</type>
          <declname>met_xy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pyc/nusol/tensor/nusol.cxx" line="176" column="15" bodyfile="pyc/nusol/tensor/nusol.cxx" bodystart="176" bodyend="181"/>
        <referencedby refid="nusol_2tensor_2nusol_8cxx_1a790e49074636379226f3084e553998f3" compoundref="nusol_2tensor_2nusol_8cxx" startline="397" endline="428">_xNu</referencedby>
        <referencedby refid="namespacenusol___1ac849ef3564c5ac968727dce36494fd0a" compoundref="nusol_2tensor_2nusol_8cxx" startline="473" endline="560">nusol_::NuNu</referencedby>
      </memberdef>
      <memberdef kind="function" id="nusol_2tensor_2nusol_8cxx_1a8bbfd6699dae11189c40dfc0035fd99c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor _H_perp</definition>
        <argsstring>(torch::Tensor *base)</argsstring>
        <name>_H_perp</name>
        <param>
          <type>torch::Tensor *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pyc/nusol/tensor/nusol.cxx" line="183" column="15" bodyfile="pyc/nusol/tensor/nusol.cxx" bodystart="183" bodyend="188"/>
        <references refid="_3name_4_8h_1a288a32e73fa14ea1042eac9569469fab">clone</references>
        <referencedby refid="namespacenusol___1a3aacd3a83799d6a470d6188008fd069a" compoundref="nusol_2tensor_2nusol_8cxx" startline="244" endline="251">nusol_::Hperp</referencedby>
        <referencedby refid="namespacenusol___1ac849ef3564c5ac968727dce36494fd0a" compoundref="nusol_2tensor_2nusol_8cxx" startline="473" endline="560">nusol_::NuNu</referencedby>
      </memberdef>
      <memberdef kind="function" id="nusol_2tensor_2nusol_8cxx_1a154959ee15ff2420eef7a772682767b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>torch::Tensor</type>
        <definition>torch::Tensor _N</definition>
        <argsstring>(torch::Tensor *hperp)</argsstring>
        <name>_N</name>
        <param>
          <type>torch::Tensor *</type>
          <declname>hperp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pyc/nusol/tensor/nusol.cxx" line="190" column="15" bodyfile="pyc/nusol/tensor/nusol.cxx" bodystart="190" bodyend="195"/>
        <references refid="namespaceoperators___1aaf20282e41ff4961e01d222feb86bc47" compoundref="operators_2operators_8cxx" startline="87" endline="87">operators_::Inverse</references>
        <references refid="nusol_2tensor_2nusol_8cxx_1a695a1b065a09564a65159bac242c506c" compoundref="nusol_2tensor_2nusol_8cxx" startline="155" endline="161">Shape</references>
        <referencedby refid="namespacenusol___1ac849ef3564c5ac968727dce36494fd0a" compoundref="nusol_2tensor_2nusol_8cxx" startline="473" endline="560">nusol_::NuNu</referencedby>
      </memberdef>
      <memberdef kind="function" id="nusol_2tensor_2nusol_8cxx_1a790e49074636379226f3084e553998f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, torch::Tensor &gt;</type>
        <definition>std::map&lt;std::string, torch::Tensor&gt; _xNu</definition>
        <argsstring>(torch::Tensor *pmc_b, torch::Tensor *pmc_mu, torch::Tensor *met_xy, torch::Tensor *masses, torch::Tensor *sigma)</argsstring>
        <name>_xNu</name>
        <param>
          <type>torch::Tensor *</type>
          <declname>pmc_b</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>pmc_mu</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>met_xy</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>masses</declname>
        </param>
        <param>
          <type>torch::Tensor *</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pyc/nusol/tensor/nusol.cxx" line="397" column="10" bodyfile="pyc/nusol/tensor/nusol.cxx" bodystart="397" bodyend="428"/>
        <references refid="nusol_2tensor_2nusol_8cxx_1aa2f3034bed6ef5a865741a89972d44d8" compoundref="nusol_2tensor_2nusol_8cxx" startline="176" endline="181">_met</references>
        <references refid="namespacenusol___1a526c0e4a558a1201624ea0b639bc747c" compoundref="nusol_2tensor_2nusol_8cxx" startline="198" endline="242">nusol_::BaseMatrix</references>
        <references refid="namespacenusol_1abf6318aff65e1051a1edc0e132dc7ad9" compoundref="nusol_8py" startline="30" endline="34">nusol.Derivative</references>
        <references refid="namespacemain_1ac9ec47d188b4a9306435147b589e3d03" compoundref="mc16__matching_2main_8py" startline="99">main.masses</references>
        <references refid="nusol_2tensor_2nusol_8cxx_1acf38ad4d8eeaff43568c7ef70cf2b815" compoundref="nusol_2tensor_2nusol_8cxx" startline="123" endline="128">Pi_2</references>
        <references refid="nusol_2tensor_2nusol_8cxx_1a28531a30b80ecbd780392279d8a8adf3" compoundref="nusol_2tensor_2nusol_8cxx" startline="130" endline="153">Rotation</references>
        <references refid="namespaceoperators___1a38a28124e97111d3a1f2809ce2039769" compoundref="operators_2operators_8cxx" startline="51" endline="63">operators_::Rz</references>
        <references refid="nusol_2tensor_2nusol_8cxx_1a695a1b065a09564a65159bac242c506c" compoundref="nusol_2tensor_2nusol_8cxx" startline="155" endline="161">Shape</references>
        <references refid="nusol_2tensor_2nusol_8cxx_1aef9831ef9e2e1bcce9c0ec932ae2973d" compoundref="nusol_2tensor_2nusol_8cxx" startline="164" endline="174">Sigma</references>
        <referencedby refid="namespacenusol___1a6f05175e14627bd3c34ffa61686b7da4" compoundref="nusol_2tensor_2nusol_8cxx" startline="430" endline="471">nusol_::Nu</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="operators_8h" kindref="compound">operators/operators.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="transform_8h" kindref="compound">transform/transform.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="physics_8h" kindref="compound">physics/physics.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="utils_8h" kindref="compound">utils/utils.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="nusol_8h" kindref="compound">nusol/nusol.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="nusol_2tensor_2nusol_8cxx_1ae8c5e5e9f8d45d429cba841a542cf64a" refkind="member"><highlight class="normal">std::map&lt;std::string,<sp/>torch::Tensor&gt;<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1ae8c5e5e9f8d45d429cba841a542cf64a" kindref="member">GetMasses</ref>(torch::Tensor*<sp/>L,<sp/>torch::Tensor*<sp/><ref refid="namespacemain_1ac9ec47d188b4a9306435147b589e3d03" kindref="member">masses</ref>){</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_masses<sp/>=<sp/><ref refid="namespacemain_1ac9ec47d188b4a9306435147b589e3d03" kindref="member">masses</ref><sp/>-&gt;<sp/>view({-1,<sp/>3});<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_i<sp/>=<sp/>L<sp/>-&gt;<sp/>size(0);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_i_<sp/>=<sp/>_masses.size(0);<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_i<sp/>!=<sp/>dim_i_){_masses<sp/>=<sp/>torch::ones({dim_i,<sp/>3},<sp/><ref refid="utils_8h_1a1652e53abd2299dd0f10e093948e4fa3" kindref="member">MakeOp</ref>(<ref refid="namespacemain_1ac9ec47d188b4a9306435147b589e3d03" kindref="member">masses</ref>))*_masses[0];}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>torch::Tensor&gt;<sp/><ref refid="namespacemain_1a0cfc6c3cbcca8f2703f7ceb7991f196c" kindref="member">out</ref>;<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemain_1a0cfc6c3cbcca8f2703f7ceb7991f196c" kindref="member">out</ref>[</highlight><highlight class="stringliteral">&quot;T2&quot;</highlight><highlight class="normal">]<sp/>=<sp/>torch::pow(_masses.index({torch::indexing::Slice(),<sp/>0}),<sp/>2).view({dim_i,<sp/>1});<sp/><sp/></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemain_1a0cfc6c3cbcca8f2703f7ceb7991f196c" kindref="member">out</ref>[</highlight><highlight class="stringliteral">&quot;W2&quot;</highlight><highlight class="normal">]<sp/>=<sp/>torch::pow(_masses.index({torch::indexing::Slice(),<sp/>1}),<sp/>2).view({dim_i,<sp/>1});<sp/><sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemain_1a0cfc6c3cbcca8f2703f7ceb7991f196c" kindref="member">out</ref>[</highlight><highlight class="stringliteral">&quot;N2&quot;</highlight><highlight class="normal">]<sp/>=<sp/>torch::pow(_masses.index({torch::indexing::Slice(),<sp/>2}),<sp/>2).view({dim_i,<sp/>1});<sp/><sp/></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacemain_1a0cfc6c3cbcca8f2703f7ceb7991f196c" kindref="member">out</ref>;<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="nusol_2tensor_2nusol_8cxx_1ac73ce1484f270adbb1791bd876e80dfa" refkind="member"><highlight class="normal">torch::Tensor<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1ac73ce1484f270adbb1791bd876e80dfa" kindref="member">_x0</ref>(torch::Tensor*<sp/>pmc,<sp/>torch::Tensor*<sp/>_pm2,<sp/>torch::Tensor*<sp/>mH2,<sp/>torch::Tensor*<sp/>mL2){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/><ref refid="namespacetest__particles_1aad178dcf6e7313adddddce0674c990d0" kindref="member">e</ref><sp/>=<sp/><ref refid="enums_8h_1a666fa98df084d96fc481369704153b28a04130da60e65c7800006cd7886515b56" kindref="member">pmc</ref><sp/>-&gt;<sp/>index({torch::indexing::Slice(),<sp/>3}).view({-1,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(*mH2<sp/>-<sp/>*mL2<sp/>-<sp/>*_pm2)/(2*<ref refid="namespacetest__particles_1aad178dcf6e7313adddddce0674c990d0" kindref="member">e</ref>);<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="nusol_2tensor_2nusol_8cxx_1aae1454f2383ba884c21b646a772061b0" refkind="member"><highlight class="normal">torch::Tensor<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1aae1454f2383ba884c21b646a772061b0" kindref="member">HorizontalVertical</ref>(torch::Tensor*<sp/>G){</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>G01<sp/>=<sp/>G<sp/>-&gt;<sp/>index({torch::indexing::Slice(),<sp/>0,<sp/>1}).view({-1,<sp/>1,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>G02<sp/>=<sp/>G<sp/>-&gt;<sp/>index({torch::indexing::Slice(),<sp/>0,<sp/>2}).view({-1,<sp/>1,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>G12<sp/>=<sp/>G<sp/>-&gt;<sp/>index({torch::indexing::Slice(),<sp/>1,<sp/>2}).view({-1,<sp/>1,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>t0<sp/>=<sp/>zeros_like(G01);<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::cat({<sp/>G01,<sp/>t0,<sp/>G12,<sp/>t0,<sp/>G01,<sp/>G02<sp/>-<sp/>G12,<sp/>t0,<sp/>t0,<sp/>t0},<sp/>-1).view({-1,<sp/>3,<sp/>3});<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="nusol_2tensor_2nusol_8cxx_1af09f8e81392582428eefa4b074f3f098" refkind="member"><highlight class="normal">torch::Tensor<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1af09f8e81392582428eefa4b074f3f098" kindref="member">Parallel</ref>(torch::Tensor*<sp/>G,<sp/>torch::Tensor*<sp/>CoF){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>g00<sp/>=<sp/>-CoF<sp/>-&gt;<sp/>index({torch::indexing::Slice(),<sp/>0,<sp/>0});<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>G00<sp/>=<sp/>G<sp/>-&gt;<sp/>index({torch::indexing::Slice(),<sp/>0,<sp/>0});<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>G01<sp/>=<sp/>G<sp/>-&gt;<sp/>index({torch::indexing::Slice(),<sp/>0,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>G11<sp/>=<sp/>G<sp/>-&gt;<sp/>index({torch::indexing::Slice(),<sp/>1,<sp/>1});</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>G12<sp/>=<sp/>G<sp/>-&gt;<sp/>index({torch::indexing::Slice(),<sp/>1,<sp/>2});</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>t0<sp/>=<sp/>torch::zeros_like(G12);<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>G_<sp/>=<sp/>torch::zeros_like(*G);<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;signed<sp/>long&gt;<sp/>dims<sp/>=<sp/>{-1,<sp/>1,<sp/>1};<sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----<sp/>Populate<sp/>cases<sp/>where<sp/>g00<sp/>is<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>y0<sp/>=<sp/>g00<sp/>==<sp/>0.;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>G_.index_put_({y0},<sp/>torch::cat({</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G01.index({y0}).view(dims),<sp/>G11.index({y0}).view(dims),<sp/>G12.index({y0}).view(dims),<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0.index({y0}).view(dims),<sp/><sp/>t0.index({y0}).view(dims),<sp/><sp/>t0.index({y0}).view(dims),<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0.index({y0}).view(dims),<sp/><sp/>t0.index({y0}).view(dims),<sp/><sp/>t0.index({y0}).view(dims)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>-1).view({-1,<sp/>3,<sp/>3}));<sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----<sp/>Populate<sp/>cases<sp/>where<sp/>-g00<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>yr<sp/>=<sp/>g00<sp/>&gt;<sp/>0.;<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>G_.index_put_({yr},<sp/>torch::cat({</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G01.index({yr}).view(dims),<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G11.index({yr}).view(dims),<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(G12.index({yr})<sp/>-<sp/>torch::sqrt(g00.index({yr}))).view(dims),</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G01.index({yr}).view(dims),<sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G11.index({yr}).view(dims),<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(G12.index({yr})<sp/>+<sp/>torch::sqrt(g00.index({yr}))).view(dims),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::cat({t0.index({yr}),<sp/>t0.index({yr}),<sp/>t0.index({yr})},<sp/>-1).view({-1,<sp/>1,<sp/>3})</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>-1).view({-1,<sp/>3,<sp/>3}));<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>G_;<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="nusol_2tensor_2nusol_8cxx_1acf51fdc50b75894636c847810af38706" refkind="member"><highlight class="normal">torch::Tensor<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1acf51fdc50b75894636c847810af38706" kindref="member">Intersecting</ref>(torch::Tensor*<sp/>G,<sp/>torch::Tensor*<sp/>g22,<sp/>torch::Tensor*<sp/>CoF){</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;signed<sp/>long&gt;<sp/>dim11<sp/>=<sp/>{-1,<sp/>1,<sp/>1};<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;signed<sp/>long&gt;<sp/>dim13<sp/>=<sp/>{-1,<sp/>1,<sp/>3};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>g02<sp/>=<sp/>CoF<sp/>-&gt;<sp/>index({torch::indexing::Slice(),<sp/>0,<sp/>2});<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>g12<sp/>=<sp/>CoF<sp/>-&gt;<sp/>index({torch::indexing::Slice(),<sp/>1,<sp/>2});<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>x0<sp/>=<sp/>(g02<sp/>/<sp/>*g22);<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>y0<sp/>=<sp/>(g12<sp/>/<sp/>*g22);<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>G11<sp/>=<sp/>G<sp/>-&gt;<sp/>index({torch::indexing::Slice(),<sp/>1,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>G01<sp/>=<sp/>G<sp/>-&gt;<sp/>index({torch::indexing::Slice(),<sp/>0,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>t0<sp/>=<sp/>torch::zeros_like(G01);<sp/></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>1:<sp/>-g22<sp/>&lt;<sp/>0<sp/>-<sp/>No<sp/>Solution<sp/><sp/>-<sp/>ignore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>G_<sp/>=<sp/>torch::zeros_like(*G);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>2:<sp/>-g22<sp/>==<sp/>0<sp/>-<sp/>One<sp/>Solution<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_s1<sp/>=<sp/>-(*g22)<sp/>==<sp/>0.;<sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_s1_s<sp/>=<sp/>_s1.sum(-1);<sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>3;<sp/>-g22<sp/>&gt;<sp/>0<sp/>-<sp/>Two<sp/>Solutions<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_s2<sp/>=<sp/>-(*g22)<sp/>&gt;<sp/>0.;<sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_s2_s<sp/>=<sp/>_s2.sum(-1);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_s1_s.item&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------<sp/>Case<sp/>2<sp/>-----------<sp/>//<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_.index_put_({_s1},<sp/>torch::cat({</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G01.index({_s1}).view(dim11),<sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G11.index({_s1}).view(dim11),<sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((-G11.index({_s1})<sp/>*<sp/>y0.index({_s1}))<sp/>-<sp/>(G01.index({_s1})<sp/>*<sp/>x0.index({_s1}))).view(dim11),<sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::cat({t0.index({_s1}),<sp/>t0.index({_s1}),<sp/>t0.index({_s1})},<sp/>-1).view(dim13),<sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::cat({t0.index({_s1}),<sp/>t0.index({_s1}),<sp/>t0.index({_s1})},<sp/>-1).view(dim13)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>-1).view({-1,<sp/>3,<sp/>3}));<sp/></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_s2_s.item&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------<sp/>Case<sp/>3<sp/>-----------<sp/>//<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_s<sp/>=<sp/>torch::sqrt(-g22<sp/>-&gt;<sp/><ref refid="namespacetest__particles_1a52ad96e276e4660fc762de54c3aedd1d" kindref="member">index</ref>({_s2}));<sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G_.index_put_({_s2},<sp/>torch::cat({</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solution<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(G01.index({_s2})<sp/>-<sp/>_s).view(dim11),<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(G11.index({_s2})).view(dim11),<sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-G11.index({_s2})<sp/>*<sp/>y0.index({_s2})<sp/>-<sp/>(G01.index({_s2})<sp/>-<sp/>_s)<sp/>*<sp/>x0.index({_s2})).view(dim11),<sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Solution<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(G01.index({_s2})<sp/>+<sp/>_s).view(dim11),<sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(G11.index({_s2})).view(dim11),<sp/></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-G11.index({_s2})<sp/>*<sp/>y0.index({_s2})<sp/>-<sp/>(G01.index({_s2})<sp/>+<sp/>_s)<sp/>*<sp/>x0.index({_s2})).view(dim11),<sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::cat({t0.index({_s2}),<sp/>t0.index({_s2}),<sp/>t0.index({_s2})},<sp/>-1).view(dim13)<sp/></highlight><highlight class="comment">//<sp/>Zeros<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>-1).view({-1,<sp/>3,<sp/>3}));<sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>G_;<sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="nusol_2tensor_2nusol_8cxx_1acf38ad4d8eeaff43568c7ef70cf2b815" refkind="member"><highlight class="normal">torch::Tensor<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1acf38ad4d8eeaff43568c7ef70cf2b815" kindref="member">Pi_2</ref>(torch::Tensor*<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>){</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::TensorOptions<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref><sp/>=<sp/><ref refid="utils_8h_1a1652e53abd2299dd0f10e093948e4fa3" kindref="member">MakeOp</ref>(<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>);<sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_i<sp/>=<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>-&gt;<sp/>size(0);<sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>z<sp/>=<sp/>torch::zeros({dim_i,<sp/>1},<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref>);<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::acos(z);<sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="nusol_2tensor_2nusol_8cxx_1a28531a30b80ecbd780392279d8a8adf3" refkind="member"><highlight class="normal">torch::Tensor<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a28531a30b80ecbd780392279d8a8adf3" kindref="member">Rotation</ref>(torch::Tensor*<sp/>pmc_b,<sp/>torch::Tensor*<sp/>pmc_mu,<sp/>torch::Tensor*<sp/>base){</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>pmc_b3<sp/><sp/>=<sp/>pmc_b<sp/>-&gt;<sp/>index(<sp/>{torch::indexing::Slice(),<sp/>torch::indexing::Slice(0,<sp/>3)});<sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>pmc_mu3<sp/>=<sp/>pmc_mu<sp/>-&gt;<sp/>index({torch::indexing::Slice(),<sp/>torch::indexing::Slice(0,<sp/>3)});<sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>muphi<sp/>=<sp/>-<ref refid="namespacetransform___1aa90019603231f23c1e857b5f5832b587" kindref="member">transform_::Phi</ref>(pmc_mu);<sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>theta<sp/>=<sp/><ref refid="namespacephysics___1a6d323b672a05eb19edce0b4d818bdb7f" kindref="member">physics_::Theta</ref>(pmc_mu);<sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/><ref refid="namespacepyc_1_1operators_1a0a4de4024b67c144c057a812aa618c4b" kindref="member">Rz</ref><sp/>=<sp/><ref refid="namespaceoperators___1a38a28124e97111d3a1f2809ce2039769" kindref="member">operators_::Rz</ref>(&amp;muphi);<sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>rx<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1acf38ad4d8eeaff43568c7ef70cf2b815" kindref="member">Pi_2</ref>(&amp;theta)<sp/>-<sp/>theta;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/><ref refid="namespacepyc_1_1operators_1abcfa7b9cf2af875ac48807e57dafffdc" kindref="member">Ry</ref><sp/>=<sp/><ref refid="namespaceoperators___1a7f4dbc7ab056202b3b43d621f6c8df50" kindref="member">operators_::Ry</ref>(&amp;rx);<sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/><ref refid="namespacepyc_1_1operators_1a99b031f4c597d8075f46fdf850a8bd41" kindref="member">Rx</ref><sp/>=<sp/>torch::matmul(<ref refid="namespacepyc_1_1operators_1a0a4de4024b67c144c057a812aa618c4b" kindref="member">Rz</ref>,<sp/>pmc_b3.view({-1,<sp/>3,<sp/>1}));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepyc_1_1operators_1a99b031f4c597d8075f46fdf850a8bd41" kindref="member">Rx</ref><sp/>=<sp/>torch::matmul(<ref refid="namespacepyc_1_1operators_1abcfa7b9cf2af875ac48807e57dafffdc" kindref="member">Ry</ref>,<sp/><ref refid="namespacepyc_1_1operators_1a99b031f4c597d8075f46fdf850a8bd41" kindref="member">Rx</ref>.view({-1,<sp/>3,<sp/>1}));<sp/></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepyc_1_1operators_1a99b031f4c597d8075f46fdf850a8bd41" kindref="member">Rx</ref><sp/>=<sp/>-torch::atan2(</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepyc_1_1operators_1a99b031f4c597d8075f46fdf850a8bd41" kindref="member">Rx</ref>.index({torch::indexing::Slice(),<sp/>2}),<sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepyc_1_1operators_1a99b031f4c597d8075f46fdf850a8bd41" kindref="member">Rx</ref>.index({torch::indexing::Slice(),<sp/>1})</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>).view({-1,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepyc_1_1operators_1a99b031f4c597d8075f46fdf850a8bd41" kindref="member">Rx</ref><sp/>=<sp/><ref refid="namespaceoperators___1a7ce1f1b4f84306a157386ac5fd54ea1a" kindref="member">operators_::Rx</ref>(&amp;<ref refid="namespacepyc_1_1operators_1a99b031f4c597d8075f46fdf850a8bd41" kindref="member">Rx</ref>);<sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepyc_1_1operators_1a99b031f4c597d8075f46fdf850a8bd41" kindref="member">Rx</ref><sp/>=<sp/>torch::transpose(<ref refid="namespacepyc_1_1operators_1a99b031f4c597d8075f46fdf850a8bd41" kindref="member">Rx</ref>,<sp/>1,<sp/>2);<sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepyc_1_1operators_1abcfa7b9cf2af875ac48807e57dafffdc" kindref="member">Ry</ref><sp/>=<sp/>torch::transpose(<ref refid="namespacepyc_1_1operators_1abcfa7b9cf2af875ac48807e57dafffdc" kindref="member">Ry</ref>,<sp/>1,<sp/>2);<sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepyc_1_1operators_1a0a4de4024b67c144c057a812aa618c4b" kindref="member">Rz</ref><sp/>=<sp/>torch::transpose(<ref refid="namespacepyc_1_1operators_1a0a4de4024b67c144c057a812aa618c4b" kindref="member">Rz</ref>,<sp/>1,<sp/>2);<sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::matmul(torch::matmul(<ref refid="namespacepyc_1_1operators_1a0a4de4024b67c144c057a812aa618c4b" kindref="member">Rz</ref>,<sp/>torch::matmul(<ref refid="namespacepyc_1_1operators_1abcfa7b9cf2af875ac48807e57dafffdc" kindref="member">Ry</ref>,<sp/><ref refid="namespacepyc_1_1operators_1a99b031f4c597d8075f46fdf850a8bd41" kindref="member">Rx</ref>)),<sp/>*base);<sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="nusol_2tensor_2nusol_8cxx_1a695a1b065a09564a65159bac242c506c" refkind="member"><highlight class="normal">torch::Tensor<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a695a1b065a09564a65159bac242c506c" kindref="member">Shape</ref>(torch::Tensor*<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>,<sp/>std::vector&lt;int&gt;<sp/>diag){</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::TensorOptions<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref><sp/>=<sp/><ref refid="utils_8h_1a1652e53abd2299dd0f10e093948e4fa3" kindref="member">MakeOp</ref>(<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>shape<sp/>=<sp/>torch::diag(torch::tensor(diag,<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref>)).view({-1,<sp/>3,<sp/>3});<sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>ones<sp/>=<sp/>torch::ones({<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>-&gt;<sp/>size(0),<sp/>3,<sp/>3},<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref>);<sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>shape<sp/>=<sp/>(ones*shape).view({-1,<sp/>3,<sp/>3});<sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape;<sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="nusol_2tensor_2nusol_8cxx_1aef9831ef9e2e1bcce9c0ec932ae2973d" refkind="member"><highlight class="normal">torch::Tensor<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1aef9831ef9e2e1bcce9c0ec932ae2973d" kindref="member">Sigma</ref>(torch::Tensor*<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>,<sp/>torch::Tensor*<sp/>sigma){</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_sigma<sp/>=<sp/>sigma<sp/>-&gt;<sp/>view({-1,<sp/>2,<sp/>2});<sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_i<sp/>=<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>-&gt;<sp/>size(0);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_i_<sp/>=<sp/>_sigma.size(0);<sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::TensorOptions<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref><sp/>=<sp/><ref refid="utils_8h_1a1652e53abd2299dd0f10e093948e4fa3" kindref="member">MakeOp</ref>(<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>);<sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_i<sp/>!=<sp/>dim_i_){_sigma<sp/>=<sp/>torch::ones({dim_i,<sp/>2,<sp/>2},<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref>)<sp/>*<sp/>_sigma[0];}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>_sigma<sp/>=<sp/>torch::inverse(_sigma);<sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>_sigma<sp/>=<sp/>torch::pad(_sigma,<sp/>{0,<sp/>1,<sp/>0,<sp/>1},<sp/></highlight><highlight class="stringliteral">&quot;constant&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>_sigma<sp/>=<sp/>torch::transpose(_sigma,<sp/>1,<sp/>2);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_sigma;<sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="nusol_2tensor_2nusol_8cxx_1aa2f3034bed6ef5a865741a89972d44d8" refkind="member"><highlight class="normal">torch::Tensor<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1aa2f3034bed6ef5a865741a89972d44d8" kindref="member">_met</ref>(torch::Tensor*<sp/>met_xy){</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>matrix<sp/>=<sp/>met_xy<sp/>-&gt;<sp/>view({-1,<sp/>2});</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>matrix<sp/>=<sp/>torch::pad(matrix,<sp/>{0,<sp/>1,<sp/>0,<sp/>0},<sp/></highlight><highlight class="stringliteral">&quot;constant&quot;</highlight><highlight class="normal">,<sp/>0).view({-1,<sp/>3,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>t0<sp/>=<sp/>torch::zeros_like(matrix);<sp/></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::cat({t0,<sp/>t0,<sp/>matrix},<sp/>-1);<sp/></highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="nusol_2tensor_2nusol_8cxx_1a8bbfd6699dae11189c40dfc0035fd99c" refkind="member"><highlight class="normal">torch::Tensor<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a8bbfd6699dae11189c40dfc0035fd99c" kindref="member">_H_perp</ref>(torch::Tensor*<sp/>base){</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>H<sp/>=<sp/>base<sp/>-&gt;<sp/><ref refid="_3name_4_8h_1a288a32e73fa14ea1042eac9569469fab" kindref="member">clone</ref>();<sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>H.index_put_({torch::indexing::Slice(),<sp/>2,<sp/>torch::indexing::Slice()},<sp/>0);<sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>H.index_put_({torch::indexing::Slice(),<sp/>2,<sp/>2},<sp/>1);<sp/><sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;<sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="nusol_2tensor_2nusol_8cxx_1a154959ee15ff2420eef7a772682767b7" refkind="member"><highlight class="normal">torch::Tensor<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a154959ee15ff2420eef7a772682767b7" kindref="member">_N</ref>(torch::Tensor*<sp/>hperp){</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>H<sp/>=<sp/><ref refid="namespaceoperators___1aaf20282e41ff4961e01d222feb86bc47" kindref="member">operators_::Inverse</ref>(hperp);<sp/></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>H_T<sp/>=<sp/>torch::transpose(H,<sp/>1,<sp/>2);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>H_T<sp/>=<sp/>torch::matmul(H_T,<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a695a1b065a09564a65159bac242c506c" kindref="member">Shape</ref>(&amp;H_T,<sp/>{1,<sp/>1,<sp/>-1}));<sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::matmul(H_T,<sp/>H);<sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="namespacenusol___1a526c0e4a558a1201624ea0b639bc747c" refkind="member"><highlight class="normal">torch::Tensor<sp/><ref refid="namespacenusol___1a526c0e4a558a1201624ea0b639bc747c" kindref="member">nusol_::BaseMatrix</ref>(torch::Tensor*<sp/>pmc_b,<sp/>torch::Tensor*<sp/>pmc_mu,<sp/>torch::Tensor*<sp/><ref refid="namespacemain_1ac9ec47d188b4a9306435147b589e3d03" kindref="member">masses</ref>){</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>pmx_b<sp/><sp/>=<sp/>pmc_b<sp/>-&gt;<sp/>view({-1,<sp/>4});<sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>pmx_mu<sp/>=<sp/>pmc_mu<sp/>-&gt;<sp/>view({-1,<sp/>4});<sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>torch::Tensor&gt;<sp/><ref refid="enums_8h_1a666fa98df084d96fc481369704153b28ad90ccffa01275a7a7795fb6d1274e75f" kindref="member">mass</ref><sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1ae8c5e5e9f8d45d429cba841a542cf64a" kindref="member">GetMasses</ref>(&amp;pmx_b,<sp/><ref refid="namespacemain_1ac9ec47d188b4a9306435147b589e3d03" kindref="member">masses</ref>);<sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::TensorOptions<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref><sp/>=<sp/><ref refid="utils_8h_1a1652e53abd2299dd0f10e093948e4fa3" kindref="member">MakeOp</ref>(pmc_b);<sp/></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_i<sp/>=<sp/>pmx_b.size(0);<sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>bB<sp/><sp/><sp/>=<sp/><ref refid="namespacephysics___1a3123f743b9c22850e7346d5f56a4441b" kindref="member">physics_::Beta</ref>(&amp;pmx_b);<sp/></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>muB<sp/><sp/>=<sp/><ref refid="namespacephysics___1a3123f743b9c22850e7346d5f56a4441b" kindref="member">physics_::Beta</ref>(&amp;pmx_mu);<sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>muB2<sp/>=<sp/><ref refid="namespacephysics___1aace12d6d7317cd102e5059781d724151" kindref="member">physics_::Beta2</ref>(&amp;pmx_mu);<sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>muP<sp/><sp/>=<sp/><ref refid="namespacephysics___1ac12a78b1943348345b940e510930f420" kindref="member">physics_::P</ref>(&amp;pmx_mu);<sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>m2b<sp/>=<sp/><ref refid="namespacephysics___1a7787594305d4a156c31be581401b0b0b" kindref="member">physics_::M2</ref>(&amp;pmx_b);<sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>m2l<sp/>=<sp/><ref refid="namespacephysics___1a7787594305d4a156c31be581401b0b0b" kindref="member">physics_::M2</ref>(&amp;pmx_mu);<sp/></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>x0p<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1ac73ce1484f270adbb1791bd876e80dfa" kindref="member">_x0</ref>(&amp;pmx_b<sp/>,<sp/>&amp;m2b,<sp/>&amp;<ref refid="enums_8h_1a666fa98df084d96fc481369704153b28ad90ccffa01275a7a7795fb6d1274e75f" kindref="member">mass</ref>[</highlight><highlight class="stringliteral">&quot;T2&quot;</highlight><highlight class="normal">],<sp/>&amp;<ref refid="enums_8h_1a666fa98df084d96fc481369704153b28ad90ccffa01275a7a7795fb6d1274e75f" kindref="member">mass</ref>[</highlight><highlight class="stringliteral">&quot;W2&quot;</highlight><highlight class="normal">]);<sp/></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>x0<sp/><sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1ac73ce1484f270adbb1791bd876e80dfa" kindref="member">_x0</ref>(&amp;pmx_mu,<sp/>&amp;m2l,<sp/>&amp;<ref refid="enums_8h_1a666fa98df084d96fc481369704153b28ad90ccffa01275a7a7795fb6d1274e75f" kindref="member">mass</ref>[</highlight><highlight class="stringliteral">&quot;W2&quot;</highlight><highlight class="normal">],<sp/>&amp;<ref refid="enums_8h_1a666fa98df084d96fc481369704153b28ad90ccffa01275a7a7795fb6d1274e75f" kindref="member">mass</ref>[</highlight><highlight class="stringliteral">&quot;N2&quot;</highlight><highlight class="normal">]);<sp/></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>pmc_b3<sp/><sp/>=<sp/>pmx_b.index(<sp/>{torch::indexing::Slice(),<sp/>torch::indexing::Slice(0,<sp/>3)});<sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>pmc_mu3<sp/>=<sp/>pmx_mu.index({torch::indexing::Slice(),<sp/>torch::indexing::Slice(0,<sp/>3)});<sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>c_<sp/>=<sp/><ref refid="namespaceoperators___1af012532b8e034b7d6cb733360e14f8d7" kindref="member">operators_::CosTheta</ref>(&amp;pmc_b3,<sp/>&amp;pmc_mu3);<sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>s_<sp/>=<sp/><ref refid="namespaceoperators___1a0335a4a853f7cff5faa4bc7bc68e3a8a" kindref="member">operators_::SinTheta</ref>(&amp;pmc_b3,<sp/>&amp;pmc_mu3);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>tmp_<sp/>=<sp/>muB<sp/>/<sp/>bB;<sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>w_<sp/>=<sp/>(<sp/>-<sp/>tmp_<sp/>-<sp/>c_<sp/>)<sp/>/<sp/>s_;<sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>w<sp/><sp/>=<sp/>(<sp/>tmp_<sp/>-<sp/>c_<sp/>)<sp/>/<sp/>s_;<sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>O2<sp/>=<sp/>w.pow(2)<sp/>+<sp/>1<sp/>-<sp/>muB2;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>e2<sp/>=<sp/>(<ref refid="enums_8h_1a666fa98df084d96fc481369704153b28ad90ccffa01275a7a7795fb6d1274e75f" kindref="member">mass</ref>[</highlight><highlight class="stringliteral">&quot;W2&quot;</highlight><highlight class="normal">]<sp/>-<sp/><ref refid="enums_8h_1a666fa98df084d96fc481369704153b28ad90ccffa01275a7a7795fb6d1274e75f" kindref="member">mass</ref>[</highlight><highlight class="stringliteral">&quot;N2&quot;</highlight><highlight class="normal">])<sp/>*<sp/>(<sp/>1<sp/>-<sp/>muB2<sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>Sx<sp/>=<sp/>(x0<sp/>*<sp/>muB<sp/>-<sp/>muP<sp/>*<sp/>(<sp/>1<sp/>-<sp/>muB2<sp/>))<sp/>/<sp/>muB2;<sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>Sy<sp/>=<sp/>(<sp/>(x0p<sp/>/<sp/>bB)<sp/>-<sp/>c_<sp/>*<sp/>Sx<sp/>)<sp/>/<sp/>s_;<sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_<sp/>=<sp/>Sx<sp/>+<sp/>w*Sy;<sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>x1<sp/>=<sp/>Sx<sp/>-<sp/>tmp_<sp/>/<sp/>O2;<sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>y1<sp/>=<sp/>Sy<sp/>-<sp/>tmp_<sp/>*<sp/>(w<sp/>/<sp/>O2);<sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>Z<sp/>=<sp/>torch::sqrt(torch::relu(x1.pow(2)<sp/>*<sp/>O2<sp/>-<sp/>(<sp/>Sy<sp/>-<sp/>w*Sx<sp/>).pow(2)<sp/>-<sp/>(<sp/><ref refid="enums_8h_1a666fa98df084d96fc481369704153b28ad90ccffa01275a7a7795fb6d1274e75f" kindref="member">mass</ref>[</highlight><highlight class="stringliteral">&quot;W2&quot;</highlight><highlight class="normal">]<sp/>-<sp/>x0.pow(2)<sp/>-<sp/>e2<sp/>)));<sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/><sp/>O<sp/>=<sp/>torch::sqrt(O2);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_0<sp/>=<sp/>torch::zeros({dim_i,<sp/>1},<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>torch::cat({<sp/>Z<sp/>/<sp/>O,<sp/>_0,<sp/>x1<sp/>-<sp/>muP,<sp/>(w*Z)/O,<sp/>_0,<sp/>y1,<sp/>_0,<sp/>Z,<sp/>_0},<sp/>-1).view({dim_i,<sp/>3,<sp/>3});<sp/></highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="namespacenusol___1a3aacd3a83799d6a470d6188008fd069a" refkind="member"><highlight class="normal">torch::Tensor<sp/><ref refid="namespacenusol___1a3aacd3a83799d6a470d6188008fd069a" kindref="member">nusol_::Hperp</ref>(torch::Tensor*<sp/>pmc_b,<sp/>torch::Tensor*<sp/>pmc_mu,<sp/>torch::Tensor*<sp/><ref refid="namespacemain_1ac9ec47d188b4a9306435147b589e3d03" kindref="member">masses</ref>){</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>H<sp/>=<sp/><ref refid="namespacenusol___1a526c0e4a558a1201624ea0b639bc747c" kindref="member">nusol_::BaseMatrix</ref>(pmc_b,<sp/>pmc_mu,<sp/><ref refid="namespacemain_1ac9ec47d188b4a9306435147b589e3d03" kindref="member">masses</ref>);<sp/></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>H<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a28531a30b80ecbd780392279d8a8adf3" kindref="member">Rotation</ref>(pmc_b,<sp/>pmc_mu,<sp/>&amp;H);<sp/></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>H<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a8bbfd6699dae11189c40dfc0035fd99c" kindref="member">_H_perp</ref>(&amp;H);<sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>nullx<sp/>=<sp/>torch::isnan(H).sum(-1).sum(-1)<sp/>==<sp/>0;<sp/></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>H.index_put_({nullx,<sp/>torch::indexing::Slice(),<sp/>torch::indexing::Slice()},<sp/>0);<sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;<sp/></highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="namespacenusol___1a2cdd92aeb32c05137ebc7ef96c47a3da" refkind="member"><highlight class="normal">std::tuple&lt;torch::Tensor,<sp/>torch::Tensor&gt;<sp/><ref refid="namespacenusol___1a2cdd92aeb32c05137ebc7ef96c47a3da" kindref="member">nusol_::Intersection</ref>(torch::Tensor*<sp/>A,<sp/>torch::Tensor*<sp/>B,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::TensorOptions<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref><sp/>=<sp/><ref refid="utils_8h_1a1652e53abd2299dd0f10e093948e4fa3" kindref="member">MakeOp</ref>(A);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_i<sp/>=<sp/>A<sp/>-&gt;<sp/>size(0);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;signed<sp/>long&gt;<sp/>dim11<sp/>=<sp/>{-1,<sp/>1,<sp/>1};<sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;signed<sp/>long&gt;<sp/>dim13<sp/>=<sp/>{-1,<sp/>1,<sp/>3};<sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;signed<sp/>long&gt;<sp/>dim31<sp/>=<sp/>{-1,<sp/>3,<sp/>1};<sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;signed<sp/>long&gt;<sp/>dim313<sp/>=<sp/>{-1,<sp/>3,<sp/>1,<sp/>3};<sp/></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;signed<sp/>long&gt;<sp/>dim133<sp/>=<sp/>{-1,<sp/>1,<sp/>3,<sp/>3};<sp/></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;signed<sp/>long&gt;<sp/>dim331<sp/>=<sp/>{-1,<sp/>3,<sp/>3,<sp/>1};<sp/></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;signed<sp/>long&gt;<sp/>dim333<sp/>=<sp/>{-1,<sp/>3,<sp/>3,<sp/>3};<sp/></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_A<sp/>=<sp/>A<sp/>-&gt;<sp/><ref refid="_3name_4_8h_1a288a32e73fa14ea1042eac9569469fab" kindref="member">clone</ref>();<sp/></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_B<sp/>=<sp/>B<sp/>-&gt;<sp/><ref refid="_3name_4_8h_1a288a32e73fa14ea1042eac9569469fab" kindref="member">clone</ref>();<sp/></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>detA<sp/>=<sp/>torch::abs(<ref refid="namespaceoperators___1a123a2d44cfea06825875800ebf21ae0d" kindref="member">operators_::Determinant</ref>(A));<sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>detB<sp/>=<sp/>torch::abs(<ref refid="namespaceoperators___1a123a2d44cfea06825875800ebf21ae0d" kindref="member">operators_::Determinant</ref>(B));<sp/></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Perform<sp/>the<sp/>variable<sp/>swaps<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>swp<sp/>=<sp/>detB<sp/>&gt;<sp/>detA;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_tmp<sp/>=<sp/>B<sp/>-&gt;<sp/>index({swp});<sp/></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>_B.index_put_({swp},<sp/>A<sp/>-&gt;<sp/>index({swp}));<sp/></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>_A.index_put_({swp},<sp/>_tmp);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>non<sp/>imaginary<sp/>eigenvalue<sp/>solutions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>_tmp<sp/>=<sp/>torch::linalg::eigvals(<ref refid="namespaceoperators___1aaf20282e41ff4961e01d222feb86bc47" kindref="member">operators_::Inverse</ref>(&amp;_A).matmul(_B));<sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_r<sp/>=<sp/>torch::real(_tmp);<sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/><ref refid="namespacesimply__plot_1a0d35c002f6ca676ade93d9eb4e00b857" kindref="member">msk</ref><sp/>=<sp/>torch::isreal(_tmp)*torch::arange(3,<sp/>0,<sp/>-1,<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref>);<sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacesimply__plot_1a0d35c002f6ca676ade93d9eb4e00b857" kindref="member">msk</ref><sp/>=<sp/>torch::argmax(<ref refid="namespacesimply__plot_1a0d35c002f6ca676ade93d9eb4e00b857" kindref="member">msk</ref>,<sp/>-1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>_r<sp/>=<sp/>torch::gather(_r,<sp/>1,<sp/><ref refid="namespacesimply__plot_1a0d35c002f6ca676ade93d9eb4e00b857" kindref="member">msk</ref>).view({-1,<sp/>1,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>G<sp/>=<sp/>_B<sp/>-<sp/>_r*_A;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>diagonals<sp/>of<sp/>the<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>G00<sp/>=<sp/>G.index({torch::indexing::Slice(),<sp/>0,<sp/>0});<sp/></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>G11<sp/>=<sp/>G.index({torch::indexing::Slice(),<sp/>1,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----<sp/>Numerical<sp/>Stability<sp/>part<sp/>-----<sp/>//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>swp<sp/>=<sp/>torch::abs(G00)<sp/>&gt;<sp/>torch::abs(G11);<sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>G.index_put_({swp},<sp/>torch::cat({</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.index({swp,<sp/>1,<sp/>torch::indexing::Slice()}).view(dim13),<sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.index({swp,<sp/>0,<sp/>torch::indexing::Slice()}).view(dim13),<sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.index({swp,<sp/>2,<sp/>torch::indexing::Slice()}).view(dim13)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>1));<sp/></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>G.index_put_({swp},<sp/>torch::cat({</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.index({swp,<sp/>torch::indexing::Slice(),<sp/>1}).view(dim31),<sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.index({swp,<sp/>torch::indexing::Slice(),<sp/>0}).view(dim31),<sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G.index({swp,<sp/>torch::indexing::Slice(),<sp/>2}).view(dim31)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>},<sp/>2));<sp/></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>G<sp/>=<sp/>G/(G.index({torch::indexing::Slice(),<sp/>1,<sp/>1}).view({-1,<sp/>1,<sp/>1}));<sp/></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>CoF<sp/>=<sp/><ref refid="namespaceoperators___1a3d017da3c5169dfb4e1ca5da7cae0703" kindref="member">operators_::CoFactors</ref>(&amp;G);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>g22<sp/>=<sp/>CoF.index({torch::indexing::Slice(),<sp/>2,<sp/>2});<sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_out<sp/>=<sp/>zeros_like(G);<sp/></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>detA<sp/>=<sp/>detA<sp/>==<sp/>0;<sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>G00_G11<sp/>=<sp/>(<sp/>G00<sp/>==<sp/>0<sp/>)<sp/>*<sp/>(G11<sp/>==<sp/>0);<sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>g22__<sp/><sp/><sp/>=<sp/>(-g22<sp/>&lt;=<sp/>0.)<sp/>*<sp/>(G00_G11<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>g22_<sp/><sp/><sp/><sp/>=<sp/>(-g22<sp/>&gt;<sp/><sp/>0.)<sp/>*<sp/>(G00_G11<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>-----<sp/>Case<sp/>where<sp/>the<sp/>solutions<sp/>are<sp/>Horizontal<sp/>and<sp/>Vertical<sp/>-----<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>tx<sp/>=<sp/>G.index({G00_G11});<sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>SolG_HV<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1aae1454f2383ba884c21b646a772061b0" kindref="member">HorizontalVertical</ref>(&amp;tx);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>------<sp/>Case<sp/>where<sp/>the<sp/>solutions<sp/>are<sp/>parallel<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>g22x<sp/>=<sp/>G.index({g22__});<sp/></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>g22f<sp/>=<sp/>CoF.index({g22__});<sp/></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>SolG_Para<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1af09f8e81392582428eefa4b074f3f098" kindref="member">Parallel</ref>(&amp;g22x,<sp/>&amp;g22f);<sp/></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>-------<sp/>Case<sp/>where<sp/>the<sp/>solutions<sp/>are<sp/>intersecting<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>g22x<sp/>=<sp/>G.index({g22_});<sp/></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>g22f<sp/>=<sp/>CoF.index({g22_});<sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>tx<sp/><sp/><sp/>=<sp/>g22.index({g22_});<sp/></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>SolG_Int<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1acf51fdc50b75894636c847810af38706" kindref="member">Intersecting</ref>(&amp;g22x,<sp/>&amp;tx,<sp/>&amp;g22f);<sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>_out.index_put_({G00_G11},<sp/>SolG_HV);<sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>_out.index_put_({g22__<sp/><sp/>},<sp/>SolG_Para);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>_out.index_put_({g22_<sp/><sp/><sp/>},<sp/>SolG_Int);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>_out.index_put_({detA<sp/><sp/><sp/>},<sp/>0);<sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Swap<sp/>the<sp/>XY<sp/>if<sp/>they<sp/>were<sp/>swapped<sp/>previously<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>_tmp<sp/>=<sp/>torch::cat({</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out.index({swp,<sp/>torch::indexing::Slice(),<sp/>1}).view(dim31),<sp/></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out.index({swp,<sp/>torch::indexing::Slice(),<sp/>0}).view(dim31),<sp/></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_out.index({swp,<sp/>torch::indexing::Slice(),<sp/>2}).view(dim31)},<sp/>2);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>_out.index_put_({swp},<sp/>_tmp);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>------<sp/>Intersection<sp/>of<sp/>line<sp/>with<sp/>Ellipse<sp/>------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_t,<sp/>d1,<sp/>V,<sp/>V_,<sp/>diag;<sp/></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>=<sp/>torch::cross(_out.view(dim313),<sp/>_A.view(dim133),<sp/>3);<sp/></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>=<sp/>torch::transpose(V,<sp/>2,<sp/>3);<sp/></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>=<sp/>std::get&lt;1&gt;(torch::linalg::eig(V));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>=<sp/>torch::real(V);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>V<sp/>=<sp/>torch::transpose(V,<sp/>2,<sp/>3);<sp/></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>_t<sp/>=<sp/>V<sp/>/<sp/>(V.index({</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::indexing::Slice(),<sp/></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::indexing::Slice(),<sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::indexing::Slice(),<sp/></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>2}).view(dim331));<sp/></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>torch::sum(((_out.view(dim313))*V),<sp/>3).pow(2);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>V_<sp/>=<sp/>torch::reshape(V,<sp/>dim333);<sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------<sp/>Neutrino<sp/>Solution<sp/>------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>_t<sp/>=<sp/>_t.view({dim_i,<sp/>-1,<sp/>3});<sp/><sp/></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>_t<sp/>=<sp/>torch::nan_to_num(_t,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>diag<sp/>=<sp/>torch::matmul(V_,<sp/>_A.view(dim133));<sp/></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>diag<sp/>=<sp/>torch::sum((diag<sp/>*<sp/>V_),<sp/>{-1}).pow(2);<sp/></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>diag<sp/>=<sp/>(d1<sp/>+<sp/>diag).view({dim_i,<sp/>-1});<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------<sp/>Remove<sp/>false<sp/>solutions<sp/>------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>t0_,<sp/>t1_,<sp/>t2_;<sp/><sp/></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>t0_<sp/>=<sp/>_t.index({torch::indexing::Slice(),<sp/>torch::indexing::Slice(),<sp/>0}).view({dim_i,<sp/>-1});<sp/><sp/></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>t1_<sp/>=<sp/>_t.index({torch::indexing::Slice(),<sp/>torch::indexing::Slice(),<sp/>1}).view({dim_i,<sp/>-1});<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>t2_<sp/>=<sp/>_t.index({torch::indexing::Slice(),<sp/>torch::indexing::Slice(),<sp/>2}).view({dim_i,<sp/>-1});<sp/></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>detB<sp/>=<sp/>((t0_.view({dim_i,<sp/>-1,<sp/>1})<sp/>==<sp/>0)<sp/>*<sp/>(t1_.view({dim_i,<sp/>-1,<sp/>1})<sp/>==<sp/>0)).view({dim_i,<sp/>-1});<sp/></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>t2_.index_put_({detB},<sp/>0);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>diag.index_put_({detA},<sp/>-1);<sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>diag.index_put_({detB},<sp/>-1);<sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>diag.index_put_({diag<sp/>&gt;<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">},<sp/>-1);<sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------<sp/>Do<sp/>the<sp/>Sorting<sp/>------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>std::get&lt;1&gt;(diag.sort(-1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));<sp/></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>t0_<sp/>=<sp/>torch::gather(t0_,<sp/>-1,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).view({dim_i,<sp/>-1,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>t1_<sp/>=<sp/>torch::gather(t1_,<sp/>-1,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).view({dim_i,<sp/>-1,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>t2_<sp/>=<sp/>torch::gather(t2_,<sp/>-1,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).view({dim_i,<sp/>-1,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>_t<sp/>=<sp/>torch::cat({t0_,<sp/>t1_,<sp/>t2_},<sp/>-1);<sp/></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>diag<sp/>=<sp/>torch::gather(diag,<sp/>1,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_len<sp/>=<sp/>diag.size(-1)<sp/>-<sp/>torch::max((diag<sp/>!=<sp/>-1).sum(-1)).item&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;();<sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>_t<sp/>=<sp/>_t.index({</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::indexing::Slice(),<sp/></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::indexing::Slice(max_len,<sp/>torch::indexing::None),<sp/></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::indexing::Slice()});<sp/></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>diag<sp/>=<sp/>diag.index({</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::indexing::Slice(),<sp/></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::indexing::Slice(max_len,<sp/>torch::indexing::None)});<sp/></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{_t,<sp/>diag};<sp/><sp/></highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="nusol_2tensor_2nusol_8cxx_1a790e49074636379226f3084e553998f3" refkind="member"><highlight class="normal">std::map&lt;std::string,<sp/>torch::Tensor&gt;<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a790e49074636379226f3084e553998f3" kindref="member">_xNu</ref>(</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::Tensor*<sp/>pmc_b<sp/>,<sp/>torch::Tensor*<sp/>pmc_mu,<sp/>torch::Tensor*<sp/>met_xy,<sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::Tensor*<sp/><ref refid="namespacemain_1ac9ec47d188b4a9306435147b589e3d03" kindref="member">masses</ref>,<sp/>torch::Tensor*<sp/>sigma</highlight></codeline>
<codeline lineno="400"><highlight class="normal">){</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Base<sp/>matrix<sp/>-<sp/>the<sp/>Analytical<sp/>solutions<sp/>and<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>base<sp/>=<sp/><ref refid="namespacenusol___1a526c0e4a558a1201624ea0b639bc747c" kindref="member">nusol_::BaseMatrix</ref>(pmc_b,<sp/>pmc_mu,<sp/><ref refid="namespacemain_1ac9ec47d188b4a9306435147b589e3d03" kindref="member">masses</ref>);<sp/></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>H_base<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a28531a30b80ecbd780392279d8a8adf3" kindref="member">Rotation</ref>(pmc_b,<sp/>pmc_mu,<sp/>&amp;base);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>Pi2<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1acf38ad4d8eeaff43568c7ef70cf2b815" kindref="member">Pi_2</ref>(&amp;base);<sp/></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/><ref refid="namespacenusol_1abf6318aff65e1051a1edc0e132dc7ad9" kindref="member">Derivative</ref><sp/>=<sp/><ref refid="namespaceoperators___1a38a28124e97111d3a1f2809ce2039769" kindref="member">operators_::Rz</ref>(&amp;Pi2);<sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacenusol_1abf6318aff65e1051a1edc0e132dc7ad9" kindref="member">Derivative</ref><sp/>=<sp/><ref refid="namespacenusol_1abf6318aff65e1051a1edc0e132dc7ad9" kindref="member">Derivative</ref>.matmul(<ref refid="nusol_2tensor_2nusol_8cxx_1a695a1b065a09564a65159bac242c506c" kindref="member">Shape</ref>(&amp;Pi2,<sp/>{1,<sp/>1,<sp/>0}));<sp/></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invert<sp/>the<sp/>input<sp/>sigma<sp/>matrix<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_sigma<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1aef9831ef9e2e1bcce9c0ec932ae2973d" kindref="member">Sigma</ref>(met_xy,<sp/>sigma);<sp/></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------<sp/>Convert<sp/>missing<sp/>energy<sp/>matrix<sp/>into<sp/>tensor<sp/>-----<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>_met_xy<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1aa2f3034bed6ef5a865741a89972d44d8" kindref="member">_met</ref>(met_xy);<sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------<sp/>create<sp/>ellipse<sp/>-------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>dNu,<sp/>X_,<sp/>M_;<sp/></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>dNu<sp/>=<sp/>_met_xy<sp/>-<sp/>H_base;<sp/></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>X_<sp/>=<sp/>torch::matmul(torch::transpose(dNu,<sp/>1,<sp/>2),<sp/>_sigma);<sp/></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>X_<sp/>=<sp/>torch::matmul(X_,<sp/>dNu).view({-1,<sp/>3,<sp/>3});<sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>M_<sp/>=<sp/>X_.matmul(<ref refid="namespacenusol_1abf6318aff65e1051a1edc0e132dc7ad9" kindref="member">Derivative</ref>);<sp/></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>M_<sp/>=<sp/>M_<sp/>+<sp/>torch::transpose(M_,<sp/>1,<sp/>2);<sp/><sp/></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>torch::Tensor&gt;<sp/>output;<sp/></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;M&quot;</highlight><highlight class="normal">]<sp/>=<sp/>M_;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">]<sp/>=<sp/>H_base;<sp/></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">]<sp/>=<sp/>X_;<sp/></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;<sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="namespacenusol___1a6f05175e14627bd3c34ffa61686b7da4" refkind="member"><highlight class="normal">std::map&lt;std::string,<sp/>torch::Tensor&gt;<sp/><ref refid="namespacenusol___1a6f05175e14627bd3c34ffa61686b7da4" kindref="member">nusol_::Nu</ref>(</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::Tensor*<sp/>pmc_b<sp/>,<sp/>torch::Tensor*<sp/>pmc_mu,<sp/>torch::Tensor*<sp/>met_xy,<sp/></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::Tensor*<sp/><ref refid="namespacemain_1ac9ec47d188b4a9306435147b589e3d03" kindref="member">masses</ref>,<sp/>torch::Tensor*<sp/>sigma,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>v,<sp/><ref refid="combinatorial_8cxx_1acd33f38fd89cd298ef5d1ea858ee0416" kindref="member">chi2</ref>;<sp/></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>torch::Tensor&gt;<sp/>_Nu,<sp/>output;<sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;torch::Tensor,<sp/>torch::Tensor&gt;<sp/>sols;<sp/></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_i<sp/>=<sp/>met_xy<sp/>-&gt;<sp/>size(0);<sp/></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>_Nu<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a790e49074636379226f3084e553998f3" kindref="member">_xNu</ref>(pmc_b,<sp/>pmc_mu,<sp/>met_xy,<sp/><ref refid="namespacemain_1ac9ec47d188b4a9306435147b589e3d03" kindref="member">masses</ref>,<sp/>sigma);<sp/></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/><ref refid="namespacepyc_1_1physics_1_1cartesian_1_1separate_1adb6b95ef1d9eb19796bda77aa1d5caf6" kindref="member">M</ref><sp/>=<sp/>_Nu[</highlight><highlight class="stringliteral">&quot;M&quot;</highlight><highlight class="normal">];<sp/></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>H<sp/>=<sp/>_Nu[</highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">];<sp/></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>X<sp/>=<sp/>_Nu[</highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">];<sp/></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>circl<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a695a1b065a09564a65159bac242c506c" kindref="member">Shape</ref>(met_xy,<sp/>{1,<sp/>1,<sp/>-1});<sp/></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>sols<sp/>=<sp/><ref refid="namespacenusol___1a2cdd92aeb32c05137ebc7ef96c47a3da" kindref="member">nusol_::Intersection</ref>(&amp;<ref refid="namespacepyc_1_1physics_1_1cartesian_1_1separate_1adb6b95ef1d9eb19796bda77aa1d5caf6" kindref="member">M</ref>,<sp/>&amp;circl,<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>std::get&lt;0&gt;(sols).view({dim_i,<sp/>-1,<sp/>1,<sp/>3});<sp/></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>diag<sp/>=<sp/>std::get&lt;1&gt;(sols);<sp/></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="combinatorial_8cxx_1acd33f38fd89cd298ef5d1ea858ee0416" kindref="member">chi2</ref><sp/>=<sp/>(v<sp/>*<sp/>X.view({dim_i,<sp/>1,<sp/>3,<sp/>3})).sum({-1});<sp/></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="combinatorial_8cxx_1acd33f38fd89cd298ef5d1ea858ee0416" kindref="member">chi2</ref><sp/>=<sp/><ref refid="combinatorial_8cxx_1acd33f38fd89cd298ef5d1ea858ee0416" kindref="member">chi2</ref>.view({dim_i,<sp/>-1,<sp/>3})*v.view({dim_i,<sp/>-1,<sp/>3});<sp/></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="combinatorial_8cxx_1acd33f38fd89cd298ef5d1ea858ee0416" kindref="member">chi2</ref><sp/>=<sp/><ref refid="combinatorial_8cxx_1acd33f38fd89cd298ef5d1ea858ee0416" kindref="member">chi2</ref>.sum(-1);<sp/></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>(H.view({dim_i,<sp/>1,<sp/>3,<sp/>3})*v).sum(-1);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>t0_,<sp/>t1_,<sp/>t2_;<sp/><sp/></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>t0_<sp/>=<sp/>v.index({torch::indexing::Slice(),<sp/>torch::indexing::Slice(),<sp/>0}).view({dim_i,<sp/>-1});<sp/><sp/></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>t1_<sp/>=<sp/>v.index({torch::indexing::Slice(),<sp/>torch::indexing::Slice(),<sp/>1}).view({dim_i,<sp/>-1});<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>t2_<sp/>=<sp/>v.index({torch::indexing::Slice(),<sp/>torch::indexing::Slice(),<sp/>2}).view({dim_i,<sp/>-1});<sp/></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-------<sp/>Do<sp/>the<sp/>Sorting<sp/>------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>std::get&lt;1&gt;(<ref refid="combinatorial_8cxx_1acd33f38fd89cd298ef5d1ea858ee0416" kindref="member">chi2</ref>.sort(-1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));<sp/></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>t0_<sp/>=<sp/>torch::gather(t0_,<sp/>-1,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).view({dim_i,<sp/>-1,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>t1_<sp/>=<sp/>torch::gather(t1_,<sp/>-1,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).view({dim_i,<sp/>-1,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>t2_<sp/>=<sp/>torch::gather(t2_,<sp/>-1,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">).view({dim_i,<sp/>-1,<sp/>1});<sp/></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>torch::cat({t0_,<sp/>t1_,<sp/>t2_},<sp/>-1);<sp/></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="combinatorial_8cxx_1acd33f38fd89cd298ef5d1ea858ee0416" kindref="member">chi2</ref><sp/>=<sp/>torch::gather(diag,<sp/>1,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;nu1&quot;</highlight><highlight class="normal">]<sp/>=<sp/>v;<sp/></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;distance&quot;</highlight><highlight class="normal">]<sp/>=<sp/><ref refid="combinatorial_8cxx_1acd33f38fd89cd298ef5d1ea858ee0416" kindref="member">chi2</ref>;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;<sp/></highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="namespacenusol___1ac849ef3564c5ac968727dce36494fd0a" refkind="member"><highlight class="normal">std::map&lt;std::string,<sp/>torch::Tensor&gt;<sp/><ref refid="namespacenusol___1ac849ef3564c5ac968727dce36494fd0a" kindref="member">nusol_::NuNu</ref>(</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::Tensor*<sp/>pmc_b1,<sp/>torch::Tensor*<sp/>pmc_b2,<sp/></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::Tensor*<sp/>pmc_l1,<sp/>torch::Tensor*<sp/>pmc_l2,<sp/></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>torch::Tensor*<sp/>met_xy,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/>torch::Tensor*<sp/><ref refid="namespacernn__model_1a3d5657621f343e53150d482e59f6abed" kindref="member">m1</ref>,<sp/>torch::Tensor*<sp/>m2)</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>H1,<sp/>H2,<sp/>H1_perp,<sp/>H2_perp,<sp/>N1,<sp/>N2,<sp/>S,<sp/>n_,<sp/>none;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>zero,<sp/>_v,<sp/>__v,<sp/>_d;<sp/></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>torch::TensorOptions<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref><sp/>=<sp/><ref refid="utils_8h_1a1652e53abd2299dd0f10e093948e4fa3" kindref="member">MakeOp</ref>(met_xy);<sp/></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>torch::Tensor&gt;<sp/>output;<sp/></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;torch::Tensor,<sp/>torch::Tensor&gt;<sp/>sols;<sp/></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------<sp/>Prepare<sp/>all<sp/>needed<sp/>matrices<sp/>-----------------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m2){m2<sp/>=<sp/><ref refid="namespacernn__model_1a3d5657621f343e53150d482e59f6abed" kindref="member">m1</ref>;}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>H1<sp/>=<sp/><ref refid="namespacenusol___1a526c0e4a558a1201624ea0b639bc747c" kindref="member">nusol_::BaseMatrix</ref>(pmc_b1,<sp/>pmc_l1,<sp/><ref refid="namespacernn__model_1a3d5657621f343e53150d482e59f6abed" kindref="member">m1</ref>);<sp/></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>H2<sp/>=<sp/><ref refid="namespacenusol___1a526c0e4a558a1201624ea0b639bc747c" kindref="member">nusol_::BaseMatrix</ref>(pmc_b2,<sp/>pmc_l2,<sp/>m2);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---<sp/>protection<sp/>against<sp/>non-invertible<sp/>matrices<sp/>---<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>none<sp/>=<sp/><sp/>(torch::det(H1)<sp/>==<sp/>0);<sp/><sp/></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>none<sp/>+=<sp/>(torch::det(H2)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>none<sp/>=<sp/>none<sp/>==<sp/>0;<sp/></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;NoSols&quot;</highlight><highlight class="normal">]<sp/>=<sp/>none;<sp/></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_i<sp/>=<sp/>met_xy<sp/>-&gt;<sp/>index({none}).size(0);<sp/></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_i<sp/>==<sp/>0){<sp/></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;n_&quot;</highlight><highlight class="normal">]<sp/><sp/><sp/>=<sp/>torch::zeros({1,<sp/>3},<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref>);<sp/></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;nu_1&quot;</highlight><highlight class="normal">]<sp/>=<sp/>torch::zeros({1,<sp/>3},<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref>);<sp/></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;nu_2&quot;</highlight><highlight class="normal">]<sp/>=<sp/>torch::zeros({1,<sp/>3},<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;H_perp_1&quot;</highlight><highlight class="normal">]<sp/>=<sp/>H1;<sp/></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;H_perp_2&quot;</highlight><highlight class="normal">]<sp/>=<sp/>H2;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;<sp/></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>xb1_<sp/>=<sp/>pmc_b1<sp/>-&gt;<sp/>index({none});<sp/></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>xl1_<sp/>=<sp/>pmc_l1<sp/>-&gt;<sp/>index({none});<sp/></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>h1_<sp/><sp/>=<sp/>H1.index({none});<sp/></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>H1<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a28531a30b80ecbd780392279d8a8adf3" kindref="member">Rotation</ref>(&amp;xb1_,<sp/>&amp;xl1_,<sp/>&amp;h1_);<sp/></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>xb2_<sp/>=<sp/>pmc_b2<sp/>-&gt;<sp/>index({none});<sp/></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>xl2_<sp/>=<sp/>pmc_l2<sp/>-&gt;<sp/>index({none});<sp/></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>h2_<sp/><sp/>=<sp/>H2.index({none});<sp/></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>H2<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a28531a30b80ecbd780392279d8a8adf3" kindref="member">Rotation</ref>(&amp;xb2_,<sp/>&amp;xl2_,<sp/>&amp;h2_);<sp/></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>H1_perp<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a8bbfd6699dae11189c40dfc0035fd99c" kindref="member">_H_perp</ref>(&amp;H1);<sp/></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>H2_perp<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a8bbfd6699dae11189c40dfc0035fd99c" kindref="member">_H_perp</ref>(&amp;H2);<sp/></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>N1<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a154959ee15ff2420eef7a772682767b7" kindref="member">_N</ref>(&amp;H1_perp);<sp/></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>N2<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a154959ee15ff2420eef7a772682767b7" kindref="member">_N</ref>(&amp;H2_perp);<sp/></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>=<sp/>met_xy<sp/>-&gt;<sp/>index({none});<sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>S<sp/>=<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1aa2f3034bed6ef5a865741a89972d44d8" kindref="member">_met</ref>(&amp;S)<sp/>-<sp/><ref refid="nusol_2tensor_2nusol_8cxx_1a695a1b065a09564a65159bac242c506c" kindref="member">Shape</ref>(&amp;S,<sp/>{1,<sp/>1,<sp/>-1});<sp/></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>n_<sp/>=<sp/>torch::matmul(torch::matmul(S.transpose(1,<sp/>2),<sp/>N2),<sp/>S);<sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------<sp/>Start<sp/>Algorithm<sp/>-----------------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>sols<sp/>=<sp/><ref refid="namespacenusol___1a2cdd92aeb32c05137ebc7ef96c47a3da" kindref="member">nusol_::Intersection</ref>(&amp;N1,<sp/>&amp;n_,<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/><ref refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a8277e0910d750195b448797616e091ad" kindref="member">d</ref><sp/>=<sp/>std::get&lt;1&gt;(sols);<sp/></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>v<sp/>=<sp/>std::get&lt;0&gt;(sols).view({dim_i,<sp/>-1,<sp/>1,<sp/>3});<sp/></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>v_<sp/>=<sp/>torch::sum(S.view({dim_i,<sp/>1,<sp/>3,<sp/>3})<sp/>*<sp/>v,<sp/>-1).view({dim_i,<sp/>-1,<sp/>1,<sp/>3});<sp/></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>K1<sp/>=<sp/>torch::matmul(H1,<sp/>torch::inverse(H1_perp)).view({dim_i,<sp/>1,<sp/>3,<sp/>3});</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>K2<sp/>=<sp/>torch::matmul(H2,<sp/>torch::inverse(H2_perp)).view({dim_i,<sp/>1,<sp/>3,<sp/>3});</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/><sp/>=<sp/>(K1<sp/>*<sp/>v).sum(-1);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>v_<sp/>=<sp/>(K2<sp/>*<sp/>v_).sum(-1);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_j<sp/><sp/>=<sp/>v.size(1);<sp/></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_k<sp/><sp/>=<sp/>v.size(2);<sp/></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_i_<sp/>=<sp/>none.size(0);<sp/></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>zero<sp/>=<sp/>torch::zeros({dim_i_,<sp/>dim_j,<sp/>dim_k},<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref>);<sp/></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>_d<sp/>=<sp/>torch::zeros({dim_i_,<sp/>dim_j},<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref>);<sp/></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>_d.index_put_({none},<sp/><ref refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a8277e0910d750195b448797616e091ad" kindref="member">d</ref>);<sp/></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>_v<sp/>=<sp/>zero.clone();<sp/></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>_v.index_put_({none},<sp/>v);<sp/></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>__v<sp/>=<sp/>zero.clone();<sp/></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>__v.index_put_({none},<sp/>v_);<sp/></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;nu_1&quot;</highlight><highlight class="normal">]<sp/>=<sp/>_v;<sp/><sp/></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;nu_2&quot;</highlight><highlight class="normal">]<sp/>=<sp/>__v;<sp/></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;distance&quot;</highlight><highlight class="normal">]<sp/>=<sp/>_d;<sp/></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;n_&quot;</highlight><highlight class="normal">]<sp/>=<sp/>n_;<sp/></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;H_perp_1&quot;</highlight><highlight class="normal">]<sp/>=<sp/>H1_perp;<sp/></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;H_perp_2&quot;</highlight><highlight class="normal">]<sp/>=<sp/>H2_perp;<sp/></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;<sp/></highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="pyc/nusol/tensor/nusol.cxx"/>
  </compounddef>
</doxygen>
