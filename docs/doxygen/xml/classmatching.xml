<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classmatching" kind="class" language="C++" prot="public">
    <compoundname>matching</compoundname>
    <basecompoundref refid="classselection__template" prot="public" virt="non-virtual">selection_template</basecompoundref>
    <includes refid="matching_8h" local="no">matching.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmatching_1a4beca1c9b9330d5de6ebc10f24f3084c" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double matching::energy_constraint</definition>
        <argsstring></argsstring>
        <name>energy_constraint</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="selections/mc20/matching/matching.h" line="52" column="16" bodyfile="selections/mc20/matching/matching.h" bodystart="52" bodyend="-1"/>
        <referencedby refid="classmatching_1ad1e05cb4fc302c8a0c503273ec4e67db" compoundref="matching_8cxx" startline="4" endline="8">clone</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmatching_1a0b791a7fc0483ec0cf7320b3bcb9e89f" prot="public" static="no" mutable="no">
        <type><ref refid="structbuffer__t" kindref="compound">buffer_t</ref></type>
        <definition>buffer_t matching::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="selections/mc20/matching/matching.h" line="54" column="18" bodyfile="selections/mc20/matching/matching.h" bodystart="54" bodyend="-1"/>
        <referencedby refid="classsimply__plot_1_1_data_x_1a41f0e58c621248ecb74fbe1deb30cc7e" compoundref="simply__plot_8py" startline="538" endline="544">simply_plot.DataX.hist</referencedby>
        <referencedby refid="classmatching_1a87394c2320fa7c7fc07cd58fe7c5b8d0" compoundref="matching_8cxx" startline="11" endline="74">merge</referencedby>
        <referencedby refid="classsimply__plot_1_1_data_x_1aaacf4239206d59867e979e047388effe" compoundref="simply__plot_8py" startline="531" endline="532">simply_plot.DataX.num_events</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmatching_1ace433954604d85a39081fcac31e03084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>matching::matching</definition>
        <argsstring>()</argsstring>
        <name>matching</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="selections/mc20/matching/matching.h" line="32" column="9" bodyfile="selections/mc20/matching/matching.cxx" bodystart="3" bodyend="3"/>
        <references refid="classselection__template_1a57db7d2460788ed52623482bef7a50e5" compoundref="selection__template_8h" startline="24">selection_template::name</references>
        <referencedby refid="classmatching_1ad1e05cb4fc302c8a0c503273ec4e67db" compoundref="matching_8cxx" startline="4" endline="8">clone</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmatching_1a0cab5299f57f2801576852253a33fcb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>matching::~matching</definition>
        <argsstring>()</argsstring>
        <name>~matching</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="selections/mc20/matching/matching.h" line="33" column="9" bodyfile="selections/mc20/matching/matching.cxx" bodystart="9" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classmatching_1ad1e05cb4fc302c8a0c503273ec4e67db" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classselection__template" kindref="compound">selection_template</ref> *</type>
        <definition>selection_template * matching::clone</definition>
        <argsstring>() override</argsstring>
        <name>clone</name>
        <reimplements refid="classselection__template_1a094ce1eb2b6463f88a8ad5f7dfd8e4b6">clone</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="selections/mc20/matching/matching.h" line="34" column="28" bodyfile="selections/mc20/matching/matching.cxx" bodystart="4" bodyend="8"/>
        <references refid="classmatching_1a4beca1c9b9330d5de6ebc10f24f3084c" compoundref="matching_8h" startline="52">energy_constraint</references>
        <references refid="classmatching_1ace433954604d85a39081fcac31e03084" compoundref="matching_8cxx" startline="3" endline="3">matching</references>
      </memberdef>
      <memberdef kind="function" id="classmatching_1a7c3eb589ac6ae85490aa698d73fe8b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matching::reference</definition>
        <argsstring>(event_template *ev)</argsstring>
        <name>reference</name>
        <param>
          <type><ref refid="classevent__template" kindref="compound">event_template</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="selections/mc20/matching/matching.h" line="36" column="14" bodyfile="selections/mc20/matching/mc16_ref.cxx" bodystart="4" bodyend="114"/>
        <references refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" compoundref="analysis_2main_8py" startline="10">main.ev</references>
        <references refid="namespacetest__normalization_1aecbcdd1778c32c7066b6264d4a03e71c" compoundref="test__normalization_8py" startline="9">test_normalization.evn</references>
        <references refid="classselection__template_1a67a39632bebd074e7feb638aaedee872" compoundref="selection__template_8h" startline="28">selection_template::hash</references>
        <references refid="enums_8h_1a666fa98df084d96fc481369704153b28acc9357767a613ec2e912943553e95778">is_lep</references>
        <references refid="enums_8h_1a666fa98df084d96fc481369704153b28ab09e705fe6108a37560c8173e04c822d">is_nu</references>
        <references refid="merge__cast_8h_1a205af11d07be8d10770e7392817fc5c3" compoundref="merge__cast_8h" startline="9" endline="11">merge_data</references>
        <references refid="classselection__template_1a7e1560964237cf7b4846e24b300d7b9e" compoundref="selection__template_8h" startline="116" endline="121">selection_template::vectorize</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
        <referencedby refid="classmatching_1afbde71106947fe0f714151794c7f6259" compoundref="matching_8cxx" startline="153" endline="159">strategy</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmatching_1a6925aacb40ca0e99f178d44959956fdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matching::experimental</definition>
        <argsstring>(event_template *ev)</argsstring>
        <name>experimental</name>
        <param>
          <type><ref refid="classevent__template" kindref="compound">event_template</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="selections/mc20/matching/matching.h" line="37" column="14" bodyfile="selections/mc20/matching/mc20_exp.cxx" bodystart="4" bodyend="69"/>
        <references refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" compoundref="analysis_2main_8py" startline="10">main.ev</references>
        <references refid="namespacetest__normalization_1aecbcdd1778c32c7066b6264d4a03e71c" compoundref="test__normalization_8py" startline="9">test_normalization.evn</references>
        <references refid="enums_8h_1a666fa98df084d96fc481369704153b28acc9357767a613ec2e912943553e95778">is_lep</references>
        <references refid="enums_8h_1a666fa98df084d96fc481369704153b28ab09e705fe6108a37560c8173e04c822d">is_nu</references>
        <references refid="classselection__template_1a7e1560964237cf7b4846e24b300d7b9e" compoundref="selection__template_8h" startline="116" endline="121">selection_template::vectorize</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
        <referencedby refid="classmatching_1afbde71106947fe0f714151794c7f6259" compoundref="matching_8cxx" startline="153" endline="159">strategy</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmatching_1a6a20dfdb8f6fa5a23a6859d869040417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matching::current</definition>
        <argsstring>(event_template *ev)</argsstring>
        <name>current</name>
        <param>
          <type><ref refid="classevent__template" kindref="compound">event_template</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="selections/mc20/matching/matching.h" line="38" column="14" bodyfile="selections/mc20/matching/mc20_ref.cxx" bodystart="4" bodyend="103"/>
        <references refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" compoundref="analysis_2main_8py" startline="10">main.ev</references>
        <references refid="namespacetest__normalization_1aecbcdd1778c32c7066b6264d4a03e71c" compoundref="test__normalization_8py" startline="9">test_normalization.evn</references>
        <references refid="classselection__template_1a67a39632bebd074e7feb638aaedee872" compoundref="selection__template_8h" startline="28">selection_template::hash</references>
        <references refid="enums_8h_1a666fa98df084d96fc481369704153b28acc9357767a613ec2e912943553e95778">is_lep</references>
        <references refid="enums_8h_1a666fa98df084d96fc481369704153b28ab09e705fe6108a37560c8173e04c822d">is_nu</references>
        <references refid="classselection__template_1a7e1560964237cf7b4846e24b300d7b9e" compoundref="selection__template_8h" startline="116" endline="121">selection_template::vectorize</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
        <referencedby refid="classmatching_1afbde71106947fe0f714151794c7f6259" compoundref="matching_8cxx" startline="153" endline="159">strategy</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmatching_1abc5f2130144ffdd25c3d8f7f933b23f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void matching::dump</definition>
        <argsstring>(object_data_t *data, std::vector&lt; particle_template * &gt; *obj, bool is_lepx, bool is_tru, int *num_jets=nullptr, std::vector&lt; int &gt; *num_merged=nullptr)</argsstring>
        <name>dump</name>
        <param>
          <type><ref refid="structobject__data__t" kindref="compound">object_data_t</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classparticle__template" kindref="compound">particle_template</ref> * &gt; *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_lepx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_tru</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num_jets</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::vector&lt; int &gt; *</type>
          <declname>num_merged</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="selections/mc20/matching/matching.h" line="39" column="14" bodyfile="selections/mc20/matching/matching.cxx" bodystart="76" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classmatching_1a04995b471b7aed459aeec59b3ea9a81b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool matching::match_obj</definition>
        <argsstring>(std::vector&lt; particle_template * &gt; *vx, std::vector&lt; particle_template * &gt; *out, std::string hash_, std::vector&lt; int &gt; *num_merged, int *num_jets, bool exl_lep)</argsstring>
        <name>match_obj</name>
        <param>
          <type>std::vector&lt; <ref refid="classparticle__template" kindref="compound">particle_template</ref> * &gt; *</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classparticle__template" kindref="compound">particle_template</ref> * &gt; *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>hash_</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; *</type>
          <declname>num_merged</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>num_jets</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exl_lep</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="selections/mc20/matching/matching.h" line="43" column="14" bodyfile="selections/mc20/matching/matching.cxx" bodystart="100" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classmatching_1a5dd2ca818ce1ff894af645f4d15f4c01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; matching::get_pdgid</definition>
        <argsstring>(std::vector&lt; particle_template * &gt; *prt)</argsstring>
        <name>get_pdgid</name>
        <param>
          <type>std::vector&lt; <ref refid="classparticle__template" kindref="compound">particle_template</ref> * &gt; *</type>
          <declname>prt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="selections/mc20/matching/matching.h" line="47" column="21" bodyfile="selections/mc20/matching/matching.cxx" bodystart="146" bodyend="150"/>
        <references refid="namespacemain_1a0cfc6c3cbcca8f2703f7ceb7991f196c" compoundref="performance_2main_8py" startline="69">main.out</references>
        <references refid="enums_8h_1a666fa98df084d96fc481369704153b28a29e700fac9f9a1121be10a785cb69e3a">pdgid</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
      </memberdef>
      <memberdef kind="function" id="classmatching_1afbde71106947fe0f714151794c7f6259" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool matching::strategy</definition>
        <argsstring>(event_template *ev) override</argsstring>
        <name>strategy</name>
        <reimplements refid="classselection__template_1a01a81c84699bb054a8c320fc5575e17b">strategy</reimplements>
        <param>
          <type><ref refid="classevent__template" kindref="compound">event_template</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="selections/mc20/matching/matching.h" line="49" column="14" bodyfile="selections/mc20/matching/matching.cxx" bodystart="153" bodyend="159"/>
        <references refid="classmatching_1a6a20dfdb8f6fa5a23a6859d869040417" compoundref="mc20__ref_8cxx" startline="4" endline="103">current</references>
        <references refid="namespacemain_1ac94cb3d1fd16b3b124a4bbdd7fec754d" compoundref="analysis_2main_8py" startline="10">main.ev</references>
        <references refid="classmatching_1a6925aacb40ca0e99f178d44959956fdb" compoundref="mc20__exp_8cxx" startline="4" endline="69">experimental</references>
        <references refid="classselection__template_1a57db7d2460788ed52623482bef7a50e5" compoundref="selection__template_8h" startline="24">selection_template::name</references>
        <references refid="classmatching_1a7c3eb589ac6ae85490aa698d73fe8b88" compoundref="mc16__ref_8cxx" startline="4" endline="114">reference</references>
      </memberdef>
      <memberdef kind="function" id="classmatching_1a87394c2320fa7c7fc07cd58fe7c5b8d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void matching::merge</definition>
        <argsstring>(selection_template *sl) override</argsstring>
        <name>merge</name>
        <reimplements refid="classselection__template_1ad04ca3679a943defbd47c05a88448aba">merge</reimplements>
        <param>
          <type><ref refid="classselection__template" kindref="compound">selection_template</ref> *</type>
          <declname>sl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="selections/mc20/matching/matching.h" line="50" column="14" bodyfile="selections/mc20/matching/matching.cxx" bodystart="11" bodyend="74"/>
        <references refid="classmatching_1a0b791a7fc0483ec0cf7320b3bcb9e89f" compoundref="matching_8h" startline="54">data</references>
        <references refid="structobject__data__t_1a0db59149b9a3ab36ac5672f4cc2ce6a4" compoundref="matching_8h" startline="16">object_data_t::is_hadronic</references>
        <references refid="structobject__data__t_1ac63e805581fbb5e223990c3c9bb7a762" compoundref="matching_8h" startline="15">object_data_t::is_leptonic</references>
        <references refid="structobject__data__t_1ae1358b317d85d512b6d9c2c07af998ba" compoundref="matching_8h" startline="11">object_data_t::mass</references>
        <references refid="structobject__data__t_1a1700f9a88ee76390e02c1673aea4f489" compoundref="matching_8h" startline="17">object_data_t::merged</references>
        <references refid="structobject__data__t_1aed553fc44fe0e8c1bd8dc0756529be32" compoundref="matching_8h" startline="9">object_data_t::num_false</references>
        <references refid="structobject__data__t_1ad40225b01d379ee2831c89cf744be82c" compoundref="matching_8h" startline="8">object_data_t::num_htop</references>
        <references refid="structobject__data__t_1a0c1e572b3c43d5abb339b34492be1b4f" compoundref="matching_8h" startline="14">object_data_t::num_jets</references>
        <references refid="structobject__data__t_1ae285af481040b09da025548310b836e0" compoundref="matching_8h" startline="7">object_data_t::num_ltop</references>
        <references refid="structobject__data__t_1af4dc82fe90ca7c2965e244c3fb858ac1" compoundref="matching_8h" startline="6">object_data_t::num_tops</references>
        <references refid="structobject__data__t_1a67e82e9f688d102beea09cf80fc1c65f" compoundref="matching_8h" startline="18">object_data_t::pdgid</references>
        <references refid="namespacemain_1a80457db91bd1110a9e4a8515839a2a4b" compoundref="metrics_2main_8py" startline="4">main.sl</references>
        <references refid="structbuffer__t_1a8d4e8fe60d31953d4a146c19cce336d3" compoundref="matching_8h" startline="23">buffer_t::top_children</references>
        <references refid="structbuffer__t_1a216770db15b97619f2ec908d4067439e" compoundref="matching_8h" startline="25">buffer_t::top_jets_children</references>
        <references refid="structbuffer__t_1a0265a0036a790d07fdf05de70602f66b" compoundref="matching_8h" startline="26">buffer_t::top_jets_leptons</references>
        <references refid="structbuffer__t_1ae44465189370b0220dbaa778438d7ada" compoundref="matching_8h" startline="22">buffer_t::top_partons</references>
        <references refid="structbuffer__t_1aefa49823f2b6718cac7f18619439155c" compoundref="matching_8h" startline="24">buffer_t::top_truthjets</references>
        <references refid="classselection__template_1ae5606e994231fae57abe42e4f0ec6202" compoundref="selection__template_8cxx" startline="10" endline="55">selection_template::write</references>
        <references refid="structobject__data__t_1ab6a1790133e10ee8d214292edafff557" compoundref="matching_8h" startline="12">object_data_t::wrong_matched</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>selection_template</label>
        <link refid="classselection__template"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>matching</label>
        <link refid="classmatching"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>tools</label>
        <link refid="classtools"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11">
        <label>cproperty&lt; std::vector&lt; int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>meta</label>
        <link refid="classmeta"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>config</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>run_number</edgelabel>
          <edgelabel>events</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>dsid</edgelabel>
          <edgelabel>nFiles</edgelabel>
          <edgelabel>datasetNumber</edgelabel>
          <edgelabel>totalEvents</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>fileSize</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>LFN</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>inputrange</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>keyword</edgelabel>
          <edgelabel>weights</edgelabel>
          <edgelabel>keywords</edgelabel>
          <edgelabel>fileGUID</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>principalPhysicsGroup</edgelabel>
          <edgelabel>DatasetName</edgelabel>
          <edgelabel>generatorName</edgelabel>
          <edgelabel>productionStep</edgelabel>
          <edgelabel>campaign</edgelabel>
          <edgelabel>projectName</edgelabel>
          <edgelabel>physicsShort</edgelabel>
          <edgelabel>logicalDatasetName</edgelabel>
          <edgelabel>conditionsTag</edgelabel>
          <edgelabel>derivationFormat</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>cross_section_nb</edgelabel>
          <edgelabel>completion</edgelabel>
          <edgelabel>cross_section_fb</edgelabel>
          <edgelabel>ecmEnergy</edgelabel>
          <edgelabel>event_index</edgelabel>
          <edgelabel>sum_of_weights</edgelabel>
          <edgelabel>beam_energy</edgelabel>
          <edgelabel>cross_section_pb</edgelabel>
          <edgelabel>genFiltEff</edgelabel>
          <edgelabel>eventNumber</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>misc</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>inputfiles</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>isMC</edgelabel>
          <edgelabel>found</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>std::map&lt; std::string, meta_t &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="25" relation="template-instance">
          <edgelabel>&lt; std::string, meta_t &gt;</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>K</label>
      </node>
      <node id="27">
        <label>T</label>
      </node>
      <node id="12">
        <label>cproperty&lt; unsigned int, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; unsigned int, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>weights_t</label>
        <link refid="structweights__t"/>
        <childnode refid="30" relation="usage">
          <edgelabel>hist_data</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>generator</edgelabel>
          <edgelabel>ami_tag</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>std::vector&lt; double &gt;</label>
        <childnode refid="34" relation="template-instance">
          <edgelabel>&lt; double &gt;</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>cproperty&lt; long, selection_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; long, selection_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="27" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>cproperty&lt; std::string, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; std::string, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>std::map&lt; std::string, weights_t &gt;</label>
        <childnode refid="29" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="25" relation="template-instance">
          <edgelabel>&lt; std::string, weights_t &gt;</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="26" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>cproperty&lt; double, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; double, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>std::map&lt; int, std::string &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="25" relation="template-instance">
          <edgelabel>&lt; int, std::string &gt;</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>cproperty&lt; std::vector&lt; double &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; double &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>cproperty&lt; std::map&lt; int, int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; std::map&lt; int, int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>std::map&lt; int, int &gt;</label>
        <childnode refid="25" relation="template-instance">
          <edgelabel>&lt; int, int &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>selection_template</label>
        <link refid="classselection__template"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>meta_data</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>filename</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>matched_meta</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>passed_weights</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>index</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>name</edgelabel>
          <edgelabel>tree</edgelabel>
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>weight</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>cproperty&lt; std::map&lt; std::string, std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>cproperty&lt; T, G &gt;</label>
        <link refid="classcproperty"/>
      </node>
      <node id="40">
        <label>cproperty&lt; std::string, selection_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; std::string, selection_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>cproperty&lt; std::vector&lt; std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>cproperty&lt; std::map&lt; int, std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; std::map&lt; int, std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="23">
        <label>meta_t</label>
        <link refid="structmeta__t"/>
        <childnode refid="24" relation="usage">
          <edgelabel>LFN</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>misc</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>inputrange</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>config</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>principalPhysicsGroup</edgelabel>
          <edgelabel>DatasetName</edgelabel>
          <edgelabel>generatorName</edgelabel>
          <edgelabel>productionStep</edgelabel>
          <edgelabel>campaign</edgelabel>
          <edgelabel>projectName</edgelabel>
          <edgelabel>physicsShort</edgelabel>
          <edgelabel>logicalDatasetName</edgelabel>
          <edgelabel>conditionsTag</edgelabel>
          <edgelabel>derivationFormat</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>run_number</edgelabel>
          <edgelabel>events</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>inputfiles</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>keyword</edgelabel>
          <edgelabel>weights</edgelabel>
          <edgelabel>keywords</edgelabel>
          <edgelabel>fileGUID</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>fileSize</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>std::map&lt; std::string, std::string &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="25" relation="template-instance">
          <edgelabel>&lt; std::string, std::string &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>matching</label>
        <link refid="classmatching"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="34" relation="template-instance">
          <edgelabel>&lt; std::string &gt;</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>std::vector&lt; std::vector&lt; int &gt; &gt;</label>
        <childnode refid="33" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="34" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; int &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>std::map&lt; std::string, std::map&lt; std::string, float &gt; &gt;</label>
        <childnode refid="30" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="25" relation="template-instance">
          <edgelabel>&lt; std::string, std::map&lt; std::string, float &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>std::map&lt; std::string, float &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="25" relation="template-instance">
          <edgelabel>&lt; std::string, float &gt;</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>cproperty&lt; bool, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; bool, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>event_t</label>
        <link refid="structevent__t"/>
        <childnode refid="5" relation="usage">
          <edgelabel>name</edgelabel>
          <edgelabel>tree</edgelabel>
          <edgelabel>hash</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>object_data_t</label>
        <link refid="structobject__data__t"/>
        <childnode refid="44" relation="usage">
          <edgelabel>pdgid</edgelabel>
          <edgelabel>merged</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>is_leptonic</edgelabel>
          <edgelabel>is_hadronic</edgelabel>
          <edgelabel>num_jets</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>mass</edgelabel>
          <edgelabel>wrong_matched</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>buffer_t</label>
        <link refid="structbuffer__t"/>
        <childnode refid="43" relation="usage">
          <edgelabel>top_partons</edgelabel>
          <edgelabel>top_truthjets</edgelabel>
          <edgelabel>top_children</edgelabel>
          <edgelabel>top_jets_leptons</edgelabel>
          <edgelabel>top_jets_children</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>cproperty&lt; std::map&lt; std::string, int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>cproperty&lt; double, selection_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; double, selection_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>std::map&lt; std::string, int &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="25" relation="template-instance">
          <edgelabel>&lt; std::string, int &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>notification</label>
        <link refid="classnotification"/>
        <childnode refid="5" relation="usage">
          <edgelabel>prefix</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>std::vector&lt; int &gt;</label>
        <childnode refid="34" relation="template-instance">
          <edgelabel>&lt; int &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>tools</label>
        <link refid="classtools"/>
      </node>
      <node id="5">
        <label>std::string</label>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>cproperty&lt; std::map&lt; std::string, weights_t &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, weights_t &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="selections/mc20/matching/matching.h" line="30" column="1" bodyfile="selections/mc20/matching/matching.h" bodystart="29" bodyend="55"/>
    <listofallmembers>
      <member refid="classtools_1a408b66ad73b7b4bb962634c14a55b619" prot="public" virt="non-virtual"><scope>matching</scope><name>absolute_path</name></member>
      <member refid="classselection__template_1ae24cee9f302d7509a7009daea0bf0616" prot="public" virt="non-virtual"><scope>matching</scope><name>build</name></member>
      <member refid="classselection__template_1a6a9f6df015c9f8e48c65cacc249c4fdf" prot="public" virt="virtual"><scope>matching</scope><name>bulk_write</name></member>
      <member refid="classmatching_1ad1e05cb4fc302c8a0c503273ec4e67db" prot="public" virt="virtual"><scope>matching</scope><name>clone</name></member>
      <member refid="classselection__template_1a9deff703f50fdff72bd1edf3664a9d75" prot="public" virt="non-virtual"><scope>matching</scope><name>CompileEvent</name></member>
      <member refid="classselection__template_1a3009dc4bb45c47d96a5bdc4096bd6870" prot="public" virt="non-virtual"><scope>matching</scope><name>contains</name></member>
      <member refid="classtools_1aed9f3247b474a8fb1840860d51cde7ca" prot="public" virt="non-virtual"><scope>matching</scope><name>create_path</name></member>
      <member refid="classmatching_1a6a20dfdb8f6fa5a23a6859d869040417" prot="public" virt="non-virtual"><scope>matching</scope><name>current</name></member>
      <member refid="classmatching_1a0b791a7fc0483ec0cf7320b3bcb9e89f" prot="public" virt="non-virtual"><scope>matching</scope><name>data</name></member>
      <member refid="classtools_1a1f8f5e775e758e3d2442a9dd46daf78c" prot="public" virt="non-virtual"><scope>matching</scope><name>delete_path</name></member>
      <member refid="classselection__template_1ab32b926ee893cf56dc27913271658d1e" prot="public" virt="non-virtual"><scope>matching</scope><name>downcast</name></member>
      <member refid="classmatching_1abc5f2130144ffdd25c3d8f7f933b23f2" prot="public" virt="non-virtual"><scope>matching</scope><name>dump</name></member>
      <member refid="classtools_1a3d538da5310467c9321b27cd6a75b9af" prot="public" virt="non-virtual"><scope>matching</scope><name>ends_with</name></member>
      <member refid="classmatching_1a4beca1c9b9330d5de6ebc10f24f3084c" prot="public" virt="non-virtual"><scope>matching</scope><name>energy_constraint</name></member>
      <member refid="classmatching_1a6925aacb40ca0e99f178d44959956fdb" prot="public" virt="non-virtual"><scope>matching</scope><name>experimental</name></member>
      <member refid="classtools_1a86175bf887f3e82780cb72910181961d" prot="public" virt="non-virtual"><scope>matching</scope><name>extract</name></member>
      <member refid="classselection__template_1ad220a2da4b57303d8a5b162b6733024f" prot="public" virt="non-virtual"><scope>matching</scope><name>filename</name></member>
      <member refid="classtools_1abce97603aeadeaa04fa6c6ff6c721eda" prot="public" virt="non-virtual"><scope>matching</scope><name>flush</name></member>
      <member refid="classselection__template_1a2f6cd45079e1fab94a163a38fbe005cd" prot="public" virt="non-virtual"><scope>matching</scope><name>get_hash</name></member>
      <member refid="classselection__template_1ad27d2cd85c19147b85b1e96ce73bdade" prot="public" virt="non-virtual"><scope>matching</scope><name>get_leptonics</name></member>
      <member refid="classselection__template_1ad0d6fa60bf0da8796a718532c0288d04" prot="public" virt="non-virtual"><scope>matching</scope><name>get_name</name></member>
      <member refid="classmatching_1a5dd2ca818ce1ff894af645f4d15f4c01" prot="public" virt="non-virtual"><scope>matching</scope><name>get_pdgid</name></member>
      <member refid="classselection__template_1a4e61c1d63afdff7a6428fbf4c6297166" prot="public" virt="non-virtual"><scope>matching</scope><name>get_tree</name></member>
      <member refid="classselection__template_1ae04fb8767d15273f80c5343e2f73384b" prot="public" virt="non-virtual"><scope>matching</scope><name>get_weight</name></member>
      <member refid="classtools_1ad7229c72cee65da3605c4be82f9b42d4" prot="public" virt="non-virtual"><scope>matching</scope><name>has_string</name></member>
      <member refid="classtools_1a13633d4d63c55bcf537ff141e7605f13" prot="public" virt="non-virtual"><scope>matching</scope><name>has_value</name></member>
      <member refid="classselection__template_1a67a39632bebd074e7feb638aaedee872" prot="public" virt="non-virtual"><scope>matching</scope><name>hash</name></member>
      <member refid="classselection__template_1a2e1c4a9239afbfea9cd510b774c9c1fe" prot="public" virt="non-virtual"><scope>matching</scope><name>index</name></member>
      <member refid="classtools_1a47d3d261edcb898daab56721e18d1e67" prot="public" virt="non-virtual"><scope>matching</scope><name>is_file</name></member>
      <member refid="classtools_1a5ab0f2cc351dd97951358ebe19e9c18d" prot="public" virt="non-virtual"><scope>matching</scope><name>ls</name></member>
      <member refid="classselection__template_1ab760e9d895d74e62a9d4bfe436568a86" prot="public" virt="non-virtual"><scope>matching</scope><name>make_unique</name></member>
      <member refid="classmatching_1a04995b471b7aed459aeec59b3ea9a81b" prot="public" virt="non-virtual"><scope>matching</scope><name>match_obj</name></member>
      <member refid="classselection__template_1a50e7d1939618dcb8b6386f5e7a247e12" prot="public" virt="non-virtual"><scope>matching</scope><name>matched_meta</name></member>
      <member refid="classmatching_1ace433954604d85a39081fcac31e03084" prot="public" virt="non-virtual"><scope>matching</scope><name>matching</name></member>
      <member refid="classmatching_1a87394c2320fa7c7fc07cd58fe7c5b8d0" prot="public" virt="virtual"><scope>matching</scope><name>merge</name></member>
      <member refid="classselection__template_1a15113e43e1451e9e65b9f327fcfc7e15" prot="public" virt="non-virtual"><scope>matching</scope><name>meta_data</name></member>
      <member refid="classselection__template_1a57db7d2460788ed52623482bef7a50e5" prot="public" virt="non-virtual"><scope>matching</scope><name>name</name></member>
      <member refid="classselection__template_1a0e423716b1439b853d39904998074ecd" prot="public" virt="non-virtual"><scope>matching</scope><name>operator==</name></member>
      <member refid="classselection__template_1ad472a18c63b8b1d6e41fbe626b13fc40" prot="public" virt="non-virtual"><scope>matching</scope><name>passed_weights</name></member>
      <member refid="classtools_1a4450b1e48193bef904b44f7a90aaee98" prot="public" virt="non-virtual"><scope>matching</scope><name>put</name></member>
      <member refid="classmatching_1a7c3eb589ac6ae85490aa698d73fe8b88" prot="public" virt="non-virtual"><scope>matching</scope><name>reference</name></member>
      <member refid="classtools_1a9265b9f87bde50d0352c6cd1959ae5fc" prot="public" virt="non-virtual"><scope>matching</scope><name>rename</name></member>
      <member refid="classtools_1aeae88ebd7116d59008600f0723716dba" prot="public" virt="non-virtual"><scope>matching</scope><name>replace</name></member>
      <member refid="classselection__template_1a2c99ad97301a85fc7c7257930d990cfd" prot="public" virt="non-virtual"><scope>matching</scope><name>reverse_hash</name></member>
      <member refid="classselection__template_1a4faf71140920bc4cf0fc06072cecad07" prot="public" virt="non-virtual"><scope>matching</scope><name>safe_delete</name></member>
      <member refid="classselection__template_1a906e3f695a675e5a545fa4eab867cfd7" prot="public" virt="virtual"><scope>matching</scope><name>selection</name></member>
      <member refid="classselection__template_1a4562a7ab32d93b5f2ca8a232a244041c" prot="public" virt="non-virtual"><scope>matching</scope><name>selection_template</name></member>
      <member refid="classselection__template_1acd31f17488bcf97dd8a5f1b3a7da1cdd" prot="public" virt="non-virtual"><scope>matching</scope><name>set_hash</name></member>
      <member refid="classselection__template_1a8951c34758d3410f9d931b6011c3cca2" prot="public" virt="non-virtual"><scope>matching</scope><name>set_index</name></member>
      <member refid="classselection__template_1a19244d585754db14326c126a98000899" prot="public" virt="non-virtual"><scope>matching</scope><name>set_name</name></member>
      <member refid="classselection__template_1aa95e812106c1a933f1b65e82557939d3" prot="public" virt="non-virtual"><scope>matching</scope><name>set_weight</name></member>
      <member refid="classtools_1a352a6965f2f3c768f0f4ecd1f978fcc0" prot="public" virt="non-virtual"><scope>matching</scope><name>split</name></member>
      <member refid="classmatching_1afbde71106947fe0f714151794c7f6259" prot="public" virt="virtual"><scope>matching</scope><name>strategy</name></member>
      <member refid="classselection__template_1a84df199f6022f2a5d27979d43de51547" prot="public" virt="non-virtual"><scope>matching</scope><name>sum</name></member>
      <member refid="classselection__template_1af639e8d3a86f1fa5cdfd2fe58e2e5dfb" prot="public" virt="non-virtual"><scope>matching</scope><name>sum</name></member>
      <member refid="classselection__template_1aefb54851b728057af466bf7a78caeda8" prot="public" virt="non-virtual"><scope>matching</scope><name>sum</name></member>
      <member refid="classtools_1a7b784121d8b368a64995feddc7083469" prot="public" virt="non-virtual" ambiguityscope="tools::"><scope>matching</scope><name>sum</name></member>
      <member refid="classselection__template_1a41a437aca3bb2a7f854a66ff92942d46" prot="public" virt="non-virtual"><scope>matching</scope><name>switch_board</name></member>
      <member refid="classselection__template_1a74558331b11dd6822a975a32203286ac" prot="public" virt="non-virtual"><scope>matching</scope><name>switch_board</name></member>
      <member refid="classselection__template_1a3bde46eb8ab3699d6f3eab6077d9716c" prot="public" virt="non-virtual"><scope>matching</scope><name>switch_board</name></member>
      <member refid="classselection__template_1a572f52e2758979cda89605e207e57c87" prot="public" virt="non-virtual"><scope>matching</scope><name>switch_board</name></member>
      <member refid="classselection__template_1ac565e3beb94b557fc947a6f8afebfc4d" prot="public" virt="non-virtual"><scope>matching</scope><name>threadIdx</name></member>
      <member refid="classtools_1afd037c109d75a9f119ec042e1ba922d9" prot="public" virt="non-virtual"><scope>matching</scope><name>to_string</name></member>
      <member refid="classtools_1a882f089d855dc4b3e0b60c591e11b092" prot="public" virt="non-virtual"><scope>matching</scope><name>to_string</name></member>
      <member refid="classtools_1af0028ec6242448428f7c548b6e7cb714" prot="public" virt="non-virtual"><scope>matching</scope><name>tools</name></member>
      <member refid="classselection__template_1a57ff66ff6c5ff5af5e81298faf6bf521" prot="public" virt="non-virtual"><scope>matching</scope><name>tree</name></member>
      <member refid="classtools_1a69be8c55f9fd7036080317a2ce98d4de" prot="public" virt="non-virtual"><scope>matching</scope><name>trim</name></member>
      <member refid="classtools_1ab46f1f3892604cb366b861cb54ce30e0" prot="public" virt="non-virtual"><scope>matching</scope><name>type_name</name></member>
      <member refid="classselection__template_1a82f14833e404fbe0399a2a539eef75b1" prot="public" virt="non-virtual"><scope>matching</scope><name>upcast</name></member>
      <member refid="classselection__template_1ae5ce6c75d19fdbb2ab18ba05b3ea4c58" prot="public" virt="non-virtual"><scope>matching</scope><name>upcast</name></member>
      <member refid="classselection__template_1a7e1560964237cf7b4846e24b300d7b9e" prot="public" virt="non-virtual"><scope>matching</scope><name>vectorize</name></member>
      <member refid="classselection__template_1a03816f18e6ce9351cd099525862c7c64" prot="public" virt="non-virtual"><scope>matching</scope><name>weight</name></member>
      <member refid="classselection__template_1ae5606e994231fae57abe42e4f0ec6202" prot="public" virt="virtual"><scope>matching</scope><name>write</name></member>
      <member refid="classselection__template_1a67768227c6c6a8e69edd0dc618a70eb9" prot="public" virt="non-virtual"><scope>matching</scope><name>write</name></member>
      <member refid="classselection__template_1a0983bf7c4582968c8c3b1a970fb3689e" prot="public" virt="non-virtual"><scope>matching</scope><name>write</name></member>
      <member refid="classmatching_1a0cab5299f57f2801576852253a33fcb1" prot="public" virt="non-virtual"><scope>matching</scope><name>~matching</name></member>
      <member refid="classselection__template_1af0b32265d850bfcd861a7f4744426856" prot="public" virt="virtual"><scope>matching</scope><name>~selection_template</name></member>
      <member refid="classtools_1a04762ddd5cc588520c89a387341f77f4" prot="public" virt="non-virtual"><scope>matching</scope><name>~tools</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
