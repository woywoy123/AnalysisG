<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classmetric__template" kind="class" language="C++" prot="public">
    <compoundname>metric_template</compoundname>
    <basecompoundref refid="classtools" prot="public" virt="non-virtual">tools</basecompoundref>
    <basecompoundref refid="classnotification" prot="public" virt="non-virtual">notification</basecompoundref>
    <derivedcompoundref refid="classaccuracy__metric" prot="public" virt="non-virtual">accuracy_metric</derivedcompoundref>
    <derivedcompoundref refid="classpagerank__metric" prot="public" virt="non-virtual">pagerank_metric</derivedcompoundref>
    <includes refid="metric__template_8h" local="no">metric_template.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmetric__template_1a22f7ac23f74bbabee66b43d9d4aa5de7" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmetric__template" kindref="compound">metric_template</ref> &gt;</type>
        <definition>cproperty&lt;std::string, metric_template&gt; metric_template::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="103" column="19" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="103" bodyend="-1"/>
        <referencedby refid="classaccuracy__metric_1abf2f46321e8309f51998d0efaac85bf7" compoundref="accuracy_8cxx" startline="5" endline="5">accuracy_metric::accuracy_metric</referencedby>
        <referencedby refid="classmetric__template_1a4f076b39d712cc1ed944d25328bcc271" compoundref="metric__template_8cxx" startline="5" endline="17">metric_template</referencedby>
        <referencedby refid="classpagerank__metric_1ad9197c8db1c9608b5e02a2420a689cf0" compoundref="pagerank_8cxx" startline="5" endline="5">pagerank_metric::pagerank_metric</referencedby>
        <referencedby refid="classmetric__template_1afb7814ecc901c36ada9b6bd974acab9a" compoundref="metric__template_8h" startline="82" endline="87">register_output</referencedby>
        <referencedby refid="classmetric__template_1a63bef91cbc8d4212598aa40f028ffa19" compoundref="metric__template_8h" startline="90" endline="95">write</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmetric__template_1ab7ba181ab8b18f0c079e225512fe083d" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::map&lt; std::string, std::string &gt;, <ref refid="classmetric__template" kindref="compound">metric_template</ref> &gt;</type>
        <definition>cproperty&lt;std::map&lt;std::string, std::string&gt;, metric_template&gt; metric_template::run_names</definition>
        <argsstring></argsstring>
        <name>run_names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="104" column="19" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="104" bodyend="-1"/>
        <referencedby refid="classmetric__template_1a4f076b39d712cc1ed944d25328bcc271" compoundref="metric__template_8cxx" startline="5" endline="17">metric_template</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmetric__template_1a5f67a91f401da56d4b805beb081a100e" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::vector&lt; std::string &gt;, <ref refid="classmetric__template" kindref="compound">metric_template</ref> &gt;</type>
        <definition>cproperty&lt;std::vector&lt;std::string&gt;, metric_template&gt; metric_template::variables</definition>
        <argsstring></argsstring>
        <name>variables</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="105" column="19" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="105" bodyend="-1"/>
        <referencedby refid="classmetric__template_1a4f076b39d712cc1ed944d25328bcc271" compoundref="metric__template_8cxx" startline="5" endline="17">metric_template</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmetric__template_1a8f90d670c9e752f9811366bbf5e7eba0" prot="public" static="no" mutable="no">
        <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
        <definition>meta* metric_template::meta_data</definition>
        <argsstring></argsstring>
        <name>meta_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="106" column="14" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmetric__template_1a7c6cfa5e2b9bee06ed2cb98a87e39f82" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>friend metric_template::analysis</definition>
        <argsstring></argsstring>
        <name>analysis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="109" column="16" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmetric__template_1aa3bb390a16ff2396e314782a750acc49" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="classmodel__template" kindref="compound">model_template</ref> * &gt;</type>
        <definition>std::map&lt;std::string, model_template*&gt; metric_template::lnks</definition>
        <argsstring></argsstring>
        <name>lnks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="111" column="18" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmetric__template_1a0560c591c9b881b49d5e20026b2b8795" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::vector&lt; <ref refid="classmodel__template" kindref="compound">model_template</ref> * &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::vector&lt;model_template*&gt; &gt; metric_template::hash_mdl</definition>
        <argsstring></argsstring>
        <name>hash_mdl</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="112" column="18" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmetric__template_1a8a958c130d2245c2456b03c007876e7c" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::map&lt; <ref refid="enums_8h_1adfa5b6ae994fc9e6e30dd3330929c03f" kindref="member">mode_enum</ref>, std::vector&lt; <ref refid="structgraph__t" kindref="compound">graph_t</ref> * &gt; * &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::map&lt;mode_enum, std::vector&lt;graph_t*&gt;*&gt; &gt; metric_template::hash_bta</definition>
        <argsstring></argsstring>
        <name>hash_bta</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="113" column="18" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmetric__template_1a37e8f76d5fb4b9ff740a0bf59cdbcaed" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::map&lt; int, std::map&lt; int, std::string &gt; &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::map&lt;int, std::map&lt;int, std::string&gt; &gt; &gt; metric_template::_epoch_kfold</definition>
        <argsstring></argsstring>
        <name>_epoch_kfold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="114" column="18" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmetric__template_1a5c835f14484ba095e8791d2aef906a56" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::map&lt; <ref refid="enums_8h_1a71db5b98a8935886920bcc7eaaf49fb9" kindref="member">graph_enum</ref>, std::vector&lt; std::string &gt; &gt; &gt;</type>
        <definition>std::map&lt;std::string, std::map&lt;graph_enum, std::vector&lt;std::string&gt; &gt; &gt; metric_template::_var_type</definition>
        <argsstring></argsstring>
        <name>_var_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="115" column="18" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmetric__template_1ab7b43d64e4e795a9686c9034ba93b0a6" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string metric_template::_name</definition>
        <argsstring></argsstring>
        <name>_name</name>
        <initializer>= &quot;metric-template&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="117" column="21" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmetric__template_1a4797d0ae686986febeba4e91d5a3b4c7" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string metric_template::_outdir</definition>
        <argsstring></argsstring>
        <name>_outdir</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="118" column="21" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmetric__template_1a52dea13de20c59b9c24b9973fe95aa58" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; metric_template::_run_names</definition>
        <argsstring></argsstring>
        <name>_run_names</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="120" column="18" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmetric__template_1acb9051dd3a5cc56fa5ad3a5e19336c50" prot="private" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; metric_template::_variables</definition>
        <argsstring></argsstring>
        <name>_variables</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="121" column="18" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmetric__template_1a0d536be8cceeab272082b34a30404f13" prot="private" static="no" mutable="no">
        <type><ref refid="structwriter" kindref="compound">writer</ref> *</type>
        <definition>writer* metric_template::handle</definition>
        <argsstring></argsstring>
        <name>handle</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="151" column="16" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmetric__template_1a4f076b39d712cc1ed944d25328bcc271" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>metric_template::metric_template</definition>
        <argsstring>()</argsstring>
        <name>metric_template</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="77" column="9" bodyfile="modules/metric/cxx/metric_template.cxx" bodystart="5" bodyend="17"/>
        <references refid="classmetric__template_1a22f7ac23f74bbabee66b43d9d4aa5de7" compoundref="metric__template_8h" startline="103">name</references>
        <references refid="classmetric__template_1ab7ba181ab8b18f0c079e225512fe083d" compoundref="metric__template_8h" startline="104">run_names</references>
        <references refid="classcproperty_1a31b26b5ffb20bbf8d8ee38e0755a9819" compoundref="property_8h" startline="22" endline="25">cproperty&lt; T, G &gt;::set_getter</references>
        <references refid="classcproperty_1a41a70e8e01c9b1a20b94d2dbf1a6b214" compoundref="property_8h" startline="27" endline="27">cproperty&lt; T, G &gt;::set_object</references>
        <references refid="classcproperty_1af4583ba4cf4ebc53f870a2de8f110da7" compoundref="property_8h" startline="17" endline="20">cproperty&lt; T, G &gt;::set_setter</references>
        <references refid="classmetric__template_1a5f67a91f401da56d4b805beb081a100e" compoundref="metric__template_8h" startline="105">variables</references>
        <referencedby refid="classmetric__template_1ad4020c5c29a7944e9cadd244fd11e952" compoundref="metric__template_8cxx" startline="25" endline="25">clone</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1a647a82cbcca3c315a12cb3f3f906c5c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>metric_template::~metric_template</definition>
        <argsstring>()</argsstring>
        <name>~metric_template</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="78" column="17" bodyfile="modules/metric/cxx/metric_template.cxx" bodystart="19" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1ad4020c5c29a7944e9cadd244fd11e952" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmetric__template" kindref="compound">metric_template</ref> *</type>
        <definition>metric_template * metric_template::clone</definition>
        <argsstring>()</argsstring>
        <name>clone</name>
        <reimplementedby refid="classpagerank__metric_1a3f9c894a12599f3ac78dbf640488e17a">clone</reimplementedby>
        <reimplementedby refid="classaccuracy__metric_1a610c07495aa55a7acd4ac3b9cd19cedc">clone</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="79" column="33" bodyfile="modules/metric/cxx/metric_template.cxx" bodystart="25" bodyend="25"/>
        <references refid="classmetric__template_1a4f076b39d712cc1ed944d25328bcc271" compoundref="metric__template_8cxx" startline="5" endline="17">metric_template</references>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1afb7814ecc901c36ada9b6bd974acab9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void metric_template::register_output</definition>
        <argsstring>(std::string tree, std::string name, T *t)</argsstring>
        <name>register_output</name>
        <param>
          <type>std::string</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="82" column="14" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="82" bodyend="87"/>
        <references refid="classmetric__template_1a22f7ac23f74bbabee66b43d9d4aa5de7" compoundref="metric__template_8h" startline="103">name</references>
        <references refid="namespacetest__experimental__mc20_1a7f7159e9d580b1c745290260dc63e0c3" compoundref="test__experimental__mc20_8py" startline="7">test_experimental_mc20.t</references>
        <referencedby refid="classaccuracy__metric_1a9e33ae7dfbd4edcee007f99f26c90130" compoundref="accuracy_8cxx" startline="7" endline="27">accuracy_metric::define_variables</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1a63bef91cbc8d4212598aa40f028ffa19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void metric_template::write</definition>
        <argsstring>(std::string tree, std::string name, T *t, bool fill=false)</argsstring>
        <name>write</name>
        <param>
          <type>std::string</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fill</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="90" column="14" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="90" bodyend="95"/>
        <references refid="classmetric__template_1a22f7ac23f74bbabee66b43d9d4aa5de7" compoundref="metric__template_8h" startline="103">name</references>
        <references refid="namespacetest__experimental__mc20_1a7f7159e9d580b1c745290260dc63e0c3" compoundref="test__experimental__mc20_8py" startline="7">test_experimental_mc20.t</references>
        <referencedby refid="classaccuracy__metric_1a92d1a978345aeb20733f4d0212129fda" compoundref="accuracy_8cxx" startline="36" endline="50">accuracy_metric::end</referencedby>
        <referencedby refid="classaccuracy__metric_1ad8b35afa20f2c8837be4279db06581bf" compoundref="accuracy_8cxx" startline="29" endline="33">accuracy_metric::event</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1a0d9eaa5a83704589041d08b921c8d680" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void metric_template::define_variables</definition>
        <argsstring>()</argsstring>
        <name>define_variables</name>
        <reimplementedby refid="classpagerank__metric_1a91a690036da4a25dbc3c32e03a07bc7a">define_variables</reimplementedby>
        <reimplementedby refid="classaccuracy__metric_1a9e33ae7dfbd4edcee007f99f26c90130">define_variables</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="97" column="22" bodyfile="modules/metric/cxx/metric_template.cxx" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1a7c79f8e90e0acfe7797ce8a6cc778f63" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void metric_template::define_metric</definition>
        <argsstring>(metric_t *v)</argsstring>
        <name>define_metric</name>
        <reimplementedby refid="classpagerank__metric_1a7ee9e25c68e9178ef983418866b97a26">define_metric</reimplementedby>
        <reimplementedby refid="classaccuracy__metric_1a6842a48f1db5613338dbe0d86fcf9b0b">define_metric</reimplementedby>
        <param>
          <type><ref refid="structmetric__t" kindref="compound">metric_t</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="98" column="22" bodyfile="modules/metric/cxx/metric_template.cxx" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1a9754a4fcfe4752ce8870f7b63d20d78b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void metric_template::event</definition>
        <argsstring>()</argsstring>
        <name>event</name>
        <reimplementedby refid="classpagerank__metric_1a48e9dfa3337470eefd832297c60c39f7">event</reimplementedby>
        <reimplementedby refid="classaccuracy__metric_1ad8b35afa20f2c8837be4279db06581bf">event</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="99" column="22" bodyfile="modules/metric/cxx/metric_template.cxx" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1afa17b3adff9744ff2b25ad4e1443f829" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void metric_template::batch</definition>
        <argsstring>()</argsstring>
        <name>batch</name>
        <reimplementedby refid="classpagerank__metric_1adf136c01307a12dba74f6b075d45a4ad">batch</reimplementedby>
        <reimplementedby refid="classaccuracy__metric_1a51c3a4ab4dc7f8ada5bb4fda24bc41ba">batch</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="100" column="22" bodyfile="modules/metric/cxx/metric_template.cxx" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1abdaf01c257c4d00b3861432f34d10939" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void metric_template::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <reimplementedby refid="classpagerank__metric_1a5645a223f536ec244149aa2c502fef74">end</reimplementedby>
        <reimplementedby refid="classaccuracy__metric_1a92d1a978345aeb20733f4d0212129fda">end</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="101" column="22" bodyfile="modules/metric/cxx/metric_template.cxx" bodystart="37" bodyend="37"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classmetric__template_1a85d83f331257a2bcbaca37f1eb4b5d5c" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void metric_template::set_name</definition>
        <argsstring>(std::string *, metric_template *)</argsstring>
        <name>set_name</name>
        <param>
          <type>std::string *</type>
          <defname>name</defname>
        </param>
        <param>
          <type><ref refid="classmetric__template" kindref="compound">metric_template</ref> *</type>
          <defname>ev</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="123" column="21" bodyfile="modules/metric/cxx/properties.cxx" bodystart="3" bodyend="6"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1a0c0752bec56d2ed585edb6292f77487f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void metric_template::get_name</definition>
        <argsstring>(std::string *, metric_template *)</argsstring>
        <name>get_name</name>
        <param>
          <type>std::string *</type>
          <defname>name</defname>
        </param>
        <param>
          <type><ref refid="classmetric__template" kindref="compound">metric_template</ref> *</type>
          <defname>ev</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="124" column="21" bodyfile="modules/metric/cxx/properties.cxx" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1ad34828d0d75d5b0a656ef881620fbc7c" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void metric_template::set_run_name</definition>
        <argsstring>(std::map&lt; std::string, std::string &gt; *, metric_template *)</argsstring>
        <name>set_run_name</name>
        <param>
          <type>std::map&lt; std::string, std::string &gt; *</type>
          <defname>rn_name</defname>
        </param>
        <param>
          <type><ref refid="classmetric__template" kindref="compound">metric_template</ref> *</type>
          <defname>ev</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="126" column="21" bodyfile="modules/metric/cxx/properties.cxx" bodystart="12" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1a8dd368a685f0ab138ae020ed9ef1b214" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void metric_template::get_run_name</definition>
        <argsstring>(std::map&lt; std::string, std::string &gt; *, metric_template *)</argsstring>
        <name>get_run_name</name>
        <param>
          <type>std::map&lt; std::string, std::string &gt; *</type>
          <defname>rn_name</defname>
        </param>
        <param>
          <type><ref refid="classmetric__template" kindref="compound">metric_template</ref> *</type>
          <defname>ev</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="127" column="21" bodyfile="modules/metric/cxx/properties.cxx" bodystart="34" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1a5209be08253548a7a56bd2f08db31a8c" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void metric_template::set_variables</definition>
        <argsstring>(std::vector&lt; std::string &gt; *, metric_template *)</argsstring>
        <name>set_variables</name>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <defname>rn_name</defname>
        </param>
        <param>
          <type><ref refid="classmetric__template" kindref="compound">metric_template</ref> *</type>
          <defname>ev</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="129" column="21" bodyfile="modules/metric/cxx/properties.cxx" bodystart="38" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1a955eb7a68c413fdcff1d6c5bdba4c5ac" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void metric_template::get_variables</definition>
        <argsstring>(std::vector&lt; std::string &gt; *, metric_template *)</argsstring>
        <name>get_variables</name>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <defname>rn_name</defname>
        </param>
        <param>
          <type><ref refid="classmetric__template" kindref="compound">metric_template</ref> *</type>
          <defname>ev</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="130" column="21" bodyfile="modules/metric/cxx/properties.cxx" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1ae874f408d388c66ddedf7c0484334a85" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void metric_template::construct</definition>
        <argsstring>(std::map&lt; graph_enum, std::vector&lt; variable_t * &gt;&gt; *varx, std::map&lt; graph_enum, std::vector&lt; std::string &gt;&gt; *req, model_template *mdl, graph_t *grx, std::string *mtx)</argsstring>
        <name>construct</name>
        <param>
          <type>std::map&lt; <ref refid="enums_8h_1a71db5b98a8935886920bcc7eaaf49fb9" kindref="member">graph_enum</ref>, std::vector&lt; <ref refid="structvariable__t" kindref="compound">variable_t</ref> * &gt;&gt; *</type>
          <declname>varx</declname>
        </param>
        <param>
          <type>std::map&lt; <ref refid="enums_8h_1a71db5b98a8935886920bcc7eaaf49fb9" kindref="member">graph_enum</ref>, std::vector&lt; std::string &gt;&gt; *</type>
          <declname>req</declname>
        </param>
        <param>
          <type><ref refid="classmodel__template" kindref="compound">model_template</ref> *</type>
          <declname>mdl</declname>
        </param>
        <param>
          <type><ref refid="structgraph__t" kindref="compound">graph_t</ref> *</type>
          <declname>grx</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>mtx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="131" column="21" bodyfile="modules/metric/cxx/base.cxx" bodystart="68" bodyend="123"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmetric__template_1a6df640366841f67134f080372ee9a0c5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmetric__template" kindref="compound">metric_template</ref> *</type>
        <definition>metric_template * metric_template::clone</definition>
        <argsstring>(int)</argsstring>
        <name>clone</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="137" column="25" bodyfile="modules/metric/cxx/metric_template.cxx" bodystart="26" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1a7e4cdb6279597804a6859bbf1cec51ca" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool metric_template::link</definition>
        <argsstring>(model_template *)</argsstring>
        <name>link</name>
        <param>
          <type><ref refid="classmodel__template" kindref="compound">model_template</ref> *</type>
          <defname>mdl</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="138" column="14" bodyfile="modules/metric/cxx/link.cxx" bodystart="4" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1a1f41a3c6cdf02f45c9f4c89a99b9e584" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void metric_template::link</definition>
        <argsstring>(std::string hsx, std::vector&lt; graph_t * &gt; *data, mode_enum mx)</argsstring>
        <name>link</name>
        <param>
          <type>std::string</type>
          <declname>hsx</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structgraph__t" kindref="compound">graph_t</ref> * &gt; *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="enums_8h_1adfa5b6ae994fc9e6e30dd3330929c03f" kindref="member">mode_enum</ref></type>
          <declname>mx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="139" column="14" bodyfile="modules/metric/cxx/link.cxx" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1a422951eb9279ed05c885795ebeed0e5b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void metric_template::execute</definition>
        <argsstring>(metric_t *mtx, metric_template *obj, size_t *prg, std::string *msg)</argsstring>
        <name>execute</name>
        <param>
          <type><ref refid="structmetric__t" kindref="compound">metric_t</ref> *</type>
          <declname>mtx</declname>
        </param>
        <param>
          <type><ref refid="classmetric__template" kindref="compound">metric_template</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>prg</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="140" column="14" bodyfile="modules/metric/cxx/base.cxx" bodystart="125" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1a73b7deb3c69b3e7177183464c89dfc50" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void metric_template::define</definition>
        <argsstring>(std::vector&lt; metric_t * &gt; *vr, std::vector&lt; size_t &gt; *num, std::vector&lt; std::string * &gt; *title, size_t *offset)</argsstring>
        <name>define</name>
        <param>
          <type>std::vector&lt; <ref refid="structmetric__t" kindref="compound">metric_t</ref> * &gt; *</type>
          <declname>vr</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; *</type>
          <declname>num</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string * &gt; *</type>
          <declname>title</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="141" column="14" bodyfile="modules/metric/cxx/base.cxx" bodystart="165" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1a335a5dd4a86a24fd17e981a633cd4df3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t metric_template::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="146" column="16" bodyfile="modules/metric/cxx/base.cxx" bodystart="37" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1acab58c5c5f876a048d45df4b568cb706" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, torch::TensorOptions * &gt;</type>
        <definition>std::map&lt; int, torch::TensorOptions * &gt; metric_template::get_devices</definition>
        <argsstring>()</argsstring>
        <name>get_devices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="148" column="18" bodyfile="modules/metric/cxx/base.cxx" bodystart="4" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classmetric__template_1a416e4204764701d3dbf7b33639ff3a83" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; metric_template::get_kfolds</definition>
        <argsstring>()</argsstring>
        <name>get_kfolds</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/metric/include/templates/metric_template.h" line="149" column="21" bodyfile="modules/metric/cxx/base.cxx" bodystart="17" bodyend="35"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>accuracy_metric</label>
        <link refid="classaccuracy__metric"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>metric_template</label>
        <link refid="classmetric__template"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>pagerank_metric</label>
        <link refid="classpagerank__metric"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>notification</label>
        <link refid="classnotification"/>
      </node>
      <node id="2">
        <label>tools</label>
        <link refid="classtools"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="11">
        <label>cproperty&lt; std::vector&lt; int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>meta</label>
        <link refid="classmeta"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>config</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>run_number</edgelabel>
          <edgelabel>events</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>dsid</edgelabel>
          <edgelabel>nFiles</edgelabel>
          <edgelabel>datasetNumber</edgelabel>
          <edgelabel>totalEvents</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>fileSize</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>LFN</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>inputrange</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>keyword</edgelabel>
          <edgelabel>weights</edgelabel>
          <edgelabel>keywords</edgelabel>
          <edgelabel>fileGUID</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>principalPhysicsGroup</edgelabel>
          <edgelabel>DatasetName</edgelabel>
          <edgelabel>generatorName</edgelabel>
          <edgelabel>productionStep</edgelabel>
          <edgelabel>campaign</edgelabel>
          <edgelabel>projectName</edgelabel>
          <edgelabel>physicsShort</edgelabel>
          <edgelabel>logicalDatasetName</edgelabel>
          <edgelabel>conditionsTag</edgelabel>
          <edgelabel>derivationFormat</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>cross_section_nb</edgelabel>
          <edgelabel>completion</edgelabel>
          <edgelabel>cross_section_fb</edgelabel>
          <edgelabel>ecmEnergy</edgelabel>
          <edgelabel>event_index</edgelabel>
          <edgelabel>sum_of_weights</edgelabel>
          <edgelabel>beam_energy</edgelabel>
          <edgelabel>cross_section_pb</edgelabel>
          <edgelabel>genFiltEff</edgelabel>
          <edgelabel>eventNumber</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>misc</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>inputfiles</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>isMC</edgelabel>
          <edgelabel>found</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>cproperty&lt; unsigned int, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; unsigned int, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>cproperty&lt; std::string, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::string, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>cproperty&lt; double, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; double, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>cproperty&lt; std::vector&lt; double &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; double &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>cproperty&lt; std::map&lt; int, int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::map&lt; int, int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>cproperty&lt; std::map&lt; std::string, std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>cproperty&lt; T, G &gt;</label>
        <link refid="classcproperty"/>
      </node>
      <node id="16">
        <label>cproperty&lt; std::vector&lt; std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>cproperty&lt; std::map&lt; int, std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::map&lt; int, std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="22">
        <label>cproperty&lt; std::map&lt; std::string, std::string &gt;, metric_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, std::string &gt;, metric_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>metric_template</label>
        <link refid="classmetric__template"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>variables</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>meta_data</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>run_names</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>cproperty&lt; bool, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; bool, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>cproperty&lt; std::map&lt; std::string, int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>cproperty&lt; std::vector&lt; std::string &gt;, metric_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; std::string &gt;, metric_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>notification</label>
        <link refid="classnotification"/>
        <childnode refid="4" relation="usage">
          <edgelabel>prefix</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>tools</label>
        <link refid="classtools"/>
      </node>
      <node id="6">
        <label>cproperty&lt; std::string, metric_template &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::string, metric_template &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>cproperty&lt; std::map&lt; std::string, weights_t &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, weights_t &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="modules/metric/include/templates/metric_template.h" line="75" column="1" bodyfile="modules/metric/include/templates/metric_template.h" bodystart="72" bodyend="152"/>
    <listofallmembers>
      <member refid="classmetric__template_1a37e8f76d5fb4b9ff740a0bf59cdbcaed" prot="private" virt="non-virtual"><scope>metric_template</scope><name>_epoch_kfold</name></member>
      <member refid="classmetric__template_1ab7b43d64e4e795a9686c9034ba93b0a6" prot="private" virt="non-virtual"><scope>metric_template</scope><name>_name</name></member>
      <member refid="classmetric__template_1a4797d0ae686986febeba4e91d5a3b4c7" prot="private" virt="non-virtual"><scope>metric_template</scope><name>_outdir</name></member>
      <member refid="classmetric__template_1a52dea13de20c59b9c24b9973fe95aa58" prot="private" virt="non-virtual"><scope>metric_template</scope><name>_run_names</name></member>
      <member refid="classmetric__template_1a5c835f14484ba095e8791d2aef906a56" prot="private" virt="non-virtual"><scope>metric_template</scope><name>_var_type</name></member>
      <member refid="classmetric__template_1acb9051dd3a5cc56fa5ad3a5e19336c50" prot="private" virt="non-virtual"><scope>metric_template</scope><name>_variables</name></member>
      <member refid="classtools_1a408b66ad73b7b4bb962634c14a55b619" prot="public" virt="non-virtual"><scope>metric_template</scope><name>absolute_path</name></member>
      <member refid="classmetric__template_1a7c6cfa5e2b9bee06ed2cb98a87e39f82" prot="private" virt="non-virtual"><scope>metric_template</scope><name>analysis</name></member>
      <member refid="classmetric__template_1afa17b3adff9744ff2b25ad4e1443f829" prot="public" virt="virtual"><scope>metric_template</scope><name>batch</name></member>
      <member refid="classmetric__template_1ad4020c5c29a7944e9cadd244fd11e952" prot="public" virt="virtual"><scope>metric_template</scope><name>clone</name></member>
      <member refid="classmetric__template_1a6df640366841f67134f080372ee9a0c5" prot="private" virt="non-virtual"><scope>metric_template</scope><name>clone</name></member>
      <member refid="classmetric__template_1ae874f408d388c66ddedf7c0484334a85" prot="private" virt="non-virtual"><scope>metric_template</scope><name>construct</name></member>
      <member refid="classtools_1aed9f3247b474a8fb1840860d51cde7ca" prot="public" virt="non-virtual"><scope>metric_template</scope><name>create_path</name></member>
      <member refid="classnotification_1a8dd1ebb578269118b18bf7f0e176bf14" prot="public" virt="non-virtual"><scope>metric_template</scope><name>Debug</name></member>
      <member refid="classnotification_1aa14ded524569ac1d7fd121c161a733be" prot="protected" virt="non-virtual"><scope>metric_template</scope><name>debug_mode</name></member>
      <member refid="classmetric__template_1a73b7deb3c69b3e7177183464c89dfc50" prot="private" virt="non-virtual"><scope>metric_template</scope><name>define</name></member>
      <member refid="classmetric__template_1a7c79f8e90e0acfe7797ce8a6cc778f63" prot="public" virt="virtual"><scope>metric_template</scope><name>define_metric</name></member>
      <member refid="classmetric__template_1a0d9eaa5a83704589041d08b921c8d680" prot="public" virt="virtual"><scope>metric_template</scope><name>define_variables</name></member>
      <member refid="classtools_1a1f8f5e775e758e3d2442a9dd46daf78c" prot="public" virt="non-virtual"><scope>metric_template</scope><name>delete_path</name></member>
      <member refid="classmetric__template_1abdaf01c257c4d00b3861432f34d10939" prot="public" virt="virtual"><scope>metric_template</scope><name>end</name></member>
      <member refid="classtools_1a3d538da5310467c9321b27cd6a75b9af" prot="public" virt="non-virtual"><scope>metric_template</scope><name>ends_with</name></member>
      <member refid="classnotification_1ab0c3843575c157d799e532a9ea5acbd0" prot="public" virt="non-virtual"><scope>metric_template</scope><name>Error</name></member>
      <member refid="classmetric__template_1a9754a4fcfe4752ce8870f7b63d20d78b" prot="public" virt="virtual"><scope>metric_template</scope><name>event</name></member>
      <member refid="classmetric__template_1a422951eb9279ed05c885795ebeed0e5b" prot="private" virt="non-virtual"><scope>metric_template</scope><name>execute</name></member>
      <member refid="classtools_1a86175bf887f3e82780cb72910181961d" prot="public" virt="non-virtual"><scope>metric_template</scope><name>extract</name></member>
      <member refid="classtools_1abce97603aeadeaa04fa6c6ff6c721eda" prot="public" virt="non-virtual"><scope>metric_template</scope><name>flush</name></member>
      <member refid="classnotification_1ae25782afd10b3cb5fffe17afaf4fffc0" prot="public" virt="non-virtual"><scope>metric_template</scope><name>get_debug_mode</name></member>
      <member refid="classmetric__template_1acab58c5c5f876a048d45df4b568cb706" prot="private" virt="non-virtual"><scope>metric_template</scope><name>get_devices</name></member>
      <member refid="classmetric__template_1a416e4204764701d3dbf7b33639ff3a83" prot="private" virt="non-virtual"><scope>metric_template</scope><name>get_kfolds</name></member>
      <member refid="classmetric__template_1a0c0752bec56d2ed585edb6292f77487f" prot="private" virt="non-virtual"><scope>metric_template</scope><name>get_name</name></member>
      <member refid="classnotification_1aa0aad214cf167691e516ecc343306244" prot="public" virt="non-virtual"><scope>metric_template</scope><name>get_prefix</name></member>
      <member refid="classmetric__template_1a8dd368a685f0ab138ae020ed9ef1b214" prot="private" virt="non-virtual"><scope>metric_template</scope><name>get_run_name</name></member>
      <member refid="classnotification_1a3a12e8eaf363a320abee5393436123f0" prot="public" virt="non-virtual"><scope>metric_template</scope><name>get_suppress_info</name></member>
      <member refid="classnotification_1ab53313e9343e9ef6deaefa2bdd3a837a" prot="public" virt="non-virtual"><scope>metric_template</scope><name>get_suppress_warning</name></member>
      <member refid="classmetric__template_1a955eb7a68c413fdcff1d6c5bdba4c5ac" prot="private" virt="non-virtual"><scope>metric_template</scope><name>get_variables</name></member>
      <member refid="classmetric__template_1a0d536be8cceeab272082b34a30404f13" prot="private" virt="non-virtual"><scope>metric_template</scope><name>handle</name></member>
      <member refid="classtools_1ad7229c72cee65da3605c4be82f9b42d4" prot="public" virt="non-virtual"><scope>metric_template</scope><name>has_string</name></member>
      <member refid="classtools_1a13633d4d63c55bcf537ff141e7605f13" prot="public" virt="non-virtual"><scope>metric_template</scope><name>has_value</name></member>
      <member refid="classmetric__template_1a8a958c130d2245c2456b03c007876e7c" prot="private" virt="non-virtual"><scope>metric_template</scope><name>hash_bta</name></member>
      <member refid="classmetric__template_1a0560c591c9b881b49d5e20026b2b8795" prot="private" virt="non-virtual"><scope>metric_template</scope><name>hash_mdl</name></member>
      <member refid="classnotification_1a2ea9e0828e3d323b5bb5cdecc8f018a8" prot="public" virt="non-virtual"><scope>metric_template</scope><name>Info</name></member>
      <member refid="classtools_1a47d3d261edcb898daab56721e18d1e67" prot="public" virt="non-virtual"><scope>metric_template</scope><name>is_file</name></member>
      <member refid="classmetric__template_1a7e4cdb6279597804a6859bbf1cec51ca" prot="private" virt="non-virtual"><scope>metric_template</scope><name>link</name></member>
      <member refid="classmetric__template_1a1f41a3c6cdf02f45c9f4c89a99b9e584" prot="private" virt="non-virtual"><scope>metric_template</scope><name>link</name></member>
      <member refid="classmetric__template_1aa3bb390a16ff2396e314782a750acc49" prot="private" virt="non-virtual"><scope>metric_template</scope><name>lnks</name></member>
      <member refid="classtools_1a5ab0f2cc351dd97951358ebe19e9c18d" prot="public" virt="non-virtual"><scope>metric_template</scope><name>ls</name></member>
      <member refid="classnotification_1a47e2d300e33c44a24b0c51d9e9a83914" prot="public" virt="non-virtual"><scope>metric_template</scope><name>Message</name></member>
      <member refid="classmetric__template_1a8f90d670c9e752f9811366bbf5e7eba0" prot="public" virt="non-virtual"><scope>metric_template</scope><name>meta_data</name></member>
      <member refid="classmetric__template_1a4f076b39d712cc1ed944d25328bcc271" prot="public" virt="non-virtual"><scope>metric_template</scope><name>metric_template</name></member>
      <member refid="classmetric__template_1a22f7ac23f74bbabee66b43d9d4aa5de7" prot="public" virt="non-virtual"><scope>metric_template</scope><name>name</name></member>
      <member refid="classnotification_1a3ec5fe2d8db29cf32853858ff58fdbd7" prot="public" virt="non-virtual"><scope>metric_template</scope><name>notification</name></member>
      <member refid="classnotification_1a913d4c8a7736df782f900dd436cfeaa6" prot="protected" virt="non-virtual"><scope>metric_template</scope><name>prefix</name></member>
      <member refid="classtools_1a4450b1e48193bef904b44f7a90aaee98" prot="public" virt="non-virtual"><scope>metric_template</scope><name>put</name></member>
      <member refid="classmetric__template_1afb7814ecc901c36ada9b6bd974acab9a" prot="public" virt="non-virtual"><scope>metric_template</scope><name>register_output</name></member>
      <member refid="classtools_1a9265b9f87bde50d0352c6cd1959ae5fc" prot="public" virt="non-virtual"><scope>metric_template</scope><name>rename</name></member>
      <member refid="classtools_1aeae88ebd7116d59008600f0723716dba" prot="public" virt="non-virtual"><scope>metric_template</scope><name>replace</name></member>
      <member refid="classmetric__template_1ab7ba181ab8b18f0c079e225512fe083d" prot="public" virt="non-virtual"><scope>metric_template</scope><name>run_names</name></member>
      <member refid="classnotification_1a5a69a50032f5dcf38bed2bb27dc048fc" prot="public" virt="non-virtual"><scope>metric_template</scope><name>set_debug_mode</name></member>
      <member refid="classmetric__template_1a85d83f331257a2bcbaca37f1eb4b5d5c" prot="private" virt="non-virtual"><scope>metric_template</scope><name>set_name</name></member>
      <member refid="classnotification_1a575db6b2e3b67a7d679205600d83b576" prot="public" virt="non-virtual"><scope>metric_template</scope><name>set_prefix</name></member>
      <member refid="classmetric__template_1ad34828d0d75d5b0a656ef881620fbc7c" prot="private" virt="non-virtual"><scope>metric_template</scope><name>set_run_name</name></member>
      <member refid="classnotification_1a58eec7023935cff9332ce21e58fc3f5a" prot="public" virt="non-virtual"><scope>metric_template</scope><name>set_suppress_info</name></member>
      <member refid="classnotification_1a9bb77ba73a5f25af292e9eea8a8de970" prot="public" virt="non-virtual"><scope>metric_template</scope><name>set_suppress_warning</name></member>
      <member refid="classmetric__template_1a5209be08253548a7a56bd2f08db31a8c" prot="private" virt="non-virtual"><scope>metric_template</scope><name>set_variables</name></member>
      <member refid="classmetric__template_1a335a5dd4a86a24fd17e981a633cd4df3" prot="private" virt="non-virtual"><scope>metric_template</scope><name>size</name></member>
      <member refid="classtools_1a352a6965f2f3c768f0f4ecd1f978fcc0" prot="public" virt="non-virtual"><scope>metric_template</scope><name>split</name></member>
      <member refid="classtools_1a7b784121d8b368a64995feddc7083469" prot="public" virt="non-virtual"><scope>metric_template</scope><name>sum</name></member>
      <member refid="classnotification_1a77a99c28092cf053b395805c75dde6da" prot="protected" virt="non-virtual"><scope>metric_template</scope><name>suppress_info</name></member>
      <member refid="classnotification_1ab2d4ba20d7bc164eece8982b413eab13" prot="protected" virt="non-virtual"><scope>metric_template</scope><name>suppress_warnings</name></member>
      <member refid="classtools_1afd037c109d75a9f119ec042e1ba922d9" prot="public" virt="non-virtual"><scope>metric_template</scope><name>to_string</name></member>
      <member refid="classtools_1a882f089d855dc4b3e0b60c591e11b092" prot="public" virt="non-virtual"><scope>metric_template</scope><name>to_string</name></member>
      <member refid="classtools_1af0028ec6242448428f7c548b6e7cb714" prot="public" virt="non-virtual"><scope>metric_template</scope><name>tools</name></member>
      <member refid="classtools_1a69be8c55f9fd7036080317a2ce98d4de" prot="public" virt="non-virtual"><scope>metric_template</scope><name>trim</name></member>
      <member refid="classtools_1ab46f1f3892604cb366b861cb54ce30e0" prot="public" virt="non-virtual"><scope>metric_template</scope><name>type_name</name></member>
      <member refid="classmetric__template_1a5f67a91f401da56d4b805beb081a100e" prot="public" virt="non-virtual"><scope>metric_template</scope><name>variables</name></member>
      <member refid="classnotification_1ab758dafbb449e142fb68e11c0470b5c9" prot="public" virt="non-virtual"><scope>metric_template</scope><name>Warning</name></member>
      <member refid="classmetric__template_1a63bef91cbc8d4212598aa40f028ffa19" prot="public" virt="non-virtual"><scope>metric_template</scope><name>write</name></member>
      <member refid="classmetric__template_1a647a82cbcca3c315a12cb3f3f906c5c8" prot="public" virt="virtual"><scope>metric_template</scope><name>~metric_template</name></member>
      <member refid="classnotification_1a0b7272463b149418caf592e398cae64e" prot="public" virt="non-virtual"><scope>metric_template</scope><name>~notification</name></member>
      <member refid="classtools_1a04762ddd5cc588520c89a387341f77f4" prot="public" virt="non-virtual"><scope>metric_template</scope><name>~tools</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
