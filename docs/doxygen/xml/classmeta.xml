<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classmeta" kind="class" language="C++" prot="public">
    <compoundname>meta</compoundname>
    <basecompoundref refid="classtools" prot="public" virt="non-virtual">tools</basecompoundref>
    <basecompoundref refid="classnotification" prot="public" virt="non-virtual">notification</basecompoundref>
    <includes refid="meta_2include_2meta_2meta_8h" local="no">meta.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmeta_1ab0e42b287be5935f4a673ddd783ec498" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; bool, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;bool, meta&gt; meta::isMC</definition>
        <argsstring></argsstring>
        <name>isMC</name>
        <briefdescription>
<para>Property: Indicates whether the dataset is Monte Carlo (MC) simulation (true) or real data (false). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="86" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="86" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1ad3569d07c83c22f1c98f923b3fe08ce3" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; bool, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;bool, meta&gt; meta::found</definition>
        <argsstring></argsstring>
        <name>found</name>
        <briefdescription>
<para>Property: Indicates whether the required metadata was successfully found and loaded. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="87" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="87" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1aca08c4a4129c1d34307962823bd986f7" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; double, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;double, meta&gt; meta::eventNumber</definition>
        <argsstring></argsstring>
        <name>eventNumber</name>
        <briefdescription>
<para>Property: The number of events in the dataset or a specific file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="88" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="88" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1abb58b9418610e148e26b0d9a7968bc29" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; double, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;double, meta&gt; meta::event_index</definition>
        <argsstring></argsstring>
        <name>event_index</name>
        <briefdescription>
<para>Property: An index related to events, possibly for iteration or identification. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="89" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="89" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a4289afe6a2c6b19a57802eb613a3cef3" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; double, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;double, meta&gt; meta::totalSize</definition>
        <argsstring></argsstring>
        <name>totalSize</name>
        <briefdescription>
<para>Property: The total size of the dataset, potentially in bytes or some other unit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="90" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="90" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a82665b5b47b4589ce9911005967fd8a4" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; double, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;double, meta&gt; meta::kfactor</definition>
        <argsstring></argsstring>
        <name>kfactor</name>
        <briefdescription>
<para>Property: The k-factor, a theoretical correction factor used in physics calculations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="91" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="91" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a3cdfb2156bd753446f3ebe4eb058e3a2" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; double, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;double, meta&gt; meta::ecmEnergy</definition>
        <argsstring></argsstring>
        <name>ecmEnergy</name>
        <briefdescription>
<para>Property: The center-of-mass energy of the collision (e.g., in GeV or TeV). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="92" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="92" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a997b8c3386945b17284b0d1b6c7c60ba" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; double, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;double, meta&gt; meta::genFiltEff</definition>
        <argsstring></argsstring>
        <name>genFiltEff</name>
        <briefdescription>
<para>Property: The generator filter efficiency for MC simulations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="93" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="93" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a8508206c904b6da70cbf3442bdc11b57" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; double, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;double, meta&gt; meta::completion</definition>
        <argsstring></argsstring>
        <name>completion</name>
        <briefdescription>
<para>Property: A measure of the dataset&apos;s processing completion, if applicable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="94" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="94" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a4541d9a502b52f390bfe192452d29d8c" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; double, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;double, meta&gt; meta::beam_energy</definition>
        <argsstring></argsstring>
        <name>beam_energy</name>
        <briefdescription>
<para>Property: The energy of the colliding beams. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="95" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="95" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a4bf84d1d9bafa83e8cf16d68e970fdbd" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; double, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;double, meta&gt; meta::cross_section_nb</definition>
        <argsstring></argsstring>
        <name>cross_section_nb</name>
        <briefdescription>
<para>Property: The physics process cross-section in nanobarns (nb). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="97" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="97" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a8132a07c71be0663c9dd37aa683e52be" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; double, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;double, meta&gt; meta::cross_section_fb</definition>
        <argsstring></argsstring>
        <name>cross_section_fb</name>
        <briefdescription>
<para>Property: The physics process cross-section in femtobarns (fb). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="98" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="98" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a0afd4567f1bba1c0043d38217510bcf3" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; double, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;double, meta&gt; meta::cross_section_pb</definition>
        <argsstring></argsstring>
        <name>cross_section_pb</name>
        <briefdescription>
<para>Property: The physics process cross-section in picobarns (pb). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="99" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="99" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a4b4f867f32918d904c2c83e07d5a0914" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; double, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;double, meta&gt; meta::campaign_luminosity</definition>
        <argsstring></argsstring>
        <name>campaign_luminosity</name>
        <briefdescription>
<para>Property: The integrated luminosity of the data-taking campaign. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="101" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="101" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1aac7753a039608875cd5a9ac66700e587" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; double, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;double, meta&gt; meta::sum_of_weights</definition>
        <argsstring></argsstring>
        <name>sum_of_weights</name>
        <briefdescription>
<para>Property: The sum of event weights, crucial for MC normalization. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="102" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="102" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a2b29b1d9fb17658c49c5f34adb523031" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; unsigned int, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;unsigned int, meta&gt; meta::dsid</definition>
        <argsstring></argsstring>
        <name>dsid</name>
        <briefdescription>
<para>Property: The Dataset Identifier (DSID), a unique number for the dataset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="104" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="104" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
        <referencedby refid="classmeta_1a24d8657dbb9d0d8903725ee01fe22c14" compoundref="meta_8cxx" startline="226" endline="272">scan_sow</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1aa777f0fddc0be5b510c7f6714acfc1a1" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; unsigned int, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;unsigned int, meta&gt; meta::nFiles</definition>
        <argsstring></argsstring>
        <name>nFiles</name>
        <briefdescription>
<para>Property: The number of files associated with this dataset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="105" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="105" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1acf1fa18515c2dbf69475063ba348c0a6" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; unsigned int, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;unsigned int, meta&gt; meta::totalEvents</definition>
        <argsstring></argsstring>
        <name>totalEvents</name>
        <briefdescription>
<para>Property: The total number of events across all files in the dataset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="106" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="106" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1aaf40f206f3498485c0cbc8611f9cb1e1" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; unsigned int, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;unsigned int, meta&gt; meta::datasetNumber</definition>
        <argsstring></argsstring>
        <name>datasetNumber</name>
        <briefdescription>
<para>Property: Another numerical identifier for the dataset, possibly synonymous with DSID. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="107" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="107" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a68a242a824761379c015193c918da1f9" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::derivationFormat</definition>
        <argsstring></argsstring>
        <name>derivationFormat</name>
        <briefdescription>
<para>Property: The format of the derived data (e.g., DAOD_PHYS). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="109" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="109" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a6de8b2b6198e5ea010938d5a315f0090" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::AMITag</definition>
        <argsstring></argsstring>
        <name>AMITag</name>
        <briefdescription>
<para>Property: The AMI (ATLAS Metadata Interface) tag for the dataset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="110" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="110" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a4e5b2648fd0c6ea311c759254377cac5" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::generators</definition>
        <argsstring></argsstring>
        <name>generators</name>
        <briefdescription>
<para>Property: Information about the Monte Carlo event generators used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="111" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="111" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1adfd916ea2a0fdbe3f55de09f34d76010" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::identifier</definition>
        <argsstring></argsstring>
        <name>identifier</name>
        <briefdescription>
<para>Property: A generic string identifier for the metadata or dataset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="112" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="112" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1af953a7a7492880e56af8154554f462e7" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::DatasetName</definition>
        <argsstring></argsstring>
        <name>DatasetName</name>
        <briefdescription>
<para>Property: The human-readable name of the dataset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="113" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="113" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1aeac2dd9165bfccff2d47357ff4ff75d1" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::prodsysStatus</definition>
        <argsstring></argsstring>
        <name>prodsysStatus</name>
        <briefdescription>
<para>Property: The status of the dataset in the production system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="114" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="114" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a142900f4130114e6a0861c49e3216776" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::dataType</definition>
        <argsstring></argsstring>
        <name>dataType</name>
        <briefdescription>
<para>Property: The type of data (e.g., &quot;mc&quot;, &quot;data&quot;). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="115" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="115" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a010d7051430c846fca8edf3a77833b22" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::version</definition>
        <argsstring></argsstring>
        <name>version</name>
        <briefdescription>
<para>Property: Version string for the dataset or metadata schema. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="116" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="116" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1ad949489e1cdf85496e2bf51d7b315574" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::PDF</definition>
        <argsstring></argsstring>
        <name>PDF</name>
        <briefdescription>
<para>Property: Information about the Parton Density Function (PDF) used in MC generation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="117" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="117" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1af733265ff2b94accdb80bd6e5198a5c3" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::AtlasRelease</definition>
        <argsstring></argsstring>
        <name>AtlasRelease</name>
        <briefdescription>
<para>Property: The ATLAS software release version used for processing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="118" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="118" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1abda331442a20a39a7e71acab9f1a541d" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::principalPhysicsGroup</definition>
        <argsstring></argsstring>
        <name>principalPhysicsGroup</name>
        <briefdescription>
<para>Property: The main physics group associated with this dataset (e.g., &quot;SM&quot;, &quot;SUSY&quot;). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="119" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="119" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a39413e5635d945732a86577ff392ac8a" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::physicsShort</definition>
        <argsstring></argsstring>
        <name>physicsShort</name>
        <briefdescription>
<para>Property: A short description of the physics process or analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="120" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="120" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1aa86326034f1f74557108d37b4914c621" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::generatorName</definition>
        <argsstring></argsstring>
        <name>generatorName</name>
        <briefdescription>
<para>Property: The specific name of the MC event generator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="121" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="121" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a25eb3a339b878a630b7fe0c6aacaea32" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::geometryVersion</definition>
        <argsstring></argsstring>
        <name>geometryVersion</name>
        <briefdescription>
<para>Property: The version of the detector geometry simulation used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="122" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="122" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1af7aeab02c2153871a4aa08eb8e114094" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::conditionsTag</definition>
        <argsstring></argsstring>
        <name>conditionsTag</name>
        <briefdescription>
<para>Property: The tag for the detector conditions database. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="123" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="123" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a3fc75bdbf1e75744c990a50b21c952f3" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::generatorTune</definition>
        <argsstring></argsstring>
        <name>generatorTune</name>
        <briefdescription>
<para>Property: The specific tune (parameter set) of the MC generator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="124" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="124" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1af3037bcdf7da061d55b6c6e613763460" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::amiStatus</definition>
        <argsstring></argsstring>
        <name>amiStatus</name>
        <briefdescription>
<para>Property: The status of the dataset in the AMI catalog. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="125" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="125" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a94f672065939d8c29551e5ccf980aacb" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::beamType</definition>
        <argsstring></argsstring>
        <name>beamType</name>
        <briefdescription>
<para>Property: The type of colliding beams (e.g., &quot;pp&quot;, &quot;PbPb&quot;). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="126" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="126" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1ab03a527e6de925239dbee8b6ddea7f46" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::productionStep</definition>
        <argsstring></argsstring>
        <name>productionStep</name>
        <briefdescription>
<para>Property: The step in the data production chain (e.g., &quot;recon&quot;, &quot;merge&quot;). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="127" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="127" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a5f6cf07c9584e16c2d79fbcc53cebeba" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::projectName</definition>
        <argsstring></argsstring>
        <name>projectName</name>
        <briefdescription>
<para>Property: The name of the project this dataset belongs to (e.g., &quot;mc16_13TeV&quot;). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="128" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="128" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1af80a1704ac18b80792418f212fa495e8" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::statsAlgorithm</definition>
        <argsstring></argsstring>
        <name>statsAlgorithm</name>
        <briefdescription>
<para>Property: Algorithm used for statistical combination or analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="129" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="129" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1aebee62ddee4e73ad27b1d79a78222275" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::genFilterNames</definition>
        <argsstring></argsstring>
        <name>genFilterNames</name>
        <briefdescription>
<para>Property: Names of any generator-level filters applied. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="130" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="130" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1aa57891adfc8a716cb3ba2c19362e3fcf" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::file_type</definition>
        <argsstring></argsstring>
        <name>file_type</name>
        <briefdescription>
<para>Property: The type of the file (e.g., &quot;ROOT&quot;, &quot;HDF5&quot;). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="131" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="131" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a6d78fc69df28f8b5673235084ee32937" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::sample_name</definition>
        <argsstring></argsstring>
        <name>sample_name</name>
        <briefdescription>
<para>Property: A user-defined name for the sample. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="132" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="132" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a41296b78a33bd0ebaa58626afaa763ca" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::logicalDatasetName</definition>
        <argsstring></argsstring>
        <name>logicalDatasetName</name>
        <briefdescription>
<para>Property: The Logical Dataset Name (LFN) as used in grid systems. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="133" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="133" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1ad5307d12fa5da19dc8e938f76705bd00" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::string, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::string, meta&gt; meta::campaign</definition>
        <argsstring></argsstring>
        <name>campaign</name>
        <briefdescription>
<para>Property: The data-taking or simulation campaign (e.g., &quot;mc16a&quot;, &quot;Run2&quot;). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="134" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="134" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a14abb252cb3ee7637b8e7530f30b966b" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::vector&lt; std::string &gt;, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::vector&lt;std::string&gt;, meta&gt; meta::keywords</definition>
        <argsstring></argsstring>
        <name>keywords</name>
        <briefdescription>
<para>Property: A list of keywords associated with the dataset. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="136" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="136" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a25f9eca600500121ca02bc09eb6db3c1" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::vector&lt; std::string &gt;, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::vector&lt;std::string&gt;, meta&gt; meta::weights</definition>
        <argsstring></argsstring>
        <name>weights</name>
        <briefdescription>
<para>Property: A list of weight names or definitions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="137" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="137" bodyend="-1"/>
        <referencedby refid="classsimply__plot_1_1_data_x_1a41f0e58c621248ecb74fbe1deb30cc7e" compoundref="simply__plot_8py" startline="538" endline="544">simply_plot.DataX.hist</referencedby>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a1f71374707a87ef0efe19d0005f240a2" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::vector&lt; std::string &gt;, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::vector&lt;std::string&gt;, meta&gt; meta::keyword</definition>
        <argsstring></argsstring>
        <name>keyword</name>
        <briefdescription>
<para>Property: (Possibly redundant with &apos;keywords&apos;) A list of keywords. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="138" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="138" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1ad5392a640da7ecda23d616ca22ea109b" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::vector&lt; std::string &gt;, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::vector&lt;std::string&gt;, meta&gt; meta::fileGUID</definition>
        <argsstring></argsstring>
        <name>fileGUID</name>
        <briefdescription>
<para>Property: A list of Globally Unique Identifiers (GUIDs) for the files. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="139" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="139" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a01d9d7ee975cf69b695309d3c301d16b" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::vector&lt; int &gt;, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::vector&lt;int&gt;, meta&gt; meta::events</definition>
        <argsstring></argsstring>
        <name>events</name>
        <briefdescription>
<para>Property: A list of event counts, possibly per file or run. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="141" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="141" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a21c40d9f0907f6e56330201ffd5fcc05" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::vector&lt; int &gt;, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::vector&lt;int&gt;, meta&gt; meta::run_number</definition>
        <argsstring></argsstring>
        <name>run_number</name>
        <briefdescription>
<para>Property: A list of run numbers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="142" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="142" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a228714ffad528afa7800be63c9767718" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::vector&lt; double &gt;, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::vector&lt;double&gt;, meta&gt; meta::fileSize</definition>
        <argsstring></argsstring>
        <name>fileSize</name>
        <briefdescription>
<para>Property: A list of file sizes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="143" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="143" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a7a108860a95134ea983e9a78185e75d7" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::map&lt; int, int &gt;, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::map&lt;int, int&gt;, meta&gt; meta::inputrange</definition>
        <argsstring></argsstring>
        <name>inputrange</name>
        <briefdescription>
<para>Property: A map defining input ranges, possibly for event processing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="145" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="145" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a9b71bf1793e1eb5f897a3c9de0e63583" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::map&lt; int, std::string &gt;, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::map&lt;int, std::string&gt;, meta&gt; meta::inputfiles</definition>
        <argsstring></argsstring>
        <name>inputfiles</name>
        <briefdescription>
<para>Property: A map linking an index to input file names/paths. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="146" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="146" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a041bd996ff676eff47aa6a8afb9731ac" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::map&lt; std::string, int &gt;, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::map&lt;std::string, int&gt;, meta&gt; meta::LFN</definition>
        <argsstring></argsstring>
        <name>LFN</name>
        <briefdescription>
<para>Property: A map from Logical File Names (LFNs) to an integer (e.g., count or index). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="148" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="148" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1acd9e0f928ee90bf84d5cec534fff2dda" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::map&lt; std::string, <ref refid="structweights__t" kindref="compound">weights_t</ref> &gt;, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::map&lt;std::string, weights_t&gt;, meta&gt; meta::misc</definition>
        <argsstring></argsstring>
        <name>misc</name>
        <briefdescription>
<para>Property: A map for miscellaneous weights or related information, using <computeroutput><ref refid="structweights__t" kindref="compound">weights_t</ref></computeroutput> struct. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="149" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="149" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a93116e7174fe68d48b46f00b82a2173a" prot="public" static="no" mutable="no">
        <type><ref refid="classcproperty" kindref="compound">cproperty</ref>&lt; std::map&lt; std::string, std::string &gt;, <ref refid="classmeta" kindref="compound">meta</ref> &gt;</type>
        <definition>cproperty&lt;std::map&lt;std::string, std::string&gt;, meta&gt; meta::config</definition>
        <argsstring></argsstring>
        <name>config</name>
        <briefdescription>
<para>Property: A map for general configuration settings as key-value string pairs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="151" column="15" bodyfile="modules/meta/include/meta/meta.h" bodystart="151" bodyend="-1"/>
        <referencedby refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" compoundref="meta_8cxx" startline="4" endline="126">meta</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmeta_1a117cd8d86f4825219fead046cca0eebe" prot="private" static="no" mutable="no">
        <type>rapidjson::Document *</type>
        <definition>rapidjson::Document* meta::rpd</definition>
        <argsstring></argsstring>
        <name>rpd</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>&lt; Private access specifier for the following members. </para>
        </briefdescription>
        <detaileddescription>
<para>Pointer to a RapidJSON document object, used for parsing JSON metadata. Initialized to nullptr. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="154" column="25" bodyfile="modules/meta/include/meta/meta.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1a1585a495eeb14e3c830f2d477587f81f" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string meta::metacache_path</definition>
        <argsstring></argsstring>
        <name>metacache_path</name>
        <briefdescription>
<para>String storing the path to a metadata cache, if used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="155" column="17" bodyfile="modules/meta/include/meta/meta.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1ade6569ebc5a94b9772bdc807ebe4da1a" prot="private" static="no" mutable="no">
        <type><ref refid="structmeta__t" kindref="compound">meta_t</ref></type>
        <definition>meta_t meta::meta_data</definition>
        <argsstring></argsstring>
        <name>meta_data</name>
        <briefdescription>
<para>Instance of <computeroutput><ref refid="structmeta__t" kindref="compound">meta_t</ref></computeroutput> struct, likely holding the raw or processed metadata values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="156" column="12" bodyfile="modules/meta/include/meta/meta.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmeta_1af96a76a63f402195b866be4dbadf14a4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structfolds__t" kindref="compound">folds_t</ref> &gt; *</type>
        <definition>std::vector&lt;folds_t&gt;* meta::folds</definition>
        <argsstring></argsstring>
        <name>folds</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Pointer to a vector of <computeroutput><ref refid="structfolds__t" kindref="compound">folds_t</ref></computeroutput> structures, possibly for k-fold data. Initialized to nullptr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="165" column="17" bodyfile="modules/meta/include/meta/meta.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmeta_1a16a8ca527d3bb66711ffa93078d4e9de" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class analysis</definition>
        <argsstring></argsstring>
        <name>analysis</name>
        <briefdescription>
<para>Declares the <computeroutput>analysis</computeroutput> class as a friend, allowing it to access private members of <computeroutput>meta</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="158" column="5" bodyfile="modules/meta/include/meta/meta.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>meta::meta</definition>
        <argsstring>()</argsstring>
        <name>meta</name>
        <briefdescription>
<para>&lt; Public access specifier for the following members. </para>
        </briefdescription>
        <detaileddescription>
<para>Constructor for the <computeroutput>meta</computeroutput> class. Initializes a new instance of the <computeroutput>meta</computeroutput> class. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="42" column="5" bodyfile="modules/meta/cxx/meta.cxx" bodystart="4" bodyend="126"/>
        <references refid="classmeta_1af3037bcdf7da061d55b6c6e613763460" compoundref="meta_2include_2meta_2meta_8h" startline="125">amiStatus</references>
        <references refid="classmeta_1a6de8b2b6198e5ea010938d5a315f0090" compoundref="meta_2include_2meta_2meta_8h" startline="110">AMITag</references>
        <references refid="classmeta_1af733265ff2b94accdb80bd6e5198a5c3" compoundref="meta_2include_2meta_2meta_8h" startline="118">AtlasRelease</references>
        <references refid="classmeta_1a4541d9a502b52f390bfe192452d29d8c" compoundref="meta_2include_2meta_2meta_8h" startline="95">beam_energy</references>
        <references refid="classmeta_1a94f672065939d8c29551e5ccf980aacb" compoundref="meta_2include_2meta_2meta_8h" startline="126">beamType</references>
        <references refid="classmeta_1ad5307d12fa5da19dc8e938f76705bd00" compoundref="meta_2include_2meta_2meta_8h" startline="134">campaign</references>
        <references refid="classmeta_1a4b4f867f32918d904c2c83e07d5a0914" compoundref="meta_2include_2meta_2meta_8h" startline="101">campaign_luminosity</references>
        <references refid="classmeta_1a8508206c904b6da70cbf3442bdc11b57" compoundref="meta_2include_2meta_2meta_8h" startline="94">completion</references>
        <references refid="classmeta_1af7aeab02c2153871a4aa08eb8e114094" compoundref="meta_2include_2meta_2meta_8h" startline="123">conditionsTag</references>
        <references refid="classmeta_1a93116e7174fe68d48b46f00b82a2173a" compoundref="meta_2include_2meta_2meta_8h" startline="151">config</references>
        <references refid="classmeta_1a8132a07c71be0663c9dd37aa683e52be" compoundref="meta_2include_2meta_2meta_8h" startline="98">cross_section_fb</references>
        <references refid="classmeta_1a4bf84d1d9bafa83e8cf16d68e970fdbd" compoundref="meta_2include_2meta_2meta_8h" startline="97">cross_section_nb</references>
        <references refid="classmeta_1a0afd4567f1bba1c0043d38217510bcf3" compoundref="meta_2include_2meta_2meta_8h" startline="99">cross_section_pb</references>
        <references refid="classmeta_1af953a7a7492880e56af8154554f462e7" compoundref="meta_2include_2meta_2meta_8h" startline="113">DatasetName</references>
        <references refid="classmeta_1aaf40f206f3498485c0cbc8611f9cb1e1" compoundref="meta_2include_2meta_2meta_8h" startline="107">datasetNumber</references>
        <references refid="classmeta_1a142900f4130114e6a0861c49e3216776" compoundref="meta_2include_2meta_2meta_8h" startline="115">dataType</references>
        <references refid="classmeta_1a68a242a824761379c015193c918da1f9" compoundref="meta_2include_2meta_2meta_8h" startline="109">derivationFormat</references>
        <references refid="classmeta_1a2b29b1d9fb17658c49c5f34adb523031" compoundref="meta_2include_2meta_2meta_8h" startline="104">dsid</references>
        <references refid="classmeta_1a3cdfb2156bd753446f3ebe4eb058e3a2" compoundref="meta_2include_2meta_2meta_8h" startline="92">ecmEnergy</references>
        <references refid="classmeta_1abb58b9418610e148e26b0d9a7968bc29" compoundref="meta_2include_2meta_2meta_8h" startline="89">event_index</references>
        <references refid="classmeta_1aca08c4a4129c1d34307962823bd986f7" compoundref="meta_2include_2meta_2meta_8h" startline="88">eventNumber</references>
        <references refid="classmeta_1a01d9d7ee975cf69b695309d3c301d16b" compoundref="meta_2include_2meta_2meta_8h" startline="141">events</references>
        <references refid="classmeta_1aa57891adfc8a716cb3ba2c19362e3fcf" compoundref="meta_2include_2meta_2meta_8h" startline="131">file_type</references>
        <references refid="classmeta_1ad5392a640da7ecda23d616ca22ea109b" compoundref="meta_2include_2meta_2meta_8h" startline="139">fileGUID</references>
        <references refid="classmeta_1a228714ffad528afa7800be63c9767718" compoundref="meta_2include_2meta_2meta_8h" startline="143">fileSize</references>
        <references refid="classmeta_1ad3569d07c83c22f1c98f923b3fe08ce3" compoundref="meta_2include_2meta_2meta_8h" startline="87">found</references>
        <references refid="classmeta_1aa86326034f1f74557108d37b4914c621" compoundref="meta_2include_2meta_2meta_8h" startline="121">generatorName</references>
        <references refid="classmeta_1a4e5b2648fd0c6ea311c759254377cac5" compoundref="meta_2include_2meta_2meta_8h" startline="111">generators</references>
        <references refid="classmeta_1a3fc75bdbf1e75744c990a50b21c952f3" compoundref="meta_2include_2meta_2meta_8h" startline="124">generatorTune</references>
        <references refid="classmeta_1a997b8c3386945b17284b0d1b6c7c60ba" compoundref="meta_2include_2meta_2meta_8h" startline="93">genFiltEff</references>
        <references refid="classmeta_1aebee62ddee4e73ad27b1d79a78222275" compoundref="meta_2include_2meta_2meta_8h" startline="130">genFilterNames</references>
        <references refid="classmeta_1a25eb3a339b878a630b7fe0c6aacaea32" compoundref="meta_2include_2meta_2meta_8h" startline="122">geometryVersion</references>
        <references refid="classmeta_1adfd916ea2a0fdbe3f55de09f34d76010" compoundref="meta_2include_2meta_2meta_8h" startline="112">identifier</references>
        <references refid="classmeta_1a9b71bf1793e1eb5f897a3c9de0e63583" compoundref="meta_2include_2meta_2meta_8h" startline="146">inputfiles</references>
        <references refid="classmeta_1a7a108860a95134ea983e9a78185e75d7" compoundref="meta_2include_2meta_2meta_8h" startline="145">inputrange</references>
        <references refid="classmeta_1ab0e42b287be5935f4a673ddd783ec498" compoundref="meta_2include_2meta_2meta_8h" startline="86">isMC</references>
        <references refid="classmeta_1a1f71374707a87ef0efe19d0005f240a2" compoundref="meta_2include_2meta_2meta_8h" startline="138">keyword</references>
        <references refid="classmeta_1a14abb252cb3ee7637b8e7530f30b966b" compoundref="meta_2include_2meta_2meta_8h" startline="136">keywords</references>
        <references refid="classmeta_1a82665b5b47b4589ce9911005967fd8a4" compoundref="meta_2include_2meta_2meta_8h" startline="91">kfactor</references>
        <references refid="classmeta_1a041bd996ff676eff47aa6a8afb9731ac" compoundref="meta_2include_2meta_2meta_8h" startline="148">LFN</references>
        <references refid="classmeta_1a41296b78a33bd0ebaa58626afaa763ca" compoundref="meta_2include_2meta_2meta_8h" startline="133">logicalDatasetName</references>
        <references refid="classmeta_1acd9e0f928ee90bf84d5cec534fff2dda" compoundref="meta_2include_2meta_2meta_8h" startline="149">misc</references>
        <references refid="classmeta_1aa777f0fddc0be5b510c7f6714acfc1a1" compoundref="meta_2include_2meta_2meta_8h" startline="105">nFiles</references>
        <references refid="classmeta_1ad949489e1cdf85496e2bf51d7b315574" compoundref="meta_2include_2meta_2meta_8h" startline="117">PDF</references>
        <references refid="classmeta_1a39413e5635d945732a86577ff392ac8a" compoundref="meta_2include_2meta_2meta_8h" startline="120">physicsShort</references>
        <references refid="classnotification_1a913d4c8a7736df782f900dd436cfeaa6" compoundref="notification_8h" startline="126">notification::prefix</references>
        <references refid="classmeta_1abda331442a20a39a7e71acab9f1a541d" compoundref="meta_2include_2meta_2meta_8h" startline="119">principalPhysicsGroup</references>
        <references refid="classmeta_1aeac2dd9165bfccff2d47357ff4ff75d1" compoundref="meta_2include_2meta_2meta_8h" startline="114">prodsysStatus</references>
        <references refid="classmeta_1ab03a527e6de925239dbee8b6ddea7f46" compoundref="meta_2include_2meta_2meta_8h" startline="127">productionStep</references>
        <references refid="classmeta_1a5f6cf07c9584e16c2d79fbcc53cebeba" compoundref="meta_2include_2meta_2meta_8h" startline="128">projectName</references>
        <references refid="classmeta_1a21c40d9f0907f6e56330201ffd5fcc05" compoundref="meta_2include_2meta_2meta_8h" startline="142">run_number</references>
        <references refid="classmeta_1a6d78fc69df28f8b5673235084ee32937" compoundref="meta_2include_2meta_2meta_8h" startline="132">sample_name</references>
        <references refid="classcproperty_1a31b26b5ffb20bbf8d8ee38e0755a9819" compoundref="property_8h" startline="22" endline="25">cproperty&lt; T, G &gt;::set_getter</references>
        <references refid="classcproperty_1a41a70e8e01c9b1a20b94d2dbf1a6b214" compoundref="property_8h" startline="27" endline="27">cproperty&lt; T, G &gt;::set_object</references>
        <references refid="classmeta_1af80a1704ac18b80792418f212fa495e8" compoundref="meta_2include_2meta_2meta_8h" startline="129">statsAlgorithm</references>
        <references refid="classmeta_1aac7753a039608875cd5a9ac66700e587" compoundref="meta_2include_2meta_2meta_8h" startline="102">sum_of_weights</references>
        <references refid="classmeta_1acf1fa18515c2dbf69475063ba348c0a6" compoundref="meta_2include_2meta_2meta_8h" startline="106">totalEvents</references>
        <references refid="classmeta_1a4289afe6a2c6b19a57802eb613a3cef3" compoundref="meta_2include_2meta_2meta_8h" startline="90">totalSize</references>
        <references refid="classmeta_1a010d7051430c846fca8edf3a77833b22" compoundref="meta_2include_2meta_2meta_8h" startline="116">version</references>
        <references refid="classmeta_1a25f9eca600500121ca02bc09eb6db3c1" compoundref="meta_2include_2meta_2meta_8h" startline="137">weights</references>
        <referencedby refid="classmain_1_1_meta_x_1a485796f235267703afbef38cd9388014" compoundref="performance_2main_8py" startline="14" endline="14">main.MetaX.title</referencedby>
        <referencedby refid="classsimply__plot_1_1_meta_x_1a049d73ffa20c33a86b4e0b3d05fa7b69" compoundref="simply__plot_8py" startline="520" endline="521">simply_plot.MetaX.title</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a79162376cde773abd70adce92c5e7a55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>meta::~meta</definition>
        <argsstring>()</argsstring>
        <name>~meta</name>
        <briefdescription>
<para>Destructor for the <computeroutput>meta</computeroutput> class. </para>
        </briefdescription>
        <detaileddescription>
<para>Cleans up resources used by the <computeroutput>meta</computeroutput> instance, such as the RapidJSON document. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="48" column="5" bodyfile="modules/meta/cxx/meta.cxx" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a32ee372f54cfc605055e09fd6091c5b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structfolds__t" kindref="compound">folds_t</ref> *</type>
        <definition>const folds_t * meta::get_tags</definition>
        <argsstring>(std::string hash)</argsstring>
        <name>get_tags</name>
        <param>
          <type>std::string</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Retrieves tags based on a hash. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash string used to identify and retrieve the specific set of tags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A constant pointer to a <computeroutput><ref refid="structfolds__t" kindref="compound">folds_t</ref></computeroutput> structure containing the tags, or nullptr if not found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="55" column="19" bodyfile="modules/meta/cxx/meta.cxx" bodystart="291" bodyend="298"/>
        <references refid="classmeta_1a35d142708b4b66eeb857eb0c204e459b" compoundref="meta_8cxx" startline="274" endline="279">hash</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
      </memberdef>
      <memberdef kind="function" id="classmeta_1ac20aa6b655d77e02eb08aabe78b6af7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::scan_data</definition>
        <argsstring>(TObject *obj)</argsstring>
        <name>scan_data</name>
        <param>
          <type>TObject *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Scans data from a generic ROOT object (e.g., TTree, TH1). </para>
        </briefdescription>
        <detaileddescription>
<para>This method is likely used to extract metadata embedded within ROOT objects. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the ROOT TObject to scan for metadata. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="62" column="10" bodyfile="modules/meta/cxx/meta.cxx" bodystart="200" bodyend="206"/>
        <references refid="classmeta_1aaed15ab5be8f7a86c79373f24abfc952" compoundref="meta_8cxx" startline="133" endline="152">parse_json</references>
        <references refid="classmeta_1a24d8657dbb9d0d8903725ee01fe22c14" compoundref="meta_8cxx" startline="226" endline="272">scan_sow</references>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a24d8657dbb9d0d8903725ee01fe22c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::scan_sow</definition>
        <argsstring>(TObject *obj)</argsstring>
        <name>scan_sow</name>
        <param>
          <type>TObject *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Scans sum of weights (SoW) information from a ROOT object. </para>
        </briefdescription>
        <detaileddescription>
<para>This is often important for normalizing Monte Carlo simulations. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the ROOT TObject to scan for sum of weights information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="69" column="10" bodyfile="modules/meta/cxx/meta.cxx" bodystart="226" bodyend="272"/>
        <references refid="structmeta__t_1a373970fba4abd3bf8004ed81ff29933e" compoundref="structs_2include_2structs_2meta_8h" startline="56">meta_t::AMITag</references>
        <references refid="structmeta__t_1a80c9ef08aed5436f0070dea48590507f" compoundref="structs_2include_2structs_2meta_8h" startline="107">meta_t::campaign</references>
        <references refid="namespacesimply__plot_1a73c4671efaa427b5621fe9d0d563decd" compoundref="simply__plot_8py" startline="620">simply_plot.data</references>
        <references refid="structmeta__t_1a8c2ed5731d402571c8e5c4b418fdd7d2" compoundref="structs_2include_2structs_2meta_8h" startline="49">meta_t::dsid</references>
        <references refid="classmeta_1a2b29b1d9fb17658c49c5f34adb523031" compoundref="meta_2include_2meta_2meta_8h" startline="104">dsid</references>
        <references refid="classtools_1ad7229c72cee65da3605c4be82f9b42d4" compoundref="strings_8cxx" startline="65" endline="69">tools::has_string</references>
        <references refid="structmeta__t_1a71cbe9a05a93a6ddf2b51df149497384" compoundref="structs_2include_2structs_2meta_8h" startline="53">meta_t::inputfiles</references>
        <references refid="structmeta__t_1a64b0b2ec8add3cc62a861cba100443d6" compoundref="structs_2include_2structs_2meta_8h" startline="119">meta_t::misc</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
        <referencedby refid="classmeta_1ac20aa6b655d77e02eb08aabe78b6af7e" compoundref="meta_8cxx" startline="200" endline="206">scan_data</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmeta_1aaed15ab5be8f7a86c79373f24abfc952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::parse_json</definition>
        <argsstring>(std::string inpt)</argsstring>
        <name>parse_json</name>
        <param>
          <type>std::string</type>
          <declname>inpt</declname>
        </param>
        <briefdescription>
<para>Parses a JSON string to extract metadata. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inpt</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON string containing metadata to be parsed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="75" column="10" bodyfile="modules/meta/cxx/meta.cxx" bodystart="133" bodyend="152"/>
        <references refid="classtools_1a3d538da5310467c9321b27cd6a75b9af" compoundref="strings_8cxx" startline="71" endline="75">tools::ends_with</references>
        <references refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a8fa14cdd754f91cc6554c9e71929cce7">f</references>
        <references refid="classtools_1aeae88ebd7116d59008600f0723716dba" compoundref="strings_8cxx" startline="5" endline="21">tools::replace</references>
        <referencedby refid="classmeta_1ac20aa6b655d77e02eb08aabe78b6af7e" compoundref="meta_8cxx" startline="200" endline="206">scan_data</referencedby>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a35d142708b4b66eeb857eb0c204e459b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string meta::hash</definition>
        <argsstring>(std::string fname)</argsstring>
        <name>hash</name>
        <param>
          <type>std::string</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Generates a hash for a given filename. </para>
        </briefdescription>
        <detaileddescription>
<para>This hash can be used for caching or uniquely identifying file-specific metadata. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>The filename (or path) for which to generate the hash. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The generated hash string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="83" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="274" bodyend="279"/>
        <references refid="namespacesample__consistency_1a55a51c365bbd868bf90c826e36c51ad3" compoundref="sample__consistency_8py" startline="103">sample_consistency.fname</references>
        <references refid="classtools_1a352a6965f2f3c768f0f4ecd1f978fcc0" compoundref="strings_8cxx" startline="23" endline="36">tools::split</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
        <referencedby refid="classmeta_1a32ee372f54cfc605055e09fd6091c5b5" compoundref="meta_8cxx" startline="291" endline="298">get_tags</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmeta_1aac47e377d2bbda2fac5a8cfc5ada7243" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::compiler</definition>
        <argsstring>()</argsstring>
        <name>compiler</name>
        <briefdescription>
<para>Internal method to compile or process metadata after parsing. </para>
        </briefdescription>
        <detaileddescription>
<para>This might involve organizing, validating, or transforming the raw metadata. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="164" column="10" bodyfile="modules/meta/cxx/meta.cxx" bodystart="154" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a6b915820e9720f8050c908857e2783c8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float meta::parse_float</definition>
        <argsstring>(std::string key, TTree *tr)</argsstring>
        <name>parse_float</name>
        <param>
          <type>std::string</type>
          <declname>key</declname>
        </param>
        <param>
          <type>TTree *</type>
          <declname>tr</declname>
        </param>
        <briefdescription>
<para>Parses a float value from a TTree based on a key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key (branch/leaf name) to look for in the TTree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the TTree to parse from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The parsed float value. Returns 0 if not found or on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="173" column="11" bodyfile="modules/meta/cxx/meta.cxx" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a4edf9b754591ddfde876090af1014dd4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string meta::parse_string</definition>
        <argsstring>(std::string key, TTree *tr)</argsstring>
        <name>parse_string</name>
        <param>
          <type>std::string</type>
          <declname>key</declname>
        </param>
        <param>
          <type>TTree *</type>
          <declname>tr</declname>
        </param>
        <briefdescription>
<para>Parses a string value from a TTree based on a key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>The key (branch/leaf name) to look for in the TTree. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the TTree to parse from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The parsed string value. Returns empty string if not found or on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="181" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="213" bodyend="224"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classmeta_1aedad16107b34bfdd1414a710c52506db" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_isMC</definition>
        <argsstring>(bool *value, meta *instance)</argsstring>
        <name>get_isMC</name>
        <param>
          <type>bool *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the isMC property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved boolean value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance from which to get the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="187" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="319" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a1f44b5c8f1cefc0bdf0c5d10020c3acb" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_found</definition>
        <argsstring>(bool *value, meta *instance)</argsstring>
        <name>get_found</name>
        <param>
          <type>bool *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the found property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved boolean value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="191" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a5d54177f1d49dc4c9b1921cde09f50b3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_eventNumber</definition>
        <argsstring>(double *value, meta *instance)</argsstring>
        <name>get_eventNumber</name>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the eventNumber property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved double value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="195" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="321" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1aa2708016aef0b613273c47ad45246c6f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_totalSize</definition>
        <argsstring>(double *value, meta *instance)</argsstring>
        <name>get_totalSize</name>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the totalSize property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved double value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="199" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="323" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1abc1011b2e0d492df14b9880f8909b1ce" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_event_index</definition>
        <argsstring>(double *value, meta *instance)</argsstring>
        <name>get_event_index</name>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the event_index property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved double value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="203" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="322" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a9fc5e2f76515a29b0d9a57a195a2ac81" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_kfactor</definition>
        <argsstring>(double *value, meta *instance)</argsstring>
        <name>get_kfactor</name>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the kfactor property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved double value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="207" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="324" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a6e79447fd7040858ec52d186793d91a7" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_ecmEnergy</definition>
        <argsstring>(double *value, meta *instance)</argsstring>
        <name>get_ecmEnergy</name>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the ecmEnergy property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved double value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="211" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="325" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a048b992e524fb113722c43665f746cbb" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_genFiltEff</definition>
        <argsstring>(double *value, meta *instance)</argsstring>
        <name>get_genFiltEff</name>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the genFiltEff property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved double value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="215" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="326" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a65dbb56a0a6931e82c483dedd3b6f746" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_completion</definition>
        <argsstring>(double *value, meta *instance)</argsstring>
        <name>get_completion</name>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the completion property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved double value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="219" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="327" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a89130604840ffc42a276ec8be33eec04" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_beam_energy</definition>
        <argsstring>(double *value, meta *instance)</argsstring>
        <name>get_beam_energy</name>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the beam_energy property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved double value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="223" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a67846a2445718918e1001996af202a7b" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_cross_section_pb</definition>
        <argsstring>(double *value, meta *instance)</argsstring>
        <name>get_cross_section_pb</name>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the cross_section_pb property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved double value (picobarns). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="228" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="304" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a9ec5ba5b2bd55dfe35f990e7572fe05b" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_cross_section_nb</definition>
        <argsstring>(double *value, meta *instance)</argsstring>
        <name>get_cross_section_nb</name>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the cross_section_nb property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved double value (nanobarns). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="232" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="308" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1aebafcd6940a2fbab49099d383acfe2c7" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_cross_section_fb</definition>
        <argsstring>(double *value, meta *instance)</argsstring>
        <name>get_cross_section_fb</name>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the cross_section_fb property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved double value (femtobarns). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="236" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="300" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1aaccc83c5dba609b46882fe2beae46f49" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_campaign_luminosity</definition>
        <argsstring>(double *value, meta *instance)</argsstring>
        <name>get_campaign_luminosity</name>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the campaign_luminosity property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved double value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="241" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="330" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1aadcba95161bff50927d9872d73ebb945" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_dsid</definition>
        <argsstring>(unsigned int *value, meta *instance)</argsstring>
        <name>get_dsid</name>
        <param>
          <type>unsigned int *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the dsid property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved unsigned int value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="245" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="331" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a27cbf7951f0763ee7356b0b9a9eaed4a" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_nFiles</definition>
        <argsstring>(unsigned int *value, meta *instance)</argsstring>
        <name>get_nFiles</name>
        <param>
          <type>unsigned int *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the nFiles property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved unsigned int value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="249" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="332" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a1a7b86cc54c4f9e462d74ca7977bbbd4" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_totalEvents</definition>
        <argsstring>(unsigned int *value, meta *instance)</argsstring>
        <name>get_totalEvents</name>
        <param>
          <type>unsigned int *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the totalEvents property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved unsigned int value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="253" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="333" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a5b721a4401a8e31ffb8aa9264e6bc32c" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_datasetNumber</definition>
        <argsstring>(unsigned int *value, meta *instance)</argsstring>
        <name>get_datasetNumber</name>
        <param>
          <type>unsigned int *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the datasetNumber property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved unsigned int value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="257" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="334" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a09ce66d1e1b3a8cfd8d5c79c491e978a" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_derivationFormat</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_derivationFormat</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the derivationFormat property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="261" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="335" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1aa0bac8b335f93be9196775f88997b089" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_AMITag</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_AMITag</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the AMITag property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="265" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="336" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a8831ccd7d829da23f74c4033bdacf436" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_generators</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_generators</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the generators property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="269" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="337" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1ab8818383bfd9e0d6967188c6171f5b5f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_identifier</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_identifier</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the identifier property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="273" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="338" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1ac2b91b037d5851e882651d98d19be3c5" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_DatasetName</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_DatasetName</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the DatasetName property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="277" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="339" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1ad6fcbbd010db7b607936aad48cbbbf68" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_prodsysStatus</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_prodsysStatus</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the prodsysStatus property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="281" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="340" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a676a74472dba03f474aec09a4fd988c7" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_dataType</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_dataType</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the dataType property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="285" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="341" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1ab7ac25d62a9fd2a5a01c84b18972a60c" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_version</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_version</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the version property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="289" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="342" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1aa8e2658ca84c923603b24e607086c115" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_PDF</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_PDF</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the PDF property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="293" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="343" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1afc8d9f3aa6dd060d77fb00afe8300766" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_AtlasRelease</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_AtlasRelease</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the AtlasRelease property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="297" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="344" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a6cff7f2328fae3c02da9a8df087cb130" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_principalPhysicsGroup</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_principalPhysicsGroup</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the principalPhysicsGroup property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="301" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="345" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a0adb7292c42825d74c1560eb8948a269" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_physicsShort</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_physicsShort</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the physicsShort property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="305" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="346" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1afa1655242c4a5fde5c8d852543a948b5" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_generatorName</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_generatorName</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the generatorName property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="309" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="347" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1afb28d30e88aa86b14c39e202fa81e050" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_geometryVersion</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_geometryVersion</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the geometryVersion property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="313" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="348" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a83305d51ea80f44419d082c8a803a473" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_conditionsTag</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_conditionsTag</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the conditionsTag property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="317" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="349" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a98bec2faec96264f66651b8d7f28532d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_generatorTune</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_generatorTune</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the generatorTune property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="321" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="350" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a05c2341ffac857c9d4c986a61a06e02d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_amiStatus</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_amiStatus</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the amiStatus property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="325" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="351" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a9dfbef8e67e95a400d3acc0314820b0e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_beamType</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_beamType</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the beamType property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="329" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="352" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a9a33053cf675eb25e8566decd254bfae" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_productionStep</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_productionStep</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the productionStep property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="333" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="353" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a2a344f1e6a941c9d884b5f86da2e523f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_projectName</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_projectName</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the projectName property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="337" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="354" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a3df6ab4137f505f9acddcdaeecf75f5f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_statsAlgorithm</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_statsAlgorithm</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the statsAlgorithm property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="341" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="355" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1ac3819ec7f7e968c1d09619df6951f15a" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_genFilterNames</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_genFilterNames</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the genFilterNames property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="345" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="356" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1aef4ac1ea9627ea119f37e4c033e683f4" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_file_type</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_file_type</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the file_type property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="349" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="357" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1ac2d01a92a9681d3f8bb93dcb4683b48b" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_sample_name</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_sample_name</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the sample_name property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="353" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="358" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a79cd8f9fbd5b3db9a394fe4fbec9ae36" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_logicalDatasetName</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_logicalDatasetName</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the logicalDatasetName property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="357" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="359" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1aa38115a3aaa4c30e30800d3f52c1a750" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_campaign</definition>
        <argsstring>(std::string *value, meta *instance)</argsstring>
        <name>get_campaign</name>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the campaign property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved string value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="361" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="314" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a360007c7b723732300ea435daabc470d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_keywords</definition>
        <argsstring>(std::vector&lt; std::string &gt; *value, meta *instance)</argsstring>
        <name>get_keywords</name>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the keywords property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved vector of strings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="365" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="361" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a7627bb7b5986eb0455428900ed3bd0c1" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_weights</definition>
        <argsstring>(std::vector&lt; std::string &gt; *value, meta *instance)</argsstring>
        <name>get_weights</name>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the weights property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved vector of strings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="369" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="362" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a650f253b4a5bb88e0addc966e9c462f3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_keyword</definition>
        <argsstring>(std::vector&lt; std::string &gt; *value, meta *instance)</argsstring>
        <name>get_keyword</name>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the keyword property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved vector of strings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="373" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="363" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a3a8071ce06967167f9560427961f1cc9" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_fileGUID</definition>
        <argsstring>(std::vector&lt; std::string &gt; *value, meta *instance)</argsstring>
        <name>get_fileGUID</name>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the fileGUID property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved vector of strings (GUIDs). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="377" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="364" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1ad27e4b56ba6317ec8dbe731689c09a88" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_events</definition>
        <argsstring>(std::vector&lt; int &gt; *value, meta *instance)</argsstring>
        <name>get_events</name>
        <param>
          <type>std::vector&lt; int &gt; *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the events property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved vector of integers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="381" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="365" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a76d1b9f90b1134e71534f5552f803b2e" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_run_number</definition>
        <argsstring>(std::vector&lt; int &gt; *value, meta *instance)</argsstring>
        <name>get_run_number</name>
        <param>
          <type>std::vector&lt; int &gt; *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the run_number property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved vector of integers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="385" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="366" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a750697afc06ac0cb848e3f9abc78a9a6" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_fileSize</definition>
        <argsstring>(std::vector&lt; double &gt; *value, meta *instance)</argsstring>
        <name>get_fileSize</name>
        <param>
          <type>std::vector&lt; double &gt; *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the fileSize property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved vector of doubles. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="389" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="367" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1aadd61abf16c31950e56bccbad6cf1e09" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_inputrange</definition>
        <argsstring>(std::map&lt; int, int &gt; *value, meta *instance)</argsstring>
        <name>get_inputrange</name>
        <param>
          <type>std::map&lt; int, int &gt; *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the inputrange property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved map of int to int. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="394" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="368" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1acf065e86e02d0fef7b573c9df1150932" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_inputfiles</definition>
        <argsstring>(std::map&lt; int, std::string &gt; *value, meta *instance)</argsstring>
        <name>get_inputfiles</name>
        <param>
          <type>std::map&lt; int, std::string &gt; *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the inputfiles property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved map of int to string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="398" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="369" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a3acd63aa4552c89ac7a59698f1429147" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_LFN</definition>
        <argsstring>(std::map&lt; std::string, int &gt; *value, meta *instance)</argsstring>
        <name>get_LFN</name>
        <param>
          <type>std::map&lt; std::string, int &gt; *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the LFN property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved map of string to int. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="403" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="370" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a803a08d6d220a7ed111cd8ee937c4d1a" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_misc</definition>
        <argsstring>(std::map&lt; std::string, weights_t &gt; *value, meta *instance)</argsstring>
        <name>get_misc</name>
        <param>
          <type>std::map&lt; std::string, <ref refid="structweights__t" kindref="compound">weights_t</ref> &gt; *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the misc property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved map of string to <computeroutput><ref refid="structweights__t" kindref="compound">weights_t</ref></computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="407" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="371" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1aa93e81c77f604eb8413780c5f211234b" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_config</definition>
        <argsstring>(std::map&lt; std::string, std::string &gt; *value, meta *instance)</argsstring>
        <name>get_config</name>
        <param>
          <type>std::map&lt; std::string, std::string &gt; *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the config property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved map of string to string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="412" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="372" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classmeta_1a12f93d8d47e6babf4632a61e58b526b7" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void meta::get_sum_of_weights</definition>
        <argsstring>(double *value, meta *instance)</argsstring>
        <name>get_sum_of_weights</name>
        <param>
          <type>double *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classmeta" kindref="compound">meta</ref> *</type>
          <declname>instance</declname>
        </param>
        <briefdescription>
<para>Static getter for the sum_of_weights property. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the retrieved double value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <computeroutput>meta</computeroutput> instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/meta/include/meta/meta.h" line="416" column="17" bodyfile="modules/meta/cxx/meta.cxx" bodystart="281" bodyend="289"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides properties and methods for metadata management. </para>
    </briefdescription>
    <detaileddescription>
<para>The <computeroutput>meta</computeroutput> class inherits from <computeroutput>tools</computeroutput> (providing utility functions) and <computeroutput>notification</computeroutput> (providing logging/messaging capabilities). It offers a comprehensive interface for handling various metadata attributes such as event numbers, cross-sections, dataset information, and other parameters crucial for physics analysis. It supports reading metadata from ROOT files and JSON sources. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>meta</label>
        <link refid="classmeta"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>notification</label>
        <link refid="classnotification"/>
      </node>
      <node id="2">
        <label>tools</label>
        <link refid="classtools"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>cproperty&lt; std::vector&lt; int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>meta</label>
        <link refid="classmeta"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>config</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>run_number</edgelabel>
          <edgelabel>events</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>dsid</edgelabel>
          <edgelabel>nFiles</edgelabel>
          <edgelabel>datasetNumber</edgelabel>
          <edgelabel>totalEvents</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>fileSize</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>LFN</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>inputrange</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>keyword</edgelabel>
          <edgelabel>weights</edgelabel>
          <edgelabel>keywords</edgelabel>
          <edgelabel>fileGUID</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>principalPhysicsGroup</edgelabel>
          <edgelabel>DatasetName</edgelabel>
          <edgelabel>generatorName</edgelabel>
          <edgelabel>productionStep</edgelabel>
          <edgelabel>campaign</edgelabel>
          <edgelabel>projectName</edgelabel>
          <edgelabel>physicsShort</edgelabel>
          <edgelabel>logicalDatasetName</edgelabel>
          <edgelabel>conditionsTag</edgelabel>
          <edgelabel>derivationFormat</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>cross_section_nb</edgelabel>
          <edgelabel>completion</edgelabel>
          <edgelabel>cross_section_fb</edgelabel>
          <edgelabel>ecmEnergy</edgelabel>
          <edgelabel>event_index</edgelabel>
          <edgelabel>sum_of_weights</edgelabel>
          <edgelabel>beam_energy</edgelabel>
          <edgelabel>cross_section_pb</edgelabel>
          <edgelabel>genFiltEff</edgelabel>
          <edgelabel>eventNumber</edgelabel>
          <edgelabel>...</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>misc</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>inputfiles</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>isMC</edgelabel>
          <edgelabel>found</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>cproperty&lt; unsigned int, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; unsigned int, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>cproperty&lt; std::string, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::string, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>cproperty&lt; double, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; double, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>cproperty&lt; std::vector&lt; double &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; double &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>cproperty&lt; std::map&lt; int, int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::map&lt; int, int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>cproperty&lt; std::map&lt; std::string, std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>cproperty&lt; T, G &gt;</label>
        <link refid="classcproperty"/>
      </node>
      <node id="13">
        <label>cproperty&lt; std::vector&lt; std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>cproperty&lt; std::map&lt; int, std::string &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::map&lt; int, std::string &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="18">
        <label>cproperty&lt; bool, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; bool, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>cproperty&lt; std::map&lt; std::string, int &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, int &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>notification</label>
        <link refid="classnotification"/>
        <childnode refid="4" relation="usage">
          <edgelabel>prefix</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>tools</label>
        <link refid="classtools"/>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>cproperty&lt; std::map&lt; std::string, weights_t &gt;, meta &gt;</label>
        <link refid="classcproperty"/>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; std::map&lt; std::string, weights_t &gt;, meta &gt;</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="modules/meta/include/meta/meta.h" line="36" column="45" bodyfile="modules/meta/include/meta/meta.h" bodystart="36" bodyend="417"/>
    <listofallmembers>
      <member refid="classtools_1a408b66ad73b7b4bb962634c14a55b619" prot="public" virt="non-virtual"><scope>meta</scope><name>absolute_path</name></member>
      <member refid="classmeta_1af3037bcdf7da061d55b6c6e613763460" prot="public" virt="non-virtual"><scope>meta</scope><name>amiStatus</name></member>
      <member refid="classmeta_1a6de8b2b6198e5ea010938d5a315f0090" prot="public" virt="non-virtual"><scope>meta</scope><name>AMITag</name></member>
      <member refid="classmeta_1a16a8ca527d3bb66711ffa93078d4e9de" prot="private" virt="non-virtual"><scope>meta</scope><name>analysis</name></member>
      <member refid="classmeta_1af733265ff2b94accdb80bd6e5198a5c3" prot="public" virt="non-virtual"><scope>meta</scope><name>AtlasRelease</name></member>
      <member refid="classmeta_1a4541d9a502b52f390bfe192452d29d8c" prot="public" virt="non-virtual"><scope>meta</scope><name>beam_energy</name></member>
      <member refid="classmeta_1a94f672065939d8c29551e5ccf980aacb" prot="public" virt="non-virtual"><scope>meta</scope><name>beamType</name></member>
      <member refid="classmeta_1ad5307d12fa5da19dc8e938f76705bd00" prot="public" virt="non-virtual"><scope>meta</scope><name>campaign</name></member>
      <member refid="classmeta_1a4b4f867f32918d904c2c83e07d5a0914" prot="public" virt="non-virtual"><scope>meta</scope><name>campaign_luminosity</name></member>
      <member refid="classmeta_1aac47e377d2bbda2fac5a8cfc5ada7243" prot="private" virt="non-virtual"><scope>meta</scope><name>compiler</name></member>
      <member refid="classmeta_1a8508206c904b6da70cbf3442bdc11b57" prot="public" virt="non-virtual"><scope>meta</scope><name>completion</name></member>
      <member refid="classmeta_1af7aeab02c2153871a4aa08eb8e114094" prot="public" virt="non-virtual"><scope>meta</scope><name>conditionsTag</name></member>
      <member refid="classmeta_1a93116e7174fe68d48b46f00b82a2173a" prot="public" virt="non-virtual"><scope>meta</scope><name>config</name></member>
      <member refid="classtools_1aed9f3247b474a8fb1840860d51cde7ca" prot="public" virt="non-virtual"><scope>meta</scope><name>create_path</name></member>
      <member refid="classmeta_1a8132a07c71be0663c9dd37aa683e52be" prot="public" virt="non-virtual"><scope>meta</scope><name>cross_section_fb</name></member>
      <member refid="classmeta_1a4bf84d1d9bafa83e8cf16d68e970fdbd" prot="public" virt="non-virtual"><scope>meta</scope><name>cross_section_nb</name></member>
      <member refid="classmeta_1a0afd4567f1bba1c0043d38217510bcf3" prot="public" virt="non-virtual"><scope>meta</scope><name>cross_section_pb</name></member>
      <member refid="classmeta_1af953a7a7492880e56af8154554f462e7" prot="public" virt="non-virtual"><scope>meta</scope><name>DatasetName</name></member>
      <member refid="classmeta_1aaf40f206f3498485c0cbc8611f9cb1e1" prot="public" virt="non-virtual"><scope>meta</scope><name>datasetNumber</name></member>
      <member refid="classmeta_1a142900f4130114e6a0861c49e3216776" prot="public" virt="non-virtual"><scope>meta</scope><name>dataType</name></member>
      <member refid="classnotification_1a8dd1ebb578269118b18bf7f0e176bf14" prot="public" virt="non-virtual"><scope>meta</scope><name>Debug</name></member>
      <member refid="classnotification_1aa14ded524569ac1d7fd121c161a733be" prot="protected" virt="non-virtual"><scope>meta</scope><name>debug_mode</name></member>
      <member refid="classtools_1a1f8f5e775e758e3d2442a9dd46daf78c" prot="public" virt="non-virtual"><scope>meta</scope><name>delete_path</name></member>
      <member refid="classmeta_1a68a242a824761379c015193c918da1f9" prot="public" virt="non-virtual"><scope>meta</scope><name>derivationFormat</name></member>
      <member refid="classmeta_1a2b29b1d9fb17658c49c5f34adb523031" prot="public" virt="non-virtual"><scope>meta</scope><name>dsid</name></member>
      <member refid="classmeta_1a3cdfb2156bd753446f3ebe4eb058e3a2" prot="public" virt="non-virtual"><scope>meta</scope><name>ecmEnergy</name></member>
      <member refid="classtools_1a3d538da5310467c9321b27cd6a75b9af" prot="public" virt="non-virtual"><scope>meta</scope><name>ends_with</name></member>
      <member refid="classnotification_1ab0c3843575c157d799e532a9ea5acbd0" prot="public" virt="non-virtual"><scope>meta</scope><name>Error</name></member>
      <member refid="classmeta_1abb58b9418610e148e26b0d9a7968bc29" prot="public" virt="non-virtual"><scope>meta</scope><name>event_index</name></member>
      <member refid="classmeta_1aca08c4a4129c1d34307962823bd986f7" prot="public" virt="non-virtual"><scope>meta</scope><name>eventNumber</name></member>
      <member refid="classmeta_1a01d9d7ee975cf69b695309d3c301d16b" prot="public" virt="non-virtual"><scope>meta</scope><name>events</name></member>
      <member refid="classtools_1a86175bf887f3e82780cb72910181961d" prot="public" virt="non-virtual"><scope>meta</scope><name>extract</name></member>
      <member refid="classmeta_1aa57891adfc8a716cb3ba2c19362e3fcf" prot="public" virt="non-virtual"><scope>meta</scope><name>file_type</name></member>
      <member refid="classmeta_1ad5392a640da7ecda23d616ca22ea109b" prot="public" virt="non-virtual"><scope>meta</scope><name>fileGUID</name></member>
      <member refid="classmeta_1a228714ffad528afa7800be63c9767718" prot="public" virt="non-virtual"><scope>meta</scope><name>fileSize</name></member>
      <member refid="classtools_1abce97603aeadeaa04fa6c6ff6c721eda" prot="public" virt="non-virtual"><scope>meta</scope><name>flush</name></member>
      <member refid="classmeta_1af96a76a63f402195b866be4dbadf14a4" prot="private" virt="non-virtual"><scope>meta</scope><name>folds</name></member>
      <member refid="classmeta_1ad3569d07c83c22f1c98f923b3fe08ce3" prot="public" virt="non-virtual"><scope>meta</scope><name>found</name></member>
      <member refid="classmeta_1aa86326034f1f74557108d37b4914c621" prot="public" virt="non-virtual"><scope>meta</scope><name>generatorName</name></member>
      <member refid="classmeta_1a4e5b2648fd0c6ea311c759254377cac5" prot="public" virt="non-virtual"><scope>meta</scope><name>generators</name></member>
      <member refid="classmeta_1a3fc75bdbf1e75744c990a50b21c952f3" prot="public" virt="non-virtual"><scope>meta</scope><name>generatorTune</name></member>
      <member refid="classmeta_1a997b8c3386945b17284b0d1b6c7c60ba" prot="public" virt="non-virtual"><scope>meta</scope><name>genFiltEff</name></member>
      <member refid="classmeta_1aebee62ddee4e73ad27b1d79a78222275" prot="public" virt="non-virtual"><scope>meta</scope><name>genFilterNames</name></member>
      <member refid="classmeta_1a25eb3a339b878a630b7fe0c6aacaea32" prot="public" virt="non-virtual"><scope>meta</scope><name>geometryVersion</name></member>
      <member refid="classmeta_1a05c2341ffac857c9d4c986a61a06e02d" prot="private" virt="non-virtual"><scope>meta</scope><name>get_amiStatus</name></member>
      <member refid="classmeta_1aa0bac8b335f93be9196775f88997b089" prot="private" virt="non-virtual"><scope>meta</scope><name>get_AMITag</name></member>
      <member refid="classmeta_1afc8d9f3aa6dd060d77fb00afe8300766" prot="private" virt="non-virtual"><scope>meta</scope><name>get_AtlasRelease</name></member>
      <member refid="classmeta_1a89130604840ffc42a276ec8be33eec04" prot="private" virt="non-virtual"><scope>meta</scope><name>get_beam_energy</name></member>
      <member refid="classmeta_1a9dfbef8e67e95a400d3acc0314820b0e" prot="private" virt="non-virtual"><scope>meta</scope><name>get_beamType</name></member>
      <member refid="classmeta_1aa38115a3aaa4c30e30800d3f52c1a750" prot="private" virt="non-virtual"><scope>meta</scope><name>get_campaign</name></member>
      <member refid="classmeta_1aaccc83c5dba609b46882fe2beae46f49" prot="private" virt="non-virtual"><scope>meta</scope><name>get_campaign_luminosity</name></member>
      <member refid="classmeta_1a65dbb56a0a6931e82c483dedd3b6f746" prot="private" virt="non-virtual"><scope>meta</scope><name>get_completion</name></member>
      <member refid="classmeta_1a83305d51ea80f44419d082c8a803a473" prot="private" virt="non-virtual"><scope>meta</scope><name>get_conditionsTag</name></member>
      <member refid="classmeta_1aa93e81c77f604eb8413780c5f211234b" prot="private" virt="non-virtual"><scope>meta</scope><name>get_config</name></member>
      <member refid="classmeta_1aebafcd6940a2fbab49099d383acfe2c7" prot="private" virt="non-virtual"><scope>meta</scope><name>get_cross_section_fb</name></member>
      <member refid="classmeta_1a9ec5ba5b2bd55dfe35f990e7572fe05b" prot="private" virt="non-virtual"><scope>meta</scope><name>get_cross_section_nb</name></member>
      <member refid="classmeta_1a67846a2445718918e1001996af202a7b" prot="private" virt="non-virtual"><scope>meta</scope><name>get_cross_section_pb</name></member>
      <member refid="classmeta_1ac2b91b037d5851e882651d98d19be3c5" prot="private" virt="non-virtual"><scope>meta</scope><name>get_DatasetName</name></member>
      <member refid="classmeta_1a5b721a4401a8e31ffb8aa9264e6bc32c" prot="private" virt="non-virtual"><scope>meta</scope><name>get_datasetNumber</name></member>
      <member refid="classmeta_1a676a74472dba03f474aec09a4fd988c7" prot="private" virt="non-virtual"><scope>meta</scope><name>get_dataType</name></member>
      <member refid="classnotification_1ae25782afd10b3cb5fffe17afaf4fffc0" prot="public" virt="non-virtual"><scope>meta</scope><name>get_debug_mode</name></member>
      <member refid="classmeta_1a09ce66d1e1b3a8cfd8d5c79c491e978a" prot="private" virt="non-virtual"><scope>meta</scope><name>get_derivationFormat</name></member>
      <member refid="classmeta_1aadcba95161bff50927d9872d73ebb945" prot="private" virt="non-virtual"><scope>meta</scope><name>get_dsid</name></member>
      <member refid="classmeta_1a6e79447fd7040858ec52d186793d91a7" prot="private" virt="non-virtual"><scope>meta</scope><name>get_ecmEnergy</name></member>
      <member refid="classmeta_1abc1011b2e0d492df14b9880f8909b1ce" prot="private" virt="non-virtual"><scope>meta</scope><name>get_event_index</name></member>
      <member refid="classmeta_1a5d54177f1d49dc4c9b1921cde09f50b3" prot="private" virt="non-virtual"><scope>meta</scope><name>get_eventNumber</name></member>
      <member refid="classmeta_1ad27e4b56ba6317ec8dbe731689c09a88" prot="private" virt="non-virtual"><scope>meta</scope><name>get_events</name></member>
      <member refid="classmeta_1aef4ac1ea9627ea119f37e4c033e683f4" prot="private" virt="non-virtual"><scope>meta</scope><name>get_file_type</name></member>
      <member refid="classmeta_1a3a8071ce06967167f9560427961f1cc9" prot="private" virt="non-virtual"><scope>meta</scope><name>get_fileGUID</name></member>
      <member refid="classmeta_1a750697afc06ac0cb848e3f9abc78a9a6" prot="private" virt="non-virtual"><scope>meta</scope><name>get_fileSize</name></member>
      <member refid="classmeta_1a1f44b5c8f1cefc0bdf0c5d10020c3acb" prot="private" virt="non-virtual"><scope>meta</scope><name>get_found</name></member>
      <member refid="classmeta_1afa1655242c4a5fde5c8d852543a948b5" prot="private" virt="non-virtual"><scope>meta</scope><name>get_generatorName</name></member>
      <member refid="classmeta_1a8831ccd7d829da23f74c4033bdacf436" prot="private" virt="non-virtual"><scope>meta</scope><name>get_generators</name></member>
      <member refid="classmeta_1a98bec2faec96264f66651b8d7f28532d" prot="private" virt="non-virtual"><scope>meta</scope><name>get_generatorTune</name></member>
      <member refid="classmeta_1a048b992e524fb113722c43665f746cbb" prot="private" virt="non-virtual"><scope>meta</scope><name>get_genFiltEff</name></member>
      <member refid="classmeta_1ac3819ec7f7e968c1d09619df6951f15a" prot="private" virt="non-virtual"><scope>meta</scope><name>get_genFilterNames</name></member>
      <member refid="classmeta_1afb28d30e88aa86b14c39e202fa81e050" prot="private" virt="non-virtual"><scope>meta</scope><name>get_geometryVersion</name></member>
      <member refid="classmeta_1ab8818383bfd9e0d6967188c6171f5b5f" prot="private" virt="non-virtual"><scope>meta</scope><name>get_identifier</name></member>
      <member refid="classmeta_1acf065e86e02d0fef7b573c9df1150932" prot="private" virt="non-virtual"><scope>meta</scope><name>get_inputfiles</name></member>
      <member refid="classmeta_1aadd61abf16c31950e56bccbad6cf1e09" prot="private" virt="non-virtual"><scope>meta</scope><name>get_inputrange</name></member>
      <member refid="classmeta_1aedad16107b34bfdd1414a710c52506db" prot="private" virt="non-virtual"><scope>meta</scope><name>get_isMC</name></member>
      <member refid="classmeta_1a650f253b4a5bb88e0addc966e9c462f3" prot="private" virt="non-virtual"><scope>meta</scope><name>get_keyword</name></member>
      <member refid="classmeta_1a360007c7b723732300ea435daabc470d" prot="private" virt="non-virtual"><scope>meta</scope><name>get_keywords</name></member>
      <member refid="classmeta_1a9fc5e2f76515a29b0d9a57a195a2ac81" prot="private" virt="non-virtual"><scope>meta</scope><name>get_kfactor</name></member>
      <member refid="classmeta_1a3acd63aa4552c89ac7a59698f1429147" prot="private" virt="non-virtual"><scope>meta</scope><name>get_LFN</name></member>
      <member refid="classmeta_1a79cd8f9fbd5b3db9a394fe4fbec9ae36" prot="private" virt="non-virtual"><scope>meta</scope><name>get_logicalDatasetName</name></member>
      <member refid="classmeta_1a803a08d6d220a7ed111cd8ee937c4d1a" prot="private" virt="non-virtual"><scope>meta</scope><name>get_misc</name></member>
      <member refid="classmeta_1a27cbf7951f0763ee7356b0b9a9eaed4a" prot="private" virt="non-virtual"><scope>meta</scope><name>get_nFiles</name></member>
      <member refid="classmeta_1aa8e2658ca84c923603b24e607086c115" prot="private" virt="non-virtual"><scope>meta</scope><name>get_PDF</name></member>
      <member refid="classmeta_1a0adb7292c42825d74c1560eb8948a269" prot="private" virt="non-virtual"><scope>meta</scope><name>get_physicsShort</name></member>
      <member refid="classnotification_1aa0aad214cf167691e516ecc343306244" prot="public" virt="non-virtual"><scope>meta</scope><name>get_prefix</name></member>
      <member refid="classmeta_1a6cff7f2328fae3c02da9a8df087cb130" prot="private" virt="non-virtual"><scope>meta</scope><name>get_principalPhysicsGroup</name></member>
      <member refid="classmeta_1ad6fcbbd010db7b607936aad48cbbbf68" prot="private" virt="non-virtual"><scope>meta</scope><name>get_prodsysStatus</name></member>
      <member refid="classmeta_1a9a33053cf675eb25e8566decd254bfae" prot="private" virt="non-virtual"><scope>meta</scope><name>get_productionStep</name></member>
      <member refid="classmeta_1a2a344f1e6a941c9d884b5f86da2e523f" prot="private" virt="non-virtual"><scope>meta</scope><name>get_projectName</name></member>
      <member refid="classmeta_1a76d1b9f90b1134e71534f5552f803b2e" prot="private" virt="non-virtual"><scope>meta</scope><name>get_run_number</name></member>
      <member refid="classmeta_1ac2d01a92a9681d3f8bb93dcb4683b48b" prot="private" virt="non-virtual"><scope>meta</scope><name>get_sample_name</name></member>
      <member refid="classmeta_1a3df6ab4137f505f9acddcdaeecf75f5f" prot="private" virt="non-virtual"><scope>meta</scope><name>get_statsAlgorithm</name></member>
      <member refid="classmeta_1a12f93d8d47e6babf4632a61e58b526b7" prot="private" virt="non-virtual"><scope>meta</scope><name>get_sum_of_weights</name></member>
      <member refid="classnotification_1a3a12e8eaf363a320abee5393436123f0" prot="public" virt="non-virtual"><scope>meta</scope><name>get_suppress_info</name></member>
      <member refid="classnotification_1ab53313e9343e9ef6deaefa2bdd3a837a" prot="public" virt="non-virtual"><scope>meta</scope><name>get_suppress_warning</name></member>
      <member refid="classmeta_1a32ee372f54cfc605055e09fd6091c5b5" prot="public" virt="non-virtual"><scope>meta</scope><name>get_tags</name></member>
      <member refid="classmeta_1a1a7b86cc54c4f9e462d74ca7977bbbd4" prot="private" virt="non-virtual"><scope>meta</scope><name>get_totalEvents</name></member>
      <member refid="classmeta_1aa2708016aef0b613273c47ad45246c6f" prot="private" virt="non-virtual"><scope>meta</scope><name>get_totalSize</name></member>
      <member refid="classmeta_1ab7ac25d62a9fd2a5a01c84b18972a60c" prot="private" virt="non-virtual"><scope>meta</scope><name>get_version</name></member>
      <member refid="classmeta_1a7627bb7b5986eb0455428900ed3bd0c1" prot="private" virt="non-virtual"><scope>meta</scope><name>get_weights</name></member>
      <member refid="classtools_1ad7229c72cee65da3605c4be82f9b42d4" prot="public" virt="non-virtual"><scope>meta</scope><name>has_string</name></member>
      <member refid="classtools_1a13633d4d63c55bcf537ff141e7605f13" prot="public" virt="non-virtual"><scope>meta</scope><name>has_value</name></member>
      <member refid="classmeta_1a35d142708b4b66eeb857eb0c204e459b" prot="public" virt="non-virtual"><scope>meta</scope><name>hash</name></member>
      <member refid="classmeta_1adfd916ea2a0fdbe3f55de09f34d76010" prot="public" virt="non-virtual"><scope>meta</scope><name>identifier</name></member>
      <member refid="classnotification_1a2ea9e0828e3d323b5bb5cdecc8f018a8" prot="public" virt="non-virtual"><scope>meta</scope><name>Info</name></member>
      <member refid="classmeta_1a9b71bf1793e1eb5f897a3c9de0e63583" prot="public" virt="non-virtual"><scope>meta</scope><name>inputfiles</name></member>
      <member refid="classmeta_1a7a108860a95134ea983e9a78185e75d7" prot="public" virt="non-virtual"><scope>meta</scope><name>inputrange</name></member>
      <member refid="classtools_1a47d3d261edcb898daab56721e18d1e67" prot="public" virt="non-virtual"><scope>meta</scope><name>is_file</name></member>
      <member refid="classmeta_1ab0e42b287be5935f4a673ddd783ec498" prot="public" virt="non-virtual"><scope>meta</scope><name>isMC</name></member>
      <member refid="classmeta_1a1f71374707a87ef0efe19d0005f240a2" prot="public" virt="non-virtual"><scope>meta</scope><name>keyword</name></member>
      <member refid="classmeta_1a14abb252cb3ee7637b8e7530f30b966b" prot="public" virt="non-virtual"><scope>meta</scope><name>keywords</name></member>
      <member refid="classmeta_1a82665b5b47b4589ce9911005967fd8a4" prot="public" virt="non-virtual"><scope>meta</scope><name>kfactor</name></member>
      <member refid="classmeta_1a041bd996ff676eff47aa6a8afb9731ac" prot="public" virt="non-virtual"><scope>meta</scope><name>LFN</name></member>
      <member refid="classmeta_1a41296b78a33bd0ebaa58626afaa763ca" prot="public" virt="non-virtual"><scope>meta</scope><name>logicalDatasetName</name></member>
      <member refid="classtools_1a5ab0f2cc351dd97951358ebe19e9c18d" prot="public" virt="non-virtual"><scope>meta</scope><name>ls</name></member>
      <member refid="classnotification_1a47e2d300e33c44a24b0c51d9e9a83914" prot="public" virt="non-virtual"><scope>meta</scope><name>Message</name></member>
      <member refid="classmeta_1a63ad3379066eb6b7c8bf7a7ea9ee0783" prot="public" virt="non-virtual"><scope>meta</scope><name>meta</name></member>
      <member refid="classmeta_1ade6569ebc5a94b9772bdc807ebe4da1a" prot="private" virt="non-virtual"><scope>meta</scope><name>meta_data</name></member>
      <member refid="classmeta_1a1585a495eeb14e3c830f2d477587f81f" prot="private" virt="non-virtual"><scope>meta</scope><name>metacache_path</name></member>
      <member refid="classmeta_1acd9e0f928ee90bf84d5cec534fff2dda" prot="public" virt="non-virtual"><scope>meta</scope><name>misc</name></member>
      <member refid="classmeta_1aa777f0fddc0be5b510c7f6714acfc1a1" prot="public" virt="non-virtual"><scope>meta</scope><name>nFiles</name></member>
      <member refid="classnotification_1a3ec5fe2d8db29cf32853858ff58fdbd7" prot="public" virt="non-virtual"><scope>meta</scope><name>notification</name></member>
      <member refid="classmeta_1a6b915820e9720f8050c908857e2783c8" prot="private" virt="non-virtual"><scope>meta</scope><name>parse_float</name></member>
      <member refid="classmeta_1aaed15ab5be8f7a86c79373f24abfc952" prot="public" virt="non-virtual"><scope>meta</scope><name>parse_json</name></member>
      <member refid="classmeta_1a4edf9b754591ddfde876090af1014dd4" prot="private" virt="non-virtual"><scope>meta</scope><name>parse_string</name></member>
      <member refid="classmeta_1ad949489e1cdf85496e2bf51d7b315574" prot="public" virt="non-virtual"><scope>meta</scope><name>PDF</name></member>
      <member refid="classmeta_1a39413e5635d945732a86577ff392ac8a" prot="public" virt="non-virtual"><scope>meta</scope><name>physicsShort</name></member>
      <member refid="classnotification_1a913d4c8a7736df782f900dd436cfeaa6" prot="protected" virt="non-virtual"><scope>meta</scope><name>prefix</name></member>
      <member refid="classmeta_1abda331442a20a39a7e71acab9f1a541d" prot="public" virt="non-virtual"><scope>meta</scope><name>principalPhysicsGroup</name></member>
      <member refid="classmeta_1aeac2dd9165bfccff2d47357ff4ff75d1" prot="public" virt="non-virtual"><scope>meta</scope><name>prodsysStatus</name></member>
      <member refid="classmeta_1ab03a527e6de925239dbee8b6ddea7f46" prot="public" virt="non-virtual"><scope>meta</scope><name>productionStep</name></member>
      <member refid="classmeta_1a5f6cf07c9584e16c2d79fbcc53cebeba" prot="public" virt="non-virtual"><scope>meta</scope><name>projectName</name></member>
      <member refid="classtools_1a4450b1e48193bef904b44f7a90aaee98" prot="public" virt="non-virtual"><scope>meta</scope><name>put</name></member>
      <member refid="classtools_1a9265b9f87bde50d0352c6cd1959ae5fc" prot="public" virt="non-virtual"><scope>meta</scope><name>rename</name></member>
      <member refid="classtools_1aeae88ebd7116d59008600f0723716dba" prot="public" virt="non-virtual"><scope>meta</scope><name>replace</name></member>
      <member refid="classmeta_1a117cd8d86f4825219fead046cca0eebe" prot="private" virt="non-virtual"><scope>meta</scope><name>rpd</name></member>
      <member refid="classmeta_1a21c40d9f0907f6e56330201ffd5fcc05" prot="public" virt="non-virtual"><scope>meta</scope><name>run_number</name></member>
      <member refid="classmeta_1a6d78fc69df28f8b5673235084ee32937" prot="public" virt="non-virtual"><scope>meta</scope><name>sample_name</name></member>
      <member refid="classmeta_1ac20aa6b655d77e02eb08aabe78b6af7e" prot="public" virt="non-virtual"><scope>meta</scope><name>scan_data</name></member>
      <member refid="classmeta_1a24d8657dbb9d0d8903725ee01fe22c14" prot="public" virt="non-virtual"><scope>meta</scope><name>scan_sow</name></member>
      <member refid="classnotification_1a5a69a50032f5dcf38bed2bb27dc048fc" prot="public" virt="non-virtual"><scope>meta</scope><name>set_debug_mode</name></member>
      <member refid="classnotification_1a575db6b2e3b67a7d679205600d83b576" prot="public" virt="non-virtual"><scope>meta</scope><name>set_prefix</name></member>
      <member refid="classnotification_1a58eec7023935cff9332ce21e58fc3f5a" prot="public" virt="non-virtual"><scope>meta</scope><name>set_suppress_info</name></member>
      <member refid="classnotification_1a9bb77ba73a5f25af292e9eea8a8de970" prot="public" virt="non-virtual"><scope>meta</scope><name>set_suppress_warning</name></member>
      <member refid="classtools_1a352a6965f2f3c768f0f4ecd1f978fcc0" prot="public" virt="non-virtual"><scope>meta</scope><name>split</name></member>
      <member refid="classmeta_1af80a1704ac18b80792418f212fa495e8" prot="public" virt="non-virtual"><scope>meta</scope><name>statsAlgorithm</name></member>
      <member refid="classtools_1a7b784121d8b368a64995feddc7083469" prot="public" virt="non-virtual"><scope>meta</scope><name>sum</name></member>
      <member refid="classmeta_1aac7753a039608875cd5a9ac66700e587" prot="public" virt="non-virtual"><scope>meta</scope><name>sum_of_weights</name></member>
      <member refid="classnotification_1a77a99c28092cf053b395805c75dde6da" prot="protected" virt="non-virtual"><scope>meta</scope><name>suppress_info</name></member>
      <member refid="classnotification_1ab2d4ba20d7bc164eece8982b413eab13" prot="protected" virt="non-virtual"><scope>meta</scope><name>suppress_warnings</name></member>
      <member refid="classtools_1afd037c109d75a9f119ec042e1ba922d9" prot="public" virt="non-virtual"><scope>meta</scope><name>to_string</name></member>
      <member refid="classtools_1a882f089d855dc4b3e0b60c591e11b092" prot="public" virt="non-virtual"><scope>meta</scope><name>to_string</name></member>
      <member refid="classtools_1af0028ec6242448428f7c548b6e7cb714" prot="public" virt="non-virtual"><scope>meta</scope><name>tools</name></member>
      <member refid="classmeta_1acf1fa18515c2dbf69475063ba348c0a6" prot="public" virt="non-virtual"><scope>meta</scope><name>totalEvents</name></member>
      <member refid="classmeta_1a4289afe6a2c6b19a57802eb613a3cef3" prot="public" virt="non-virtual"><scope>meta</scope><name>totalSize</name></member>
      <member refid="classtools_1a69be8c55f9fd7036080317a2ce98d4de" prot="public" virt="non-virtual"><scope>meta</scope><name>trim</name></member>
      <member refid="classtools_1ab46f1f3892604cb366b861cb54ce30e0" prot="public" virt="non-virtual"><scope>meta</scope><name>type_name</name></member>
      <member refid="classmeta_1a010d7051430c846fca8edf3a77833b22" prot="public" virt="non-virtual"><scope>meta</scope><name>version</name></member>
      <member refid="classnotification_1ab758dafbb449e142fb68e11c0470b5c9" prot="public" virt="non-virtual"><scope>meta</scope><name>Warning</name></member>
      <member refid="classmeta_1a25f9eca600500121ca02bc09eb6db3c1" prot="public" virt="non-virtual"><scope>meta</scope><name>weights</name></member>
      <member refid="classmeta_1a79162376cde773abd70adce92c5e7a55" prot="public" virt="non-virtual"><scope>meta</scope><name>~meta</name></member>
      <member refid="classnotification_1a0b7272463b149418caf592e398cae64e" prot="public" virt="non-virtual"><scope>meta</scope><name>~notification</name></member>
      <member refid="classtools_1a04762ddd5cc588520c89a387341f77f4" prot="public" virt="non-virtual"><scope>meta</scope><name>~tools</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
