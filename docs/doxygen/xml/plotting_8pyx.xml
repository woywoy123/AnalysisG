<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="plotting_8pyx" kind="file" language="C++">
    <compoundname>plotting.pyx</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>distutils:<sp/>language<sp/>=<sp/>c++</highlight></codeline>
<codeline><highlight class="normal">#<sp/>cython:<sp/>language_level<sp/>=<sp/>3</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">from<sp/>libcpp.string<sp/>cimport<sp/>string</highlight></codeline>
<codeline><highlight class="normal">from<sp/>libcpp.vector<sp/>cimport<sp/>vector</highlight></codeline>
<codeline><highlight class="normal">from<sp/>libcpp.map<sp/>cimport<sp/>map</highlight></codeline>
<codeline><highlight class="normal">from<sp/>libcpp<sp/>cimport<sp/>bool,<sp/>float</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">from<sp/>cython.operator<sp/>cimport<sp/>dereference<sp/>as<sp/>dref</highlight></codeline>
<codeline><highlight class="normal">from<sp/>scipy.stats<sp/>import<sp/>ks_2samp</highlight></codeline>
<codeline><highlight class="normal">import<sp/>matplotlib.pyplot<sp/>as<sp/>plt</highlight></codeline>
<codeline><highlight class="normal">import<sp/>boost_histogram<sp/>as<sp/>bh</highlight></codeline>
<codeline><highlight class="normal">import<sp/>mplhep<sp/>as<sp/>hep</highlight></codeline>
<codeline><highlight class="normal">import<sp/>numpy<sp/>as<sp/>np</highlight></codeline>
<codeline><highlight class="normal">import<sp/>random</highlight></codeline>
<codeline><highlight class="normal">import<sp/>pathlib</highlight></codeline>
<codeline><highlight class="normal">import<sp/>pickle</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">def<sp/>ratio(H1,<sp/>H2,<sp/>axis,<sp/>ylabel<sp/>=<sp/>&quot;Ratio&quot;,<sp/>normalize<sp/>=<sp/>False,<sp/>yerror<sp/>=<sp/>False,<sp/>this_hist<sp/>=<sp/>None):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>out<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>axis.set_ylim(0,<sp/>2)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>axis.set_ylabel(ylabel,<sp/>fontsize<sp/>=<sp/>this_hist.FontSize<sp/>*<sp/>(35<sp/>/<sp/>len(ylabel)),<sp/>loc<sp/>=<sp/>&quot;center&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>normalize:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1,<sp/>t2<sp/>=<sp/>H1.values(),<sp/>H2.values()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w1,<sp/>w2<sp/>=<sp/>H1.axes[0].widths,<sp/>H2.axes[0].widths</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1,<sp/>t2<sp/>=<sp/>(t1*w1)/((t1*w1).sum()),<sp/>(t2*w2)/((t2*w2).sum())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H1.reset()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H2.reset()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H1.view().value<sp/>=<sp/>t1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H2.view().value<sp/>=<sp/>t2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>float<sp/>v1,<sp/>v2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>vector[float]<sp/>h1<sp/>=<sp/>H1.counts().tolist()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>vector[float]<sp/>h2<sp/>=<sp/>H2.counts().tolist()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>vector[float]<sp/>s1<sp/>=<sp/>H1.variances().tolist()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>vector[float]<sp/>s2<sp/>=<sp/>H2.variances().tolist()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(h2.size()):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>(h1[i]<sp/>if<sp/>h1[i]<sp/>else<sp/>1)**2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v2<sp/>=<sp/>(h2[i]<sp/>if<sp/>h2[i]<sp/>else<sp/>1)**2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h2[i]<sp/>=<sp/>h1[i]/(h2[i]<sp/>if<sp/>h2[i]<sp/>else<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>yerror:<sp/>s2[i]<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>s2[i]<sp/>=<sp/>(h2[i]**2)*(<sp/>(s1[i]/v1)<sp/>+<sp/>(s2[i]/v2)<sp/>)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>H1.reset()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>H1.view().value<sp/><sp/><sp/><sp/>=<sp/>[v1<sp/>if<sp/>v1<sp/>&gt;<sp/>0<sp/>else<sp/>-1<sp/>for<sp/>v1<sp/>in<sp/>h2]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>H1.view().variance<sp/>=<sp/>[s2[i]<sp/>if<sp/>h2[i]<sp/>&gt;<sp/>0<sp/>else<sp/>0<sp/>for<sp/>i<sp/>in<sp/>range(s2.size())]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out[&quot;H&quot;]<sp/>=<sp/>H1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out[&quot;ax&quot;]<sp/>=<sp/>axis</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out[&quot;color&quot;]<sp/>=<sp/>&quot;black&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out[&quot;histtype&quot;]<sp/>=<sp/>&quot;errorbar&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out[&quot;markersize&quot;]<sp/>=<sp/>5</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>axis.axhline(1,<sp/>linestyle<sp/>=<sp/>&quot;--&quot;,<sp/>color<sp/>=<sp/>&quot;grey&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>out</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">def<sp/>chi2(H1,<sp/>H2,<sp/>axis,<sp/>ylabel<sp/>=<sp/>&quot;Ratio&quot;,<sp/>normalize<sp/>=<sp/>False,<sp/>yerror<sp/>=<sp/>False,<sp/>this_hist<sp/>=<sp/>None):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>out<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>axis.set_ylim(-1.2,<sp/>1.2)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>axis.set_ylabel(&quot;$\\frac{O_i<sp/>-<sp/>E_i}{|E_i|}$&quot;,<sp/>fontsize<sp/>=<sp/>this_hist.FontSize,<sp/>labelpad<sp/>=<sp/>0.1)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>normalize:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1,<sp/>t2<sp/>=<sp/>H1.values(),<sp/>H2.values()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w1,<sp/>w2<sp/>=<sp/>H1.axes[0].widths,<sp/>H2.axes[0].widths</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1,<sp/>t2<sp/>=<sp/>(t1*w1)/((t1*w1).sum()),<sp/>(t2*w2)/((t2*w2).sum())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H1.reset()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H2.reset()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H1.view().value<sp/>=<sp/>t1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H2.view().value<sp/>=<sp/>t2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>float<sp/>_chi2<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>vector[float]<sp/>h1<sp/>=<sp/>H1.counts().tolist()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>vector[float]<sp/>h2<sp/>=<sp/>H2.counts().tolist()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(h2.size()):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_chi2<sp/>+=<sp/>(h1[i]<sp/>-<sp/>h2[i])**2/(h2[i]<sp/>if<sp/>h2[i]<sp/>else<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h2[i]<sp/>=<sp/>(h1[i]<sp/>-<sp/>h2[i])/abs(h2[i]<sp/>if<sp/>h2[i]<sp/>else<sp/>1)<sp/>-<sp/>100*((h1[i]<sp/>+<sp/>h2[i])<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>H1.reset()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>H1.view().value<sp/>=<sp/>h2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out[&quot;H&quot;]<sp/>=<sp/>H1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out[&quot;ax&quot;]<sp/>=<sp/>axis</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out[&quot;color&quot;]<sp/>=<sp/>&quot;black&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out[&quot;marker&quot;]<sp/>=<sp/>this_hist.Marker</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out[&quot;histtype&quot;]<sp/>=<sp/>&quot;errorbar&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out[&quot;markersize&quot;]<sp/>=<sp/>5</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>out[&quot;add&quot;]<sp/>=<sp/>&quot;$\\left(\\chi^2<sp/>=<sp/>&quot;<sp/>+<sp/>&quot;{:e}&quot;.format(_chi2)<sp/>+<sp/>&quot;\\right)$&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>axis.axhline(0,<sp/>linestyle<sp/>=<sp/>&quot;--&quot;,<sp/>color<sp/>=<sp/>&quot;grey&quot;,<sp/>linewidth<sp/>=<sp/>1.0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>out</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>class<sp/>BasePlotting:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__cinit__(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr<sp/>=<sp/>new<sp/>plotting()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl<sp/>=<sp/>plt</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ApplyScaling<sp/>=<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.set_xmin<sp/>=<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.set_xmax<sp/>=<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.set_ymin<sp/>=<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.set_ymax<sp/>=<sp/>False</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>void<sp/>__figure__(self,<sp/>dict<sp/>com<sp/>=<sp/>{&quot;nrows&quot;<sp/>:<sp/>1,<sp/>&quot;ncols&quot;<sp/>:<sp/>1}):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com[&quot;figsize&quot;]<sp/>=<sp/>(self.ptr.xscaling,<sp/>self.ptr.yscaling)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>&quot;sharex&quot;<sp/>in<sp/>com:<sp/>com[&quot;figsize&quot;][0]*1.5</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._fig,<sp/>self._ax<sp/>=<sp/>self.matpl.subplots(**com)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>self._ax.set_autoscale_on(self.ptr.auto_scale)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except:<sp/>self._ax[0].set_autoscale_on(self.ptr.auto_scale)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>void<sp/>__resetplt__(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.clf()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.cla()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.close(&quot;all&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl<sp/>=<sp/>plt</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.rcdefaults()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.__figure__()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>__compile__(self,<sp/>bool<sp/>raw<sp/>=<sp/>False):<sp/>return<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__dealloc__(self):<sp/>del<sp/>self.ptr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__init__(self,<sp/>inpt<sp/>=<sp/>None):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>inpt<sp/>is<sp/>None:<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>list<sp/>keys<sp/>=<sp/>[i<sp/>for<sp/>i<sp/>in<sp/>self.__dir__()<sp/>if<sp/>not<sp/>i.startswith(&quot;__&quot;)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>keys:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>setattr(self,<sp/>i,<sp/>inpt[&quot;data&quot;][i])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>KeyError:<sp/>continue</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>AttributeError:<sp/>continue</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__reduce__(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>bool<sp/>cls</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>out<sp/>=<sp/>{&quot;data&quot;<sp/>:<sp/>{}}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>list<sp/>keys<sp/>=<sp/>[i<sp/>for<sp/>i<sp/>in<sp/>self.__dir__()<sp/>if<sp/>not<sp/>i.startswith(&quot;__&quot;)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>keys:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>cls<sp/>=<sp/>callable(getattr(self,<sp/>i))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except:<sp/>cls<sp/>=<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>cls:<sp/>continue</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>out[&quot;data&quot;][i]<sp/>=<sp/>getattr(self,<sp/>i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except:<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>self.__class__,<sp/>(out,)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>dump(self,<sp/>str<sp/>path<sp/>=<sp/>&quot;&quot;,<sp/>str<sp/>name<sp/>=<sp/>&quot;&quot;):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(name):<sp/>name<sp/>=<sp/>env(self.ptr.filename)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(path):<sp/>path<sp/>=<sp/>env(self.ptr.output_path)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pathlib.Path(path).mkdir(parents<sp/>=<sp/>True,<sp/>exist_ok<sp/>=<sp/>True)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>pickle.dump(self,<sp/>open(path<sp/>+<sp/>&quot;/&quot;<sp/>+<sp/>name<sp/>+<sp/>&quot;.pkl&quot;,<sp/>&quot;wb&quot;))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>OSError:<sp/>self.ptr.failure(b&quot;Failed<sp/>to<sp/>save<sp/>the<sp/>Plotting<sp/>Object&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>load(self,<sp/>str<sp/>path<sp/>=<sp/>&quot;&quot;,<sp/>str<sp/>name<sp/>=<sp/>&quot;&quot;):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(name):<sp/>name<sp/>=<sp/>env(self.ptr.filename)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(path):<sp/>path<sp/>=<sp/>env(self.ptr.output_path)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>return<sp/>pickle.load(open(path<sp/>+<sp/>&quot;/&quot;<sp/>+<sp/>name<sp/>+<sp/>&quot;.pkl&quot;,<sp/>&quot;rb&quot;))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>OSError:<sp/>print(&quot;Failed<sp/>to<sp/>load<sp/>the<sp/>Plotting<sp/>Object&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>EOFError:<sp/>print(&quot;Failed<sp/>to<sp/>load<sp/>the<sp/>Plotting<sp/>Object&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>None</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__add__(self,<sp/>BasePlotting<sp/>other):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.x_data.insert(<sp/>self.ptr.x_data.end()<sp/>,<sp/>other.ptr.x_data.begin()<sp/>,<sp/>other.ptr.x_data.end())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.y_data.insert(<sp/>self.ptr.y_data.end()<sp/>,<sp/>other.ptr.y_data.begin()<sp/>,<sp/>other.ptr.y_data.end())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.weights.insert(self.ptr.weights.end(),<sp/>other.ptr.weights.begin(),<sp/>other.ptr.weights.end())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>self</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__radd__(self,<sp/>other):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>isinstance(other,<sp/>BasePlotting):<sp/>return<sp/>self.__add__(other)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>BasePlotting<sp/>s<sp/>=<sp/>self.__class__()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>s.__add__(self)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Hatch(self):<sp/>return<sp/>env(self.ptr.hatch)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Hatch.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Hatch(self,<sp/>str<sp/>val):<sp/>self.ptr.hatch<sp/>=<sp/>enc(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>DPI(self):<sp/>return<sp/>self.ptr.dpi</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@DPI.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>DPI(self,<sp/>int<sp/>val):<sp/>self.ptr.dpi<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Style(self):<sp/>return<sp/>env(self.ptr.style)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Style.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Style(self,<sp/>str<sp/>val):<sp/>self.ptr.style<sp/>=<sp/>enc(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>CapSize(self):<sp/>return<sp/>self.ptr.cap_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@CapSize.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>CapSize(self,<sp/>float<sp/>val):<sp/>self.ptr.cap_size<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>ErrorBars(self):<sp/>return<sp/>self.ptr.errors</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@ErrorBars.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>ErrorBars(self,<sp/>bool<sp/>val):<sp/>self.ptr.errors<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Filename(self):<sp/>return<sp/>env(self.ptr.filename)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Filename.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Filename(self,<sp/>str<sp/>val):<sp/>self.ptr.filename<sp/>=<sp/>enc(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>OutputDirectory(self):<sp/>return<sp/>env(self.ptr.output_path)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@OutputDirectory.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>OutputDirectory(self,<sp/>str<sp/>val):<sp/>self.ptr.output_path<sp/>=<sp/>enc(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>FontSize(self):<sp/>return<sp/>self.ptr.font_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@FontSize.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>FontSize(self,<sp/>float<sp/>val):<sp/>self.ptr.font_size<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>AxisSize(self):<sp/>return<sp/>self.ptr.axis_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@AxisSize.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>AxisSize(self,<sp/>float<sp/>val):<sp/>self.ptr.axis_size<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>LegendSize(self):<sp/>return<sp/>self.ptr.legend_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@LegendSize.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>LegendSize(self,<sp/>float<sp/>val):<sp/>self.ptr.legend_size<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>TitleSize(self):<sp/>return<sp/>self.ptr.title_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@TitleSize.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>TitleSize(self,<sp/>float<sp/>val):<sp/>self.ptr.title_size<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>UseLateX(self):<sp/>return<sp/>self.ptr.use_latex</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@UseLateX.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>UseLateX(self,<sp/>bool<sp/>val):<sp/>self.ptr.use_latex<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xScaling(self):<sp/>return<sp/>self.ptr.xscaling</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@xScaling.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xScaling(self,<sp/>float<sp/>val):<sp/>self.ptr.xscaling<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yScaling(self):<sp/>return<sp/>self.ptr.yscaling</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@yScaling.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yScaling(self,<sp/>float<sp/>val):<sp/>self.ptr.yscaling<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>AutoScaling(self):<sp/>return<sp/>self.ptr.auto_scale</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@AutoScaling.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>AutoScaling(self,<sp/>bool<sp/>val):<sp/>self.ptr.auto_scale<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>LineStyle(self):<sp/>return<sp/>env(self.ptr.linestyle)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@LineStyle.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>LineStyle(self,<sp/>str<sp/>val):<sp/>self.ptr.linestyle<sp/>=<sp/>enc(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Title(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>str<sp/>titl<sp/>=<sp/>env(self.ptr.title)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>self.ptr.counts:<sp/>return<sp/>titl</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>self.ptr.x_data.size():<sp/>return<sp/>titl</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>titl<sp/>+<sp/>&quot;<sp/>(&quot;<sp/>+<sp/>str(round(float(sum(self.counts)),<sp/>3))<sp/>+<sp/>&quot;)&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Title.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Title(self,<sp/>str<sp/>val):<sp/>self.ptr.title<sp/>=<sp/>enc(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xTitle(self):<sp/>return<sp/>env(self.ptr.xtitle)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@xTitle.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xTitle(self,<sp/>str<sp/>val):<sp/>self.ptr.xtitle<sp/>=<sp/>enc(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yTitle(self):<sp/>return<sp/>env(self.ptr.ytitle)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@yTitle.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yTitle(self,<sp/>str<sp/>val):<sp/>self.ptr.ytitle<sp/>=<sp/>enc(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xLogarithmic(self):<sp/>return<sp/>self.ptr.x_logarithmic</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@xLogarithmic.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xLogarithmic(self,<sp/>bool<sp/>val):<sp/>self.ptr.x_logarithmic<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yLogarithmic(self):<sp/>return<sp/>self.ptr.y_logarithmic</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@yLogarithmic.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yLogarithmic(self,<sp/>bool<sp/>val):<sp/>self.ptr.y_logarithmic<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xStep(self):<sp/>return<sp/>self.ptr.x_step</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@xStep.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xStep(self,<sp/>float<sp/>val):<sp/>self.ptr.x_step<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yStep(self):<sp/>return<sp/>self.ptr.y_step</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@yStep.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yStep(self,<sp/>float<sp/>val):<sp/>self.ptr.y_step<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xMin(self):<sp/>return<sp/>self.ptr.x_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@xMin.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xMin(self,<sp/>float<sp/>val):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.set_xmin<sp/>=<sp/>True</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.x_min<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yMin(self):<sp/>return<sp/>self.ptr.y_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@yMin.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yMin(self,<sp/>float<sp/>val):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.set_ymin<sp/>=<sp/>True</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.y_min<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xMax(self):<sp/>return<sp/>self.ptr.x_max</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@xMax.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xMax(self,<sp/>float<sp/>val):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.set_xmax<sp/>=<sp/>True</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.x_max<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yMax(self):<sp/>return<sp/>self.ptr.y_max</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@yMax.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yMax(self,<sp/>float<sp/>val):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.set_ymax<sp/>=<sp/>True</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.y_max<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Overflow(self):<sp/>return<sp/>env(self.ptr.overflow)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Overflow.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Overflow(self,<sp/>val):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>isinstance(val,<sp/>int):<sp/>self.ptr.overflow<sp/>=<sp/>enc(&quot;sum&quot;<sp/>if<sp/>val<sp/>else<sp/>&quot;none&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>self.ptr.overflow<sp/>=<sp/>enc(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Color(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(self.ptr.color):<sp/>return<sp/>env(self.ptr.color)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.Color<sp/>=<sp/>&quot;#&quot;+&apos;&apos;.join([random.choice(&apos;0123456789ABCDEF&apos;)<sp/>for<sp/>j<sp/>in<sp/>range(6)])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>self.Color</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Color.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Color(self,<sp/>str<sp/>val):<sp/>self.ptr.color<sp/>=<sp/>enc(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Colors(self):<sp/>return<sp/>[env(i)<sp/>for<sp/>i<sp/>in<sp/>self.ptr.colors]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Colors.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Colors(self,<sp/>vals):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>isinstance(vals,<sp/>list):<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.colors<sp/>=<sp/>enc_list(vals)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>list<sp/>__ticks__(self,<sp/>float<sp/>s,<sp/>float<sp/>e,<sp/>float<sp/>st):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>list<sp/>tick<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>float<sp/>step<sp/>=<sp/>s</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>step<sp/>&lt;=<sp/>e:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tick.append(step)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step<sp/>+=<sp/>st</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>tick</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>SaveFigure(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.__resetplt__()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.Style<sp/>==<sp/>&quot;ATLAS&quot;:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.style.use(hep.style.ATLAS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.DPI<sp/>=<sp/>800</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>string<sp/>out<sp/>=<sp/>self.ptr.build_path()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>str<sp/>raw<sp/>=<sp/>env(out).replace(self.Filename<sp/>+<sp/>env(self.ptr.extension),<sp/>&quot;raw/&quot;<sp/>+<sp/>self.Filename<sp/>+<sp/>&quot;.pgf&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>com<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com[&quot;font.size&quot;]<sp/>=<sp/>self.ptr.font_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com[&quot;axes.labelsize&quot;]<sp/>=<sp/>self.ptr.axis_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com[&quot;legend.fontsize&quot;]<sp/>=<sp/>self.ptr.legend_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com[&quot;figure.titlesize&quot;]<sp/>=<sp/>self.ptr.title_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com[&quot;hatch.linewidth&quot;]<sp/>=<sp/>self.ptr.line_width</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com[&quot;text.usetex&quot;]<sp/>=<sp/>self.ptr.use_latex</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.ptr.use_latex:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com[&quot;pgf.texsystem&quot;]<sp/>=<sp/>&quot;lualatex&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com[&quot;text.latex.preamble&quot;]<sp/>=<sp/>r&quot;\usepackage{amsmath}&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com[&quot;pgf.preamble&quot;]<sp/>=<sp/>r&quot;\usepackage{amsmath}&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.rcParams.update(**com)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.__compile__()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>self._ax.set_title(self.Title,<sp/>fontsize<sp/>=<sp/>self.ptr.title_size)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>AttributeError:<sp/>self.matpl.suptitle(self.Title,<sp/>fontsize<sp/>=<sp/>self.ptr.font_size,<sp/>y<sp/>=<sp/>1.0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.xlabel(self.xTitle,<sp/>fontsize<sp/>=<sp/>self.ptr.font_size,<sp/>labelpad<sp/>=<sp/>0.1)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>&quot;&lt;units&gt;&quot;<sp/>not<sp/>in<sp/>self.yTitle:<sp/>yl<sp/>=<sp/>self.yTitle</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>yl<sp/>=<sp/>self.yTitle.replace(&quot;&lt;units&gt;&quot;,<sp/>str(round((self.xMax<sp/>-<sp/>self.xMin)/self.xBins,<sp/>3)))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>self._ax.set_ylabel(yl,<sp/>fontsize<sp/>=<sp/>self.ptr.font_size)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>AttributeError:<sp/>self._ax[0].set_ylabel(yl,<sp/>fontsize<sp/>=<sp/>self.ptr.font_size)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.xLogarithmic:<sp/>self.matpl.xscale(&quot;log&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.yLogarithmic:<sp/>self.matpl.yscale(&quot;log&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.ptr.variable_x_bins.size():<sp/>self.matpl.xticks(self.ptr.variable_x_bins,<sp/>fontsize<sp/>=<sp/>self.ptr.axis_size)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.xStep<sp/>&gt;<sp/>0:<sp/>self.matpl.xticks(self.__ticks__(self.xMin,<sp/>self.xMax,<sp/>self.xStep),<sp/>fontsize<sp/>=<sp/>self.ptr.axis_size)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>self.matpl.xticks(fontsize<sp/>=<sp/>self.ptr.axis_size)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.ptr.variable_y_bins.size():<sp/>self.matpl.yticks(self.ptr.variable_y_bins,<sp/>fontsize<sp/>=<sp/>self.ptr.axis_size)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.yStep<sp/>&gt;<sp/>0:<sp/>self.matpl.yticks(self.__ticks__(self.yMin,<sp/>self.yMax,<sp/>self.yStep),<sp/>fontsize<sp/>=<sp/>self.ptr.axis_size)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>self.matpl.yticks(fontsize<sp/>=<sp/>self.ptr.axis_size)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.gcf().set_size_inches(self.ptr.xscaling,<sp/>self.ptr.yscaling)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com[&quot;dpi&quot;]<sp/>=<sp/>self.ptr.dpi</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com[&quot;bbox_inches&quot;]<sp/>=<sp/>&quot;tight&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com[&quot;pad_inches&quot;]<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com[&quot;transparent&quot;]<sp/>=<sp/>True</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>com[&quot;backend&quot;]<sp/>=<sp/>&quot;pgf&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.savefig(env(out),<sp/>**com)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.savefig(raw,<sp/>**com)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.close(&quot;all&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.success(b&quot;Finished<sp/>Plotting:<sp/>&quot;<sp/>+<sp/>out)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>Exception<sp/>as<sp/>error:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.failure(b&quot;Failed<sp/>Plotting...<sp/>Dumping<sp/>State...&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.failure(enc(str(error)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.dump()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>class<sp/>TH1F(BasePlotting):</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__cinit__(self):<sp/>self.ptr.prefix<sp/>=<sp/>b&quot;TH1F&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__init__(self,<sp/>inpt<sp/>=<sp/>None,<sp/>**kwargs):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.Histograms<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.Histogram<sp/>=<sp/>None</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(kwargs):<sp/>inpt<sp/>=<sp/>{&quot;data&quot;<sp/>:<sp/>dict(kwargs)}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>inpt<sp/>is<sp/>None:<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>list<sp/>keys<sp/>=<sp/>[i<sp/>for<sp/>i<sp/>in<sp/>self.__dir__()<sp/>if<sp/>not<sp/>i.startswith(&quot;__&quot;)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>keys:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>setattr(self,<sp/>i,<sp/>inpt[&quot;data&quot;][i])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>KeyError:<sp/>continue</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>AttributeError:<sp/>continue</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except:<sp/>pass</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xData(self):<sp/>return<sp/>self.ptr.x_data;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@xData.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xData(self,<sp/>list<sp/>val):<sp/>self.ptr.x_data<sp/>=<sp/>&lt;vector[float]&gt;(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xBins(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>self.ptr.variable_x_bins.size():<sp/>return<sp/>self.ptr.x_bins</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>return<sp/>self.ptr.variable_x_bins</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@xBins.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xBins(self,<sp/>val):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>isinstance(val,<sp/>int):<sp/>self.ptr.x_bins<sp/>=<sp/>val</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>isinstance(val,<sp/>list):<sp/>self.ptr.variable_x_bins<sp/>=<sp/>&lt;vector[float]&gt;(val)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>self.ptr.warning(b&quot;Invalid<sp/>Bins<sp/>specified&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>CrossSection(self):<sp/>return<sp/>self.ptr.cross_section</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@CrossSection.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>CrossSection(self,<sp/>val):<sp/>self.ptr.cross_section<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>IntegratedLuminosity(self):<sp/>return<sp/>self.ptr.integrated_luminosity</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@IntegratedLuminosity.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>IntegratedLuminosity(self,<sp/>val):<sp/>self.ptr.integrated_luminosity<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>HistFill(self):<sp/>return<sp/>env(self.ptr.histfill)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@HistFill.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>HistFill(self,<sp/>str<sp/>val):<sp/>self.ptr.histfill<sp/>=<sp/>enc(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Stacked(self):<sp/>return<sp/>self.ptr.stack</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Stacked.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Stacked(self,<sp/>bool<sp/>val):<sp/>self.ptr.stack<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>LineWidth(self):<sp/>return<sp/>self.ptr.line_width</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@LineWidth.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>LineWidth(self,<sp/>float<sp/>val):<sp/>self.ptr.line_width<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Alpha(self):<sp/>return<sp/>self.ptr.alpha</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Alpha.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Alpha(self,<sp/>float<sp/>v):<sp/>self.ptr.alpha<sp/>=<sp/>v</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Density(self):<sp/>return<sp/>self.ptr.density</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Density.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Density(self,<sp/>bool<sp/>val):<sp/>self.ptr.density<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>counts(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>return<sp/>sum(self.__compile__(True)[&quot;H&quot;]).counts()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>ValueError:<sp/>return<sp/>[]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Marker(self):<sp/>return<sp/>env(self.ptr.marker)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Marker.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Marker(self,<sp/>str<sp/>v):<sp/>self.ptr.marker<sp/>=<sp/>enc(v)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xLabels(self):<sp/>return<sp/>as_basic_udict(&amp;self.ptr.x_labels)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@xLabels.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xLabels(self,<sp/>dict<sp/>val):<sp/>as_umap(val,<sp/>&amp;self.ptr.x_labels)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Weights(self):<sp/>return<sp/>self.ptr.weights</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Weights.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Weights(self,<sp/>list<sp/>val):<sp/>self.ptr.weights<sp/>=<sp/>&lt;vector[float]&gt;(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>ShowCount(self):<sp/>return<sp/>self.ptr.counts</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@ShowCount.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>ShowCount(self,<sp/>bool<sp/>val):<sp/>self.ptr.counts<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>FX(self,<sp/>val<sp/>=<sp/>None):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>isinstance(val,<sp/>str):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/><sp/><sp/>val.lower()<sp/>==<sp/>&quot;ratio&quot;:<sp/>self.fx<sp/>=<sp/>ratio</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>val.lower()<sp/>==<sp/>&quot;chi2&quot;:<sp/>self.fx<sp/>=<sp/>chi2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>self.ptr.warning(b&quot;Input<sp/>Option:<sp/>&quot;<sp/>+<sp/>enc(val)<sp/>+<sp/>&quot;<sp/>is<sp/>an<sp/>invalid<sp/>option!<sp/>(ratio,<sp/>ratio_chi2)&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>val<sp/>is<sp/>None:<sp/>self.fx<sp/>=<sp/>ratio</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>self.fx<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>KStest(self,<sp/>TH1F<sp/>hist):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hist_min<sp/>=<sp/>self.xMin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hist_max<sp/>=<sp/>self.xMax</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hist_bin<sp/>=<sp/>self.xBins</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>float<sp/>i</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[float]<sp/>h1<sp/>=<sp/>[i<sp/>for<sp/>i<sp/>in<sp/>self.ptr.x_data<sp/>if<sp/>i<sp/>&gt;=<sp/>hist_min<sp/>and<sp/>i<sp/>&lt;=<sp/>hist_max]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[float]<sp/>h2<sp/>=<sp/>[i<sp/>for<sp/>i<sp/>in<sp/>hist.ptr.x_data<sp/>if<sp/>i<sp/>&gt;=<sp/>hist_min<sp/>and<sp/>i<sp/>&lt;=<sp/>hist_max]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ks_2samp(h1,<sp/>h2)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>__error__(self,<sp/>vector[float]<sp/>xarr,<sp/>vector[float]<sp/>up,<sp/>vector[float]<sp/>low,<sp/>str<sp/>label<sp/>=<sp/>&quot;Uncertainty&quot;,<sp/>str<sp/>color<sp/>=<sp/>&quot;k&quot;):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>ax<sp/>=<sp/>self._ax[0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except:<sp/>ax<sp/>=<sp/>self._ax</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>apl<sp/>=<sp/>{&quot;step&quot;<sp/>:<sp/>&quot;post&quot;,<sp/>&quot;hatch&quot;<sp/>:<sp/>&quot;///&quot;,<sp/>&quot;alpha&quot;<sp/>:<sp/>0.15,<sp/>&quot;linewidth&quot;<sp/>:<sp/>0.0}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(label):<sp/>apl[&quot;label&quot;]<sp/>=<sp/>label</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apl[&quot;facecolor&quot;]<sp/>=<sp/>color<sp/>if<sp/>len(color)<sp/>else<sp/>None</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apl[&quot;edgecolor&quot;]<sp/>=<sp/>(&quot;k&quot;,<sp/>1.0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax.fill_between(xarr,<sp/>low,<sp/>up,<sp/>**apl)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apl<sp/>=<sp/>{&quot;hatch&quot;<sp/>:<sp/>&quot;///&quot;,<sp/>&quot;step&quot;:<sp/>&quot;post&quot;,<sp/>&quot;alpha&quot;<sp/>:<sp/>0.00}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>self.matpl.fill_between(xarr,<sp/>low,<sp/>up,<sp/>**apl)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>__get_error_seg__(self,<sp/>plot,<sp/>str<sp/>label<sp/>=<sp/>&quot;Uncertainty&quot;,<sp/>str<sp/>color<sp/>=<sp/>&quot;k&quot;):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>plot.errorbar.lines[2][0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>list<sp/>k</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>int<sp/>ix<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[float]<sp/>w_arr<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[float]<sp/>x_arr<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[float]<sp/>y_err_up<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[float]<sp/>y_err_lo<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>error.get_segments():</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>i.tolist()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_arr.push_back(k[0][0])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_err_lo.push_back(k[0][1])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>k[0][1]<sp/>==<sp/>0:<sp/>y_err_up.push_back(0.0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>y_err_up.push_back(k[1][1])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>ix:<sp/>w_arr.push_back(abs(x_arr[ix-1]<sp/>-<sp/>x_arr[ix]))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>+=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>-=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(ix):<sp/>x_arr[i]<sp/>=<sp/>x_arr[i]<sp/>-<sp/>w_arr[i]*0.5</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_arr[ix]<sp/>=<sp/>x_arr[ix]<sp/>-<sp/>w_arr[ix-1]*0.5</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_arr.push_back(x_arr[ix]<sp/>+<sp/>w_arr[ix-1])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_err_lo.push_back(y_err_lo[ix])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_err_up.push_back(y_err_up[ix])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>self.__error__(x_arr,<sp/>y_err_lo,<sp/>y_err_up,<sp/>label,<sp/>color)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>float<sp/>scale_f(self):<sp/>return<sp/>self.CrossSection<sp/>*<sp/>self.IntegratedLuminosity</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>factory(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>histpl<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;histtype&quot;]<sp/>=<sp/>self.HistFill</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;yerr&quot;]<sp/>=<sp/>self.ErrorBars</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;stack&quot;]<sp/>=<sp/>self.Stacked</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;hatch&quot;]<sp/>=<sp/>[]<sp/>if<sp/>not<sp/>len(self.Hatch)<sp/>else<sp/>[self.Hatch]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;linewidth&quot;]<sp/>=<sp/>self.LineWidth</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;edgecolor&quot;]<sp/>=<sp/>&quot;black&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;alpha&quot;]<sp/>=<sp/><sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;binticks&quot;]<sp/>=<sp/>True</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;edges&quot;]<sp/>=<sp/>True</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;density&quot;]<sp/>=<sp/>self.Density</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;flow&quot;]<sp/>=<sp/>self.Overflow</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;label&quot;]<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;H&quot;]<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;color&quot;]<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.ptr.x_data.size():<sp/>histpl[&quot;color&quot;]<sp/>+=<sp/>[self.Color]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>histpl</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>__build__(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>labels<sp/>=<sp/>self.xLabels</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>float<sp/>_max,<sp/>_min</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(labels):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.set_xmin:<sp/>_min<sp/>=<sp/>self.ptr.x_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>not<sp/>len(labels)<sp/>and<sp/>not<sp/>len(self.xData):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>_min<sp/>=<sp/>self.ptr.get_min(b&quot;x&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(labels):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.set_xmax:<sp/>_max<sp/>=<sp/>self.ptr.x_max</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>not<sp/>len(labels)<sp/>and<sp/>not<sp/>len(self.xData):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>_max<sp/>=<sp/>self.ptr.get_max(b&quot;x&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(labels):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ax_<sp/>=<sp/>bh.axis.StrCategory(list(labels))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.weights<sp/>=<sp/>&lt;vector[float]&gt;(list(labels.values()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.ptr.variable_x_bins.size():<sp/>ax_<sp/>=<sp/>bh.axis.Variable(self.ptr.variable_x_bins)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>ax_<sp/>=<sp/>bh.axis.Regular(self.ptr.x_bins,<sp/>_min,<sp/>_max)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>bh.Histogram(ax_,<sp/>storage<sp/>=<sp/>bh.storage.Weight())</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>self.ptr.weights.size():<sp/>h.fill(self.ptr.x_data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>len(labels):<sp/>h.fill(list(labels),<sp/>weight<sp/>=<sp/>self.ptr.weights)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>h.fill(self.ptr.x_data,<sp/>weight<sp/>=<sp/>self.ptr.weights)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>float<sp/>norm<sp/>=<sp/>float(sum(h.counts()))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.Density:<sp/>h<sp/>*=<sp/>1/(norm<sp/>if<sp/>norm<sp/>!=<sp/>0<sp/>else<sp/>1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.ApplyScaling:<sp/>h<sp/>*=<sp/>self.scale_f()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>h</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>__compile__(self,<sp/>bool<sp/>raw<sp/>=<sp/>False):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>labels<sp/>=<sp/>self.xLabels</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>float<sp/>x_max,<sp/>x_min</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(labels):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.set_xmin:<sp/>x_min<sp/>=<sp/>self.ptr.x_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>not<sp/>len(labels)<sp/>and<sp/>not<sp/>len(self.xData):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.ptr.variable_x_bins.size():<sp/>x_min<sp/>=<sp/>self.ptr.variable_x_bins.front()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>x_min<sp/>=<sp/>self.ptr.get_min(b&quot;x&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(labels):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.set_xmax:<sp/>x_max<sp/>=<sp/>self.ptr.x_max</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>not<sp/>len(labels)<sp/>and<sp/>not<sp/>len(self.xData):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.ptr.variable_x_bins.size():<sp/>x_max<sp/>=<sp/>self.ptr.variable_x_bins.back()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>x_max<sp/>=<sp/>self.ptr.get_max(b&quot;x&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_max,<sp/>y_min<sp/>=<sp/>None,<sp/>None</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.set_ymin:<sp/>y_min<sp/>=<sp/>self.ptr.y_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.set_ymax:<sp/>y_max<sp/>=<sp/>self.ptr.y_max</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>TH1F<sp/>h</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>histpl<sp/>=<sp/>self.factory()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.Histogram<sp/>is<sp/>not<sp/>None:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(labels):<sp/>self.Histogram.xMin<sp/><sp/>=<sp/>self.xMin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(labels):<sp/>self.Histogram.xMax<sp/><sp/>=<sp/>self.xMax</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(labels):<sp/>self.Histogram.xBins<sp/>=<sp/>self.xBins</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.ShowCount:<sp/><sp/>self.Histogram.ShowCount<sp/>=<sp/>self.ShowCount</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;H&quot;]<sp/><sp/><sp/><sp/><sp/>+=<sp/>[self.Histogram.__build__()]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;label&quot;]<sp/>+=<sp/>[self.Histogram.Title]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;color&quot;]<sp/>+=<sp/>[self.Histogram.Color]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;hatch&quot;]<sp/>+=<sp/>[self.Histogram.Hatch]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;alpha&quot;]<sp/>+=<sp/>[self.Histogram.Alpha]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(self.xData)<sp/>or<sp/>len(labels):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl<sp/>=<sp/>self.factory()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(self.Histograms)<sp/>and<sp/>not<sp/>len(self.xData):<sp/>histpl[&quot;label&quot;]<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;label&quot;]<sp/>=<sp/>None</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;H&quot;]<sp/><sp/><sp/><sp/><sp/>=<sp/>[self.__build__()]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>raw:<sp/>return<sp/>histpl</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hep.histplot(**histpl)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>h<sp/>in<sp/>self.Histograms:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(labels):<sp/>h.xMin<sp/><sp/>=<sp/>self.xMin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(labels):<sp/>h.xMax<sp/><sp/>=<sp/>self.xMax</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(labels):<sp/>h.xBins<sp/>=<sp/>self.xBins</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.ShowCount:<sp/><sp/>h.ShowCount<sp/>=<sp/>self.ShowCount</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;label&quot;]<sp/>+=<sp/>[h.Title]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;H&quot;]<sp/><sp/><sp/><sp/><sp/>+=<sp/>[h.__build__()]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;color&quot;]<sp/>+=<sp/>[h.Color]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;hatch&quot;]<sp/>+=<sp/>[h.Hatch]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;alpha&quot;]<sp/>+=<sp/>[h.Alpha]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>raw:<sp/>return<sp/>histpl</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(histpl[&quot;H&quot;]):<sp/>return<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.ErrorBars<sp/>and<sp/>self.Histogram<sp/>is<sp/>not<sp/>None<sp/>and<sp/>self.fx<sp/>is<sp/>None:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>list(histpl[&quot;label&quot;])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lg<sp/>=<sp/>list(histpl[&quot;H&quot;])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>histpl[&quot;edgecolor&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;histtype&quot;]<sp/>=<sp/>&quot;step&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;H&quot;]<sp/>=<sp/>[self.Histogram.__build__()]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;label&quot;]<sp/>=<sp/>[self.Histogram.Title<sp/>+<sp/>&quot;<sp/>(Uncertainty)&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>hep.histplot(**histpl)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;histtype&quot;]<sp/>=<sp/>&quot;fill&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;edgecolor&quot;]<sp/>=<sp/>&quot;black&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;label&quot;]<sp/>=<sp/>l</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;H&quot;]<sp/>=<sp/>lg</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hep.histplot(**histpl)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.__get_error_seg__(error[0])</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.Histogram<sp/>is<sp/>not<sp/>None<sp/>and<sp/>len(self.Histograms)<sp/>and<sp/>self.Stacked:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.__figure__({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;nrows&quot;<sp/>:<sp/>2,<sp/>&quot;ncols&quot;<sp/>:<sp/>1,<sp/>&quot;sharex&quot;<sp/>:<sp/>True,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;gridspec_kw&quot;<sp/>:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;height_ratios&quot;<sp/>:<sp/>[4,<sp/>1],<sp/>&quot;hspace&quot;<sp/>:<sp/>0.05</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy[&quot;linewidth&quot;]<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy[&quot;histtype&quot;]<sp/><sp/>=<sp/>&quot;step&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy[&quot;yerr&quot;]<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>True</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy[&quot;ax&quot;]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>self._ax[0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy[&quot;H&quot;]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sum(histpl[&quot;H&quot;][1:])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>hep.histplot(**cpy)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy[&quot;color&quot;]<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>&quot;black&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy[&quot;H&quot;]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>histpl[&quot;H&quot;].pop(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy[&quot;label&quot;]<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>histpl[&quot;label&quot;].pop(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy[&quot;alpha&quot;]<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>histpl[&quot;alpha&quot;].pop(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy[&quot;histtype&quot;]<sp/><sp/><sp/>=<sp/>&quot;errorbar&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy[&quot;markersize&quot;]<sp/>=<sp/>5</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy[&quot;linewidth&quot;]<sp/><sp/>=<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy[&quot;stack&quot;]<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy[&quot;ax&quot;]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>self._ax[0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hep.histplot(**cpy)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>histpl[&quot;hatch&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;color&quot;].pop(0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;ax&quot;]<sp/>=<sp/>self._ax[0]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hep.histplot(**histpl)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.__get_error_seg__(error[0])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._ax[0].legend(loc<sp/>=<sp/>&quot;upper<sp/>right&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._ax[0].set_xlim(x_min,<sp/>x_max,<sp/>auto<sp/>=<sp/>True)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._ax[0].set_ylim(y_min,<sp/>y_max,<sp/>auto<sp/>=<sp/>True)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.fx<sp/>is<sp/>None:<sp/>self.FX()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy<sp/>=<sp/>self.fx(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum(histpl[&quot;H&quot;]),<sp/>cpy[&quot;H&quot;],<sp/>self._ax[1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Ratio<sp/>-<sp/>(&quot;<sp/>+<sp/>self.Histogram.Title<sp/>+<sp/>&quot;/&quot;<sp/>+<sp/>cpy[&quot;label&quot;],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.Density,<sp/>self.ErrorBars</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hep.histplot(**cpy)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.Histogram<sp/>is<sp/>not<sp/>None<sp/>and<sp/>len(self.Histograms)<sp/>and<sp/>not<sp/>self.Stacked:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.__figure__({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;nrows&quot;<sp/>:<sp/>2,<sp/>&quot;ncols&quot;<sp/>:<sp/>1,<sp/>&quot;sharex&quot;<sp/>:<sp/>True,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;gridspec_kw&quot;<sp/>:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;height_ratios&quot;<sp/>:<sp/>[4,<sp/>1],<sp/>&quot;hspace&quot;<sp/>:<sp/>0.03</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;ax&quot;]<sp/>=<sp/>self._ax[0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hep.histplot(**histpl)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._ax[0].legend(loc<sp/>=<sp/>&quot;upper<sp/>right&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.fx<sp/>is<sp/>None:<sp/>self.FX()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(self.Histograms)<sp/>&gt;<sp/>1:<sp/>yl<sp/>=<sp/>&quot;$\\frac{\\text{&quot;<sp/>+<sp/>self.Histogram.Title<sp/>+<sp/>&quot;}}{H_{X}})$&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>yl<sp/>=<sp/>&quot;$\\frac{\\text{&quot;<sp/>+<sp/>self.Histogram.Title<sp/>+<sp/>&quot;}}{\\text{&quot;<sp/>+<sp/>self.Histograms[0].Title<sp/>+<sp/>&quot;}}$&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(1,<sp/>len(histpl[&quot;H&quot;])):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>cpy<sp/>=<sp/>self.fx(histpl[&quot;H&quot;][0].copy(),<sp/>histpl[&quot;H&quot;][i].copy(),<sp/>self._ax[1],<sp/>yl,<sp/>self.Density,<sp/>histpl[&quot;yerr&quot;],<sp/>self.Histograms[i-1])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except:<sp/>cpy<sp/>=<sp/>self.fx(histpl[&quot;H&quot;][0].copy(),<sp/>histpl[&quot;H&quot;][i].copy(),<sp/>self._ax[1],<sp/>self.Histograms[i-1])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpy[&quot;color&quot;]<sp/>=<sp/>histpl[&quot;color&quot;][i]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>&quot;label&quot;<sp/>not<sp/>in<sp/>cpy:<sp/>cpy[&quot;label&quot;]<sp/>=<sp/>histpl[&quot;label&quot;][i]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>&quot;add&quot;<sp/>in<sp/>cpy:<sp/>cpy[&quot;label&quot;]<sp/>+=<sp/>&quot;<sp/>&quot;<sp/>+<sp/>cpy[&quot;add&quot;];<sp/>del<sp/>cpy[&quot;add&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hep.histplot(**cpy)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._ax[1].legend(loc<sp/>=<sp/>&quot;best&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.Histogram<sp/>is<sp/>None<sp/>and<sp/>len(self.Histograms)<sp/>and<sp/>self.ErrorBars:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hts<sp/>=<sp/>dict(histpl)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>hts[&quot;hatch&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>hts[&quot;edgecolor&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>hts[&quot;label&quot;]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hts[&quot;alpha&quot;]<sp/>=<sp/>0.0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hts[&quot;histtype&quot;]<sp/>=<sp/>&quot;errorbar&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>hep.histplot(**hts)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hep.histplot(**histpl)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdl<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(len(error)):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(error[i]):<sp/>continue</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hd<sp/>=<sp/>self.__get_error_seg__(error[i],<sp/>histpl[&quot;label&quot;][ix]<sp/>+<sp/>&quot;<sp/>(Uncertainty)&quot;,<sp/>histpl[&quot;color&quot;][ix])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdl.append(hd)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix+=1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#self._ax.legend(handles<sp/>=<sp/>hdl,<sp/>ncol<sp/>=<sp/>2)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.ErrorBars:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;H&quot;]<sp/>=<sp/>[self.__build__()]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hts<sp/>=<sp/>dict(histpl)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>&quot;hatch&quot;<sp/>in<sp/>histpl:<sp/>del<sp/>hts[&quot;hatch&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>&quot;label&quot;<sp/>in<sp/>histpl:<sp/>del<sp/>hts[&quot;label&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>&quot;edgecolor&quot;<sp/>in<sp/>histpl:<sp/>del<sp/>hts[&quot;edgecolor&quot;]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hts[&quot;alpha&quot;]<sp/>=<sp/>0.0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hts[&quot;binticks&quot;]<sp/>=<sp/>True</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hts[&quot;histtype&quot;]<sp/>=<sp/>&quot;errorbar&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>hep.histplot(**hts)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hep.histplot(**histpl)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.__get_error_seg__(error[0])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>hep.histplot(**histpl)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(labels):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._ax.set_xlim(x_min,<sp/>x_max,<sp/>auto<sp/>=<sp/>True)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._ax.set_ylim(y_min,<sp/>y_max,<sp/>auto<sp/>=<sp/>True)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._ax.legend(loc<sp/>=<sp/>&quot;upper<sp/>right&quot;,<sp/>ncol<sp/>=<sp/>2<sp/>*<sp/>(1<sp/>-<sp/>0.5*(not<sp/>self.ErrorBars)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>class<sp/>TH2F(BasePlotting):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__cinit__(self):<sp/>self.ptr.prefix<sp/>=<sp/>b&quot;TH2F&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__init__(self,<sp/>inpt<sp/>=<sp/>None,<sp/>**kwargs):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.Color<sp/>=<sp/>&quot;plasma&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(kwargs):<sp/>inpt<sp/>=<sp/>{&quot;data&quot;<sp/>:<sp/>dict(kwargs)}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>inpt<sp/>is<sp/>None:<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>list<sp/>keys<sp/>=<sp/>[i<sp/>for<sp/>i<sp/>in<sp/>self.__dir__()<sp/>if<sp/>not<sp/>i.startswith(&quot;__&quot;)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>keys:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>setattr(self,<sp/>i,<sp/>inpt[&quot;data&quot;][i])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>KeyError:<sp/>continue</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>AttributeError:<sp/>continue</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yBins(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>self.ptr.variable_y_bins.size():<sp/>return<sp/>self.ptr.y_bins</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>return<sp/>self.ptr.variable_y_bins</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@yBins.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yBins(self,<sp/>val):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>isinstance(val,<sp/>int):<sp/>self.ptr.y_bins<sp/>=<sp/>val</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>isinstance(val,<sp/>list):<sp/>self.ptr.variable_y_bins<sp/>=<sp/>&lt;vector[float]&gt;(val)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>self.ptr.warning(b&quot;Invalid<sp/>Bins<sp/>specified&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xBins(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>self.ptr.variable_x_bins.size():<sp/>return<sp/>self.ptr.x_bins</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>return<sp/>self.ptr.variable_x_bins</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@xBins.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xBins(self,<sp/>val):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>isinstance(val,<sp/>int):<sp/>self.ptr.x_bins<sp/>=<sp/>val</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>isinstance(val,<sp/>list):<sp/>self.ptr.variable_x_bins<sp/>=<sp/>&lt;vector[float]&gt;(val)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>self.ptr.warning(b&quot;Invalid<sp/>Bins<sp/>specified&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xLabels(self):<sp/>return<sp/>as_basic_udict(&amp;self.ptr.x_labels)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@xLabels.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xLabels(self,<sp/>dict<sp/>val):<sp/>as_umap(val,<sp/>&amp;self.ptr.x_labels)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yLabels(self):<sp/>return<sp/>as_basic_udict(&amp;self.ptr.y_labels)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@yLabels.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yLabels(self,<sp/>dict<sp/>val):<sp/>as_umap(val,<sp/>&amp;self.ptr.y_labels)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xData(self):<sp/>return<sp/>self.ptr.x_data;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@xData.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xData(self,<sp/>list<sp/>val):<sp/>self.ptr.x_data<sp/>=<sp/>&lt;vector[float]&gt;(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yData(self):<sp/>return<sp/>self.ptr.y_data;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@yData.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yData(self,<sp/>list<sp/>val):<sp/>self.ptr.y_data<sp/>=<sp/>&lt;vector[float]&gt;(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Weights(self):<sp/>return<sp/>self.ptr.weights</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Weights.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Weights(self,<sp/>list<sp/>val):<sp/>self.ptr.weights<sp/>=<sp/>&lt;vector[float]&gt;(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>__build__(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>float<sp/>x_max,<sp/>x_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>xlabels<sp/>=<sp/>self.xLabels</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(xlabels):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.set_xmin:<sp/>x_min<sp/>=<sp/>self.ptr.x_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>not<sp/>len(xlabels)<sp/>and<sp/>not<sp/>len(self.xData):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.ptr.variable_x_bins.size():<sp/>x_min<sp/>=<sp/>self.ptr.variable_x_bins.front()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>x_min<sp/>=<sp/>self.ptr.get_min(b&quot;x&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(xlabels):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.set_xmax:<sp/>x_max<sp/>=<sp/>self.ptr.x_max</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>not<sp/>len(xlabels)<sp/>and<sp/>not<sp/>len(self.xData):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.ptr.variable_x_bins.size():<sp/>x_max<sp/>=<sp/>self.ptr.variable_x_bins.back()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>x_max<sp/>=<sp/>self.ptr.get_max(b&quot;x&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>float<sp/>y_max,<sp/>y_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>ylabels<sp/>=<sp/>self.yLabels</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(ylabels):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.set_ymin:<sp/>y_min<sp/>=<sp/>self.ptr.y_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>not<sp/>len(ylabels)<sp/>and<sp/>not<sp/>len(self.yData):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.ptr.variable_y_bins.size():<sp/>y_min<sp/>=<sp/>self.ptr.variable_y_bins.front()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>y_min<sp/>=<sp/>self.ptr.get_min(b&quot;y&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(ylabels):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.set_xmax:<sp/>y_max<sp/>=<sp/>self.ptr.y_max</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>not<sp/>len(ylabels)<sp/>and<sp/>not<sp/>len(self.yData):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.ptr.variable_x_bins.size():<sp/>y_max<sp/>=<sp/>self.ptr.variable_y_bins.back()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>y_max<sp/>=<sp/>self.ptr.get_max(b&quot;y&quot;)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.ptr.variable_x_bins.size():<sp/>ax_<sp/>=<sp/>bh.axis.Variable(self.ptr.variable_x_bins)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>ax_<sp/>=<sp/>bh.axis.Regular(self.ptr.x_bins,<sp/>x_min,<sp/>x_max)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.ptr.variable_y_bins.size():<sp/>ay_<sp/>=<sp/>bh.axis.Variable(self.ptr.variable_y_bins)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>ay_<sp/>=<sp/>bh.axis.Regular(self.ptr.y_bins,<sp/>y_min,<sp/>y_max)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>bh.Histogram(ax_,<sp/>ay_,<sp/>storage<sp/>=<sp/>bh.storage.Weight())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>self.ptr.weights.size():<sp/>h.fill(self.ptr.x_data,<sp/>self.ptr.y_data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>h.fill(self.ptr.x_data,<sp/>self.ptr.y_data,<sp/>weight<sp/>=<sp/>self.ptr.weights)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>h</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>__compile__(self,<sp/>bool<sp/>raw<sp/>=<sp/>False):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>histpl<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;H&quot;]<sp/>=<sp/>self.__build__()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(self.Color):<sp/>histpl[&quot;cmap&quot;]<sp/>=<sp/>self.Color</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;alpha&quot;]<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;antialiased&quot;]<sp/>=<sp/>True</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;linewidth&quot;]<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;zorder&quot;]<sp/>=<sp/>-1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>histpl[&quot;cbarpad&quot;]<sp/>=<sp/>0.1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hst<sp/>=<sp/>hep.hist2dplot(**histpl)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbar<sp/>=<sp/>hst.cbar</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbar.set_label(&apos;Bin<sp/>Content&apos;,<sp/>loc<sp/>=<sp/>&quot;center&quot;,<sp/>rotation=270,<sp/>labelpad<sp/>=<sp/>20)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>float<sp/>x_max,<sp/>x_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.set_xmin:<sp/>x_min<sp/>=<sp/>self.ptr.x_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>x_min<sp/>=<sp/>self.ptr.get_min(b&quot;x&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.set_xmax:<sp/>x_max<sp/>=<sp/>self.ptr.x_max</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>x_max<sp/>=<sp/>self.ptr.get_max(b&quot;x&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>float<sp/>y_max,<sp/>y_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.set_ymin:<sp/>y_min<sp/>=<sp/>self.ptr.y_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>y_min<sp/>=<sp/>self.ptr.get_min(b&quot;y&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.set_ymax:<sp/>y_max<sp/>=<sp/>self.ptr.y_max</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>y_max<sp/>=<sp/>self.ptr.get_max(b&quot;y&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.xlim(x_min,<sp/>x_max)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.ylim(y_min,<sp/>y_max)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>class<sp/>TLine(BasePlotting):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__cinit__(self):<sp/>self.ptr.prefix<sp/>=<sp/>b&quot;TLine&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__init__(self,<sp/>inpt<sp/>=<sp/>None,<sp/>**kwargs):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.Lines<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.Marker<sp/>=<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(kwargs):<sp/>inpt<sp/>=<sp/>{&quot;data&quot;<sp/>:<sp/>dict(kwargs)}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>inpt<sp/>is<sp/>None:<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>list<sp/>keys<sp/>=<sp/>[i<sp/>for<sp/>i<sp/>in<sp/>self.__dir__()<sp/>if<sp/>not<sp/>i.startswith(&quot;__&quot;)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>keys:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>setattr(self,<sp/>i,<sp/>inpt[&quot;data&quot;][i])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>KeyError:<sp/>continue</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>AttributeError:<sp/>continue</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xData(self):<sp/>return<sp/>self.ptr.x_data;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@xData.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xData(self,<sp/>list<sp/>val):<sp/>self.ptr.x_data<sp/>=<sp/>&lt;vector[float]&gt;(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yData(self):<sp/>return<sp/>self.ptr.y_data;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@yData.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yData(self,<sp/>list<sp/>val):<sp/>self.ptr.y_data<sp/>=<sp/>&lt;vector[float]&gt;(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Marker(self):<sp/>return<sp/>env(self.ptr.marker)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Marker.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Marker(self,<sp/>str<sp/>v):<sp/>self.ptr.marker<sp/>=<sp/>enc(v)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yDataUp(self):<sp/>return<sp/>self.ptr.y_error_up</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@yDataUp.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yDataUp(self,<sp/>val):<sp/>self.ptr.y_error_up<sp/>=<sp/>&lt;vector[float]&gt;(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yDataDown(self):<sp/>return<sp/>self.ptr.y_error_down</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@yDataDown.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yDataDown(self,<sp/>val):<sp/>self.ptr.y_error_down<sp/>=<sp/>&lt;vector[float]&gt;(val)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>LineWidth(self):<sp/>return<sp/>self.ptr.line_width</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@LineWidth.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>LineWidth(self,<sp/>float<sp/>val):<sp/>self.ptr.line_width<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>void<sp/>factory(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>coms<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coms[&quot;linestyle&quot;]<sp/>=<sp/>self.LineStyle</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(self.Color):<sp/>coms[&quot;color&quot;]<sp/>=<sp/>self.Color</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coms[&quot;marker&quot;]<sp/>=<sp/>self.Marker</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coms[&quot;linewidth&quot;]<sp/>=<sp/>self.LineWidth</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coms[&quot;label&quot;]<sp/>=<sp/>self.Title</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(self.xData):<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>self.ErrorBars:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.build_error()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coms[&quot;yerr&quot;]<sp/>=<sp/>[self.yDataDown,<sp/>self.yDataUp]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coms[&quot;capsize&quot;]<sp/>=<sp/>self.ptr.cap_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.errorbar(self.xData,<sp/>self.yData,<sp/>**coms)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>len(self.yDataDown)<sp/>==<sp/>len(self.yDataUp)<sp/>==<sp/>len(self.xData):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coms[&quot;yerr&quot;]<sp/>=<sp/>[self.yDataDown,<sp/>self.yDataUp]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coms[&quot;capsize&quot;]<sp/>=<sp/>self.ptr.cap_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.errorbar(self.xData,<sp/>self.yData,<sp/>**coms)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>self.matpl.plot(self.xData,<sp/>self.yData,<sp/>**coms)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>__compile__(self,<sp/>bool<sp/>raw<sp/>=<sp/>False):</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>float<sp/>x_max,<sp/>x_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.set_xmin:<sp/>x_min<sp/>=<sp/>self.ptr.x_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>not<sp/>self.ptr.x_data.size():<sp/>x_min<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>x_min<sp/>=<sp/>self.ptr.get_min(b&quot;x&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.set_xmax:<sp/>x_max<sp/>=<sp/>self.ptr.x_max</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>not<sp/>self.ptr.x_data.size():<sp/>x_max<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>x_max<sp/>=<sp/>self.ptr.get_max(b&quot;x&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>float<sp/>y_max,<sp/>y_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.set_ymin:<sp/>y_min<sp/>=<sp/>self.ptr.y_min</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>not<sp/>self.ptr.y_data.size():<sp/>y_min<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>y_min<sp/>=<sp/>self.ptr.get_min(b&quot;y&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.set_ymax:<sp/>y_max<sp/>=<sp/>self.ptr.y_max</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>not<sp/>self.ptr.y_data.size():<sp/>y_max<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>y_max<sp/>=<sp/>self.ptr.get_max(b&quot;y&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(self.Lines)<sp/>and<sp/>not<sp/>self.ptr.x_data.size():<sp/>return<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>TLine<sp/>i</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[float]<sp/>dy<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[float]<sp/>dx<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>self.Lines:<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i.factory()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>merge_data(&amp;dy,<sp/>&amp;i.ptr.y_data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>merge_data(&amp;dx,<sp/>&amp;i.ptr.x_data)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._ax.tick_params(axis<sp/>=<sp/>&quot;x&quot;,<sp/>which<sp/>=<sp/>&quot;minor&quot;,<sp/>bottom<sp/>=<sp/>False)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.legend(loc<sp/>=<sp/>&quot;best&quot;,<sp/>ncol<sp/>=<sp/>2<sp/>*<sp/>(1<sp/>-<sp/>0.5*(not<sp/>len(self.Lines)<sp/>&gt;<sp/>3)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.factory()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>self.set_ymin:<sp/>y_min<sp/>=<sp/>self.ptr.min(&amp;dy);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>self.set_ymax:<sp/>y_max<sp/>=<sp/>self.ptr.max(&amp;dy);<sp/>y_max<sp/>=<sp/>y_max*(1<sp/>+<sp/>0.1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>self.set_xmin:<sp/>x_min<sp/>=<sp/>self.ptr.min(&amp;dx);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>self.set_xmax:<sp/>x_max<sp/>=<sp/>self.ptr.max(&amp;dx);<sp/>x_max<sp/>=<sp/>x_max*(1<sp/>+<sp/>0.1)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>x_max<sp/>&gt;<sp/>x_min:<sp/>self.matpl.xlim(x_min,<sp/>x_max)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>y_max<sp/>&gt;<sp/>y_min:<sp/>self.matpl.ylim(y_min,<sp/>y_max)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matpl.title(self.Title)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>class<sp/>ROC(TLine):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__cinit__(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.num_cls<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.inits<sp/>=<sp/>True</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.Binary<sp/>=<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.verbose<sp/>=<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.prefix<sp/>=<sp/>b&quot;ROC<sp/>Curve&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>from<sp/>sklearn<sp/>import<sp/>metrics;<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except:<sp/>self.inits<sp/>=<sp/>False</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.warning(b&quot;Failed<sp/>to<sp/>import<sp/>sklearn.&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__init__(self,<sp/>inpt<sp/>=<sp/>None,<sp/>**kwargs):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.Lines<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.Marker<sp/>=<sp/>&quot;&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.auc<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>len(kwargs):<sp/>inpt<sp/>=<sp/>{&quot;data&quot;<sp/>:<sp/>dict(kwargs)}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>inpt<sp/>is<sp/>None:<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>list<sp/>keys<sp/>=<sp/>[i<sp/>for<sp/>i<sp/>in<sp/>self.__dir__()<sp/>if<sp/>not<sp/>i.startswith(&quot;__&quot;)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>keys:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try:<sp/>setattr(self,<sp/>i,<sp/>inpt[&quot;data&quot;][i])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>KeyError:<sp/>continue</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>except<sp/>AttributeError:<sp/>continue</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xTitle<sp/>=<sp/>&quot;False<sp/>Positive<sp/>Rate&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.yTitle<sp/>=<sp/>&quot;True<sp/>Positive<sp/>Rate&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xMax<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.yMax<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.xMin<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.yMin<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>void<sp/>factory(self):<sp/>return</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>__compile__(self,<sp/>bool<sp/>raw<sp/>=<sp/>False):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>self.inits:<sp/>return<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>self.ptr.roc_data.size():<sp/>return<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>sklearn.metrics<sp/>import<sp/>roc_curve,<sp/>auc</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>int<sp/>i</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>TLine<sp/>pl</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>string<sp/>model_mode<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>map[string,<sp/>vector[double]]<sp/>auc_ntops</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>map[string,<sp/>vector[vector[double]]]<sp/>fpr_</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>map[string,<sp/>vector[vector[double]]]<sp/>tpr_</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[roc_t]<sp/>points<sp/>=<sp/>self.ptr.get_ROC()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(points.size()):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model_mode<sp/>=<sp/>points[i].model</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.num_cls<sp/>=<sp/>points[i].cls</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/><sp/>=<sp/>np.array(dref(points[i].scores))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>truth<sp/>=<sp/>np.array(dref(points[i].truth))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>range(self.num_cls):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fpr,<sp/>tpr,<sp/>_<sp/>=<sp/>roc_curve(truth[:,<sp/>i],<sp/>data[:,<sp/>i])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auc_ntops[model_mode]<sp/>=<sp/>&lt;vector[double]&gt;(auc(fpr,<sp/>tpr))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fpr_[model_mode].push_back(&lt;vector[double]&gt;(fpr))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fpr_[model_mode].push_back(&lt;vector[double]&gt;(tpr))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print(auc_ntops)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#cdef<sp/>list<sp/>lines<sp/>=<sp/>[TLine()<sp/>for<sp/>i<sp/>in<sp/>range(self.num_cls)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>not<sp/>len(self.Lines):<sp/>self.Lines<sp/>=<sp/>[&quot;label-&quot;<sp/>+<sp/>str(i)<sp/>for<sp/>i<sp/>in<sp/>range(self.num_cls)]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#for<sp/>i<sp/>in<sp/>range(self.Binary,<sp/>self.num_cls):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/>pl<sp/>=<sp/>lines[i]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/>pl.matpl<sp/>=<sp/>self.matpl</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/>pl.Title<sp/>=<sp/>self.Lines[i]<sp/>+<sp/>&quot;<sp/>AUC:<sp/>&quot;<sp/>+<sp/>str(auc_ntops[i])</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>pl.xData<sp/>=<sp/>fpr[i].tolist()</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/>pl.yData<sp/>=<sp/>tpr[i].tolist()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/>pl.factory()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/><sp/><sp/><sp/>self.auc[i]<sp/>=<sp/>auc_ntops[i]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#self.matpl.title(self.Title)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#self._ax.tick_params(axis<sp/>=<sp/>&quot;x&quot;,<sp/>which<sp/>=<sp/>&quot;minor&quot;,<sp/>bottom<sp/>=<sp/>False)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#self.matpl.legend(loc<sp/>=<sp/>&quot;best&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Scores(self):<sp/>return<sp/>None</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Truth(self):<sp/>return<sp/>None</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Scores.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Scores(self,<sp/>val):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[vector[double]]<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[int]*<sp/>vc<sp/>=<sp/>NULL</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>self.inits:<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>isinstance(val,<sp/>list):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>&lt;vector[vector[double]]&gt;(val)<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.build_ROC(b&quot;name&quot;,<sp/>-1,<sp/>vc,<sp/>&amp;data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>isinstance(val,<sp/>dict):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>k<sp/>in<sp/>val:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>isinstance(k,<sp/>str)<sp/>and<sp/>isinstance(val[k],<sp/>list):<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>&lt;vector[vector[double]]&gt;(val[k])<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.build_ROC(enc(k),<sp/>-1,<sp/>vc,<sp/>&amp;data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>isinstance(k,<sp/>int)<sp/>and<sp/>isinstance(val[k],<sp/>list):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>&lt;vector[vector[double]]&gt;(val[k])<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.build_ROC(enc(k),<sp/>-1,<sp/>vc,<sp/>&amp;data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>isinstance(k,<sp/>str)<sp/>and<sp/>isinstance(val[k],<sp/>tuple):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>&lt;vector[vector[double]]&gt;(val[k][1])<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.build_ROC(enc(k),<sp/>int(val[k][0]),<sp/>vc,<sp/>&amp;data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>isinstance(val,<sp/>tuple):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>&lt;vector[vector[double]]&gt;(val[2])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.build_ROC(enc(val[0]),<sp/>int(val[1]),<sp/>&lt;vector[int]*&gt;(NULL),<sp/>&amp;data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>self.failure(b&quot;Expected:<sp/>dict(str,<sp/>tuple(int,<sp/>list[list[float]]&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Truth.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Truth(self,<sp/>val):<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[int]<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[vector[double]]*<sp/>vc<sp/>=<sp/>NULL</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>self.inits:<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>isinstance(val,<sp/>list):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>&lt;vector[int]&gt;(val)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.build_ROC(b&quot;name&quot;,<sp/>-1,<sp/>&amp;data,<sp/>vc)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>isinstance(val,<sp/>dict):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>k<sp/>in<sp/>val:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>isinstance(k,<sp/>str)<sp/>and<sp/>isinstance(val[k],<sp/>list):<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>&lt;vector[int]&gt;(val[k])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.build_ROC(enc(k),<sp/>-1,<sp/>&amp;data,<sp/>vc)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>isinstance(k,<sp/>int)<sp/>and<sp/>isinstance(val[k],<sp/>list):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>&lt;vector[int]&gt;(val[k])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.build_ROC(enc(k),<sp/>-1,<sp/>&amp;data,<sp/>vc)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>isinstance(k,<sp/>str)<sp/>and<sp/>isinstance(val[k],<sp/>tuple):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>&lt;vector[int]&gt;(val[k][1])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.build_ROC(enc(k),<sp/>int(val[k][0]),<sp/>&amp;data,<sp/>vc)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>isinstance(val,<sp/>tuple):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>&lt;vector[int]&gt;(val[2])</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.build_ROC(enc(val[0]),<sp/>int(val[1]),<sp/>&amp;data,<sp/>vc)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else:<sp/>self.failure(b&quot;Expected:<sp/>dict(str,<sp/>tuple(int,<sp/>list[list[float]]&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Titles(self):<sp/>return<sp/>self.Lines</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@Titles.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Titles(self,<sp/>list<sp/>val):<sp/>self.Lines<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>AUC(self):<sp/>return<sp/>self.auc</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xData(self):<sp/>return<sp/>None</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@xData.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>xData(self,<sp/>val):<sp/>self.ptr.warning(b&quot;Wrong<sp/>Input.<sp/>Use<sp/>Scores&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yData(self):<sp/>return<sp/>None</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@yData.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>yData(self,<sp/>val):<sp/>self.ptr.warning(b&quot;Wrong<sp/>Input.<sp/>Use<sp/>Truth&quot;)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
    </programlisting>
    <location file="core/plotting.pyx"/>
  </compounddef>
</doxygen>
