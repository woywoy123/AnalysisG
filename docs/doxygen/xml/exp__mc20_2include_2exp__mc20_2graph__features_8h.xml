<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="exp__mc20_2include_2exp__mc20_2graph__features_8h" kind="file" language="C++">
    <compoundname>exp_mc20/include/exp_mc20/graph_features.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2graph__features_8h_1ae61e0a8c78a2a320cc2b53d895ba15c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void signal_event</definition>
        <argsstring>(bool *o, exp_mc20 *event)</argsstring>
        <name>signal_event</name>
        <param>
          <type>bool *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/graph_features.h" line="5" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/graph_features.h" bodystart="5" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2graph__features_8h_1a652dc93cf4e63f89cec2753ebd099d04" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void num_tops</definition>
        <argsstring>(int *o, exp_mc20 *event)</argsstring>
        <name>num_tops</name>
        <param>
          <type>int *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/graph_features.h" line="18" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/graph_features.h" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2graph__features_8h_1a0b423cfa610cec991c8c8491ee4d4097" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void num_neutrino</definition>
        <argsstring>(int *o, exp_mc20 *event)</argsstring>
        <name>num_neutrino</name>
        <param>
          <type>int *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/graph_features.h" line="20" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/graph_features.h" bodystart="20" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2graph__features_8h_1a1aca22fdd595cd9c3032a237fa1cd861" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void num_lepton</definition>
        <argsstring>(int *o, exp_mc20 *event)</argsstring>
        <name>num_lepton</name>
        <param>
          <type>int *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/graph_features.h" line="30" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/graph_features.h" bodystart="30" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2graph__features_8h_1a5b6af7cd8286a99213498441f29f45c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void missing_et</definition>
        <argsstring>(double *o, exp_mc20 *event)</argsstring>
        <name>missing_et</name>
        <param>
          <type>double *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/graph_features.h" line="42" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/graph_features.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2graph__features_8h_1a4605935981db5b32125d57a2051e1ca9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void missing_phi</definition>
        <argsstring>(double *o, exp_mc20 *event)</argsstring>
        <name>missing_phi</name>
        <param>
          <type>double *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/graph_features.h" line="43" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/graph_features.h" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2graph__features_8h_1a6e720acee03768d1a4a70a6eba4cc618" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void num_children_leps</definition>
        <argsstring>(double *o, exp_mc20 *event)</argsstring>
        <name>num_children_leps</name>
        <param>
          <type>double *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/graph_features.h" line="45" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/graph_features.h" bodystart="45" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2graph__features_8h_1a88476dd23e3b6e28e3c704003e6a705f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void num_leps</definition>
        <argsstring>(double *o, exp_mc20 *event)</argsstring>
        <name>num_leps</name>
        <param>
          <type>double *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/graph_features.h" line="55" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/graph_features.h" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2graph__features_8h_1ad25504e6445235243c1712bc97bd3a53" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void num_jets</definition>
        <argsstring>(double *o, exp_mc20 *event)</argsstring>
        <name>num_jets</name>
        <param>
          <type>double *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/graph_features.h" line="56" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/graph_features.h" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2graph__features_8h_1ae169f0d5d1f2adc0e1e9b8637520c6f2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void event_number</definition>
        <argsstring>(long *o, exp_mc20 *event)</argsstring>
        <name>event_number</name>
        <param>
          <type>long *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/graph_features.h" line="57" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/graph_features.h" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2graph__features_8h_1a57e6892e6746d26f7f8fcfe2dba5a168" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void event_weight</definition>
        <argsstring>(double *o, exp_mc20 *event)</argsstring>
        <name>event_weight</name>
        <param>
          <type>double *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/graph_features.h" line="58" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/graph_features.h" bodystart="58" bodyend="58"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>GRAPH_FEATURES_EXP_MC20_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRAPH_FEATURES_EXP_MC20_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>------------------<sp/>Truth<sp/>Graph<sp/>Features<sp/>---------------------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>signal_event(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref>*<sp/><ref refid="classevent" kindref="compound">event</ref>){</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classevent" kindref="compound">event</ref><sp/>-&gt;<sp/>Tops.size()<sp/>!=<sp/>4){*o<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::vector&lt;particle_template*&gt;<sp/>t<sp/>=<sp/>event<sp/>-&gt;<sp/>Tops;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>(size_t<sp/>x(0);<sp/>x<sp/>&lt;<sp/>t.size();<sp/>++x){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>top*<sp/>t_<sp/>=<sp/>(top*)t[x];<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>continue;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//if<sp/>(f!t_<sp/>-&gt;<sp/>from_res){continue;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//*o<sp/>=<sp/>true;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>*o<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>num_tops(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref>*<sp/><ref refid="classevent" kindref="compound">event</ref>){*o<sp/>=<sp/>(</highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>-&gt;<sp/>Tops.size()<sp/>&gt;=<sp/>4)<sp/>?<sp/>4<sp/>:<sp/><ref refid="classevent" kindref="compound">event</ref><sp/>-&gt;<sp/>Tops.size();}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>num_neutrino(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref>*<sp/><ref refid="classevent" kindref="compound">event</ref>){</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>neutrinos<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;particle_template*&gt;<sp/>ch<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>-&gt;<sp/>TopChildren;<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>(0);<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>&lt;<sp/>ch.size();<sp/>++<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>){</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ch[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>]<sp/>-&gt;<sp/>is_nu){</highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>neutrinos++;<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>*o<sp/>=<sp/>neutrinos;<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>num_lepton(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref>*<sp/><ref refid="classevent" kindref="compound">event</ref>){</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>leptons<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;particle_template*&gt;<sp/>ch<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>-&gt;<sp/>TopChildren;<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>(0);<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>&lt;<sp/>ch.size();<sp/>++<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>]<sp/>-&gt;<sp/>is_nu){</highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>]<sp/>-&gt;<sp/>is_lep){</highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leptons++;<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>*o<sp/>=<sp/>leptons;<sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal">};<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------<sp/>Graph<sp/>Observables<sp/>---------------------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>missing_et(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref>*<sp/><ref refid="classevent" kindref="compound">event</ref>){*o<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="classmet" kindref="compound">met</ref>;};<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>missing_phi(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref>*<sp/><ref refid="classevent" kindref="compound">event</ref>){*o<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="namespacetest__particles_1abb55ac0e421aeee040b7545a6d6705a3" kindref="member">phi</ref>;};<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>num_children_leps(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref>*<sp/><ref refid="classevent" kindref="compound">event</ref>){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>num_leps<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;particle_template*&gt;<sp/>ch<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>-&gt;<sp/>TopChildren;<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>(0);<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>&lt;<sp/>ch.size();<sp/>++<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>){</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>]<sp/>-&gt;<sp/>is_nu<sp/>||<sp/>!ch[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>]<sp/>-&gt;<sp/>is_lep){</highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_leps<sp/>+=<sp/>1;<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>*o<sp/>=<sp/>num_leps;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>num_leps(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref>*<sp/><ref refid="classevent" kindref="compound">event</ref>){*o<sp/>=<sp/>int(<ref refid="classevent" kindref="compound">event</ref><sp/>-&gt;<sp/>Leptons.size());}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>num_jets(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref>*<sp/><ref refid="classevent" kindref="compound">event</ref>){*o<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>-&gt;<sp/>Jets.size();}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>event_number(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref>*<sp/><ref refid="classevent" kindref="compound">event</ref>){*o<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>-&gt;<sp/>event_number;}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>event_weight(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classexp__mc20" kindref="compound">exp_mc20</ref>*<sp/><ref refid="classevent" kindref="compound">event</ref>){*o<sp/>=<sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="enums_8h_1a71db5b98a8935886920bcc7eaaf49fb9a7edabf994b76a00cbc60c95af337db8f" kindref="member">weight</ref>;}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="graphs/exp_mc20/include/exp_mc20/graph_features.h"/>
  </compounddef>
</doxygen>
