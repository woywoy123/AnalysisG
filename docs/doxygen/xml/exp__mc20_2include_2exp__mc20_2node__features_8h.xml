<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="exp__mc20_2include_2exp__mc20_2node__features_8h" kind="file" language="C++">
    <compoundname>exp_mc20/include/exp_mc20/node_features.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2node__features_8h_1ab1c59b5f0c6a25f3a21b6ff62c95596a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void res_node</definition>
        <argsstring>(int *o, particle_template *p)</argsstring>
        <name>res_node</name>
        <param>
          <type>int *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Resolves node information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/node_features.h" line="12" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/node_features.h" bodystart="12" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2node__features_8h_1ab2215efaacd3bffb7241a74646421796" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void top_node</definition>
        <argsstring>(int *o, particle_template *p)</argsstring>
        <name>top_node</name>
        <param>
          <type>int *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Extracts top node index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/node_features.h" line="22" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/node_features.h" bodystart="22" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2node__features_8h_1a5daf68d52b4706d971b5a8b47c929139" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void pt</definition>
        <argsstring>(double *o, particle_template *p)</argsstring>
        <name>pt</name>
        <param>
          <type>double *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Extracts transverse momentum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/node_features.h" line="44" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/node_features.h" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2node__features_8h_1a2fdb1bac13680528517c929fb47b98f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void eta</definition>
        <argsstring>(double *o, particle_template *p)</argsstring>
        <name>eta</name>
        <param>
          <type>double *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Extracts pseudorapidity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/node_features.h" line="47" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/node_features.h" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2node__features_8h_1ac4bd110a4f0667540fb5f5ff27acd86c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void phi</definition>
        <argsstring>(double *o, particle_template *p)</argsstring>
        <name>phi</name>
        <param>
          <type>double *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Extracts azimuthal angle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/node_features.h" line="50" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/node_features.h" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2node__features_8h_1a4776e0edb8c7a7350aa30a628e979e1b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void energy</definition>
        <argsstring>(double *o, particle_template *p)</argsstring>
        <name>energy</name>
        <param>
          <type>double *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Extracts energy. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/node_features.h" line="53" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/node_features.h" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2node__features_8h_1a05898150cc9167a4de297df624e6c15a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void is_lepton</definition>
        <argsstring>(int *o, particle_template *p)</argsstring>
        <name>is_lepton</name>
        <param>
          <type>int *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Checks if the particle is a lepton. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/node_features.h" line="56" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/node_features.h" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2node__features_8h_1a3f3117b469cddb9e7a32cef78c5c085f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void is_bquark</definition>
        <argsstring>(int *o, particle_template *p)</argsstring>
        <name>is_bquark</name>
        <param>
          <type>int *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Checks if the particle is a b-quark. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/node_features.h" line="59" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/node_features.h" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="exp__mc20_2include_2exp__mc20_2node__features_8h_1a5d7ab2a09038469b9f1d0bc6e701dea1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void is_neutrino</definition>
        <argsstring>(int *o, particle_template *p)</argsstring>
        <name>is_neutrino</name>
        <param>
          <type>int *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Checks if the particle is a neutrino. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/exp_mc20/include/exp_mc20/node_features.h" line="62" column="13" bodyfile="graphs/exp_mc20/include/exp_mc20/node_features.h" bodystart="62" bodyend="62"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Node feature definitions for <ref refid="classexp__mc20" kindref="compound">exp_mc20</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains functions to extract various features from particle nodes. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**<sp/>\file<sp/>node_features.h</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>\brief<sp/>Node<sp/>feature<sp/>definitions<sp/>for<sp/>exp_mc20.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>contains<sp/>functions<sp/>to<sp/>extract<sp/>various<sp/>features<sp/>from<sp/>particle<sp/>nodes.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NODES_FEATURES_EXP_MC20_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NODES_FEATURES_EXP_MC20_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------<sp/>Node<sp/>Truth<sp/>---------------------<sp/>//</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">/**<sp/>\brief<sp/>Resolves<sp/>node<sp/>information.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>res_node(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::string<sp/>type<sp/>=<sp/>p<sp/>-&gt;<sp/>type;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(type<sp/>==<sp/>&quot;mu&quot;){*o<sp/>=<sp/>((muon*)p)<sp/>-&gt;<sp/>from_res;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>else<sp/>if<sp/>(type<sp/>==<sp/>&quot;el&quot;){*o<sp/>=<sp/>((electron*)p)<sp/>-&gt;<sp/>from_res;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>else<sp/>if<sp/>(type<sp/>==<sp/>&quot;jet&quot;){*o<sp/>=<sp/>((jet*)p)<sp/>-&gt;<sp/>from_res;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>else<sp/>{*o<sp/>=<sp/>0;}<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>*o<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment">/**<sp/>\brief<sp/>Extracts<sp/>top<sp/>node<sp/>index.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>top_node(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>type<sp/>=<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/>type;<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;jet&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classjet" kindref="compound">jet</ref>*<sp/>tx<sp/>=<sp/>(<ref refid="classjet" kindref="compound">jet</ref>*)<ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>;<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx<sp/>-&gt;<sp/>top_index<sp/>&lt;<sp/>0){*o<sp/>=<sp/>-1;}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{*o<sp/>=<sp/>tx<sp/>-&gt;<sp/>top_index;}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;mu&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmuon" kindref="compound">muon</ref>*<sp/>tx<sp/>=<sp/>(<ref refid="classmuon" kindref="compound">muon</ref>*)<ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>;<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*o<sp/>=<sp/>tx<sp/>-&gt;<sp/>top_index;<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;el&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classelectron" kindref="compound">electron</ref>*<sp/>tx<sp/>=<sp/>(<ref refid="classelectron" kindref="compound">electron</ref>*)<ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>;<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*o<sp/>=<sp/>tx<sp/>-&gt;<sp/>top_index;<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{*o<sp/>=<sp/>-1;}<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal">};<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------<sp/>Node<sp/>Observables<sp/>---------------------<sp/>//</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**<sp/>\brief<sp/>Extracts<sp/>transverse<sp/>momentum.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespacetest__particles_1ae334386283ec557a6b2b6a30058de708" kindref="member">pt</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){*o<sp/>=<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="namespacetest__particles_1ae334386283ec557a6b2b6a30058de708" kindref="member">pt</ref>;}<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment">/**<sp/>\brief<sp/>Extracts<sp/>pseudorapidity.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespacetest__particles_1a648556978e44bc1b1da27c1270951db5" kindref="member">eta</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){*o<sp/>=<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="namespacetest__particles_1a648556978e44bc1b1da27c1270951db5" kindref="member">eta</ref>;}<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment">/**<sp/>\brief<sp/>Extracts<sp/>azimuthal<sp/>angle.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespacetest__particles_1abb55ac0e421aeee040b7545a6d6705a3" kindref="member">phi</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){*o<sp/>=<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="namespacetest__particles_1abb55ac0e421aeee040b7545a6d6705a3" kindref="member">phi</ref>;}<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">/**<sp/>\brief<sp/>Extracts<sp/>energy.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>energy(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){*o<sp/>=<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="namespacetest__particles_1aad178dcf6e7313adddddce0674c990d0" kindref="member">e</ref>;}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment">/**<sp/>\brief<sp/>Checks<sp/>if<sp/>the<sp/>particle<sp/>is<sp/>a<sp/>lepton.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>is_lepton(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){*o<sp/>=<sp/>(<ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="enums_8h_1a666fa98df084d96fc481369704153b28acc9357767a613ec2e912943553e95778" kindref="member">is_lep</ref><sp/>&amp;&amp;<sp/>!<ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="enums_8h_1a666fa98df084d96fc481369704153b28ab09e705fe6108a37560c8173e04c822d" kindref="member">is_nu</ref>);}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">/**<sp/>\brief<sp/>Checks<sp/>if<sp/>the<sp/>particle<sp/>is<sp/>a<sp/>b-quark.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>is_bquark(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){*o<sp/>=<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="enums_8h_1a666fa98df084d96fc481369704153b28ae0da17ca8558064e75c801fadc3537a4" kindref="member">is_b</ref>;}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">/**<sp/>\brief<sp/>Checks<sp/>if<sp/>the<sp/>particle<sp/>is<sp/>a<sp/>neutrino.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>is_neutrino(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){*o<sp/>=<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="enums_8h_1a666fa98df084d96fc481369704153b28ab09e705fe6108a37560c8173e04c822d" kindref="member">is_nu</ref>;}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="graphs/exp_mc20/include/exp_mc20/node_features.h"/>
  </compounddef>
</doxygen>
