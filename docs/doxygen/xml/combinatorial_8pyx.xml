<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="combinatorial_8pyx" kind="file" language="C++">
    <compoundname>combinatorial.pyx</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>distutils:<sp/>language=c++</highlight></codeline>
<codeline><highlight class="normal">#<sp/>cython:<sp/>language_level=3</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">from<sp/>AnalysisG.core.selection_template<sp/>cimport<sp/>*</highlight></codeline>
<codeline><highlight class="normal">from<sp/>AnalysisG.core.particle_template<sp/>cimport<sp/>*</highlight></codeline>
<codeline><highlight class="normal">from<sp/>AnalysisG.core.tools<sp/>cimport<sp/>*</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>class<sp/>Neutrino(ParticleTemplate):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>neutrino*<sp/>nux</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__cinit__(self):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__init__(self):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__dealloc__(self):<sp/>del<sp/>self.nux</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal">cdef<sp/>class<sp/>Particle(ParticleTemplate):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__cinit__(self):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__init__(self):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__dealloc__(self):<sp/>del<sp/>self.ptr</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>class<sp/>Event:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>public<sp/>dict<sp/>TruthTops</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>public<sp/>dict<sp/>RecoTops</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__init__(self):<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typx<sp/>=<sp/>[&quot;top_children&quot;,<sp/>&quot;truthjet&quot;,<sp/>&quot;jetchildren&quot;,<sp/>&quot;jetleptons&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.TruthTops<sp/>=<sp/>{i<sp/>:<sp/>[[],<sp/>[]]<sp/>for<sp/>i<sp/>in<sp/>typx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.RecoTops<sp/><sp/>=<sp/>{i<sp/>:<sp/>[[],<sp/>[]]<sp/>for<sp/>i<sp/>in<sp/>typx}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>void<sp/>assign_particles(self,<sp/>string<sp/>name,<sp/>vector[particle_template*]<sp/>ptx):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>int<sp/>v</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>Particle<sp/>px</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>v<sp/>in<sp/>range(ptx.size()):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px<sp/>=<sp/>Particle()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px.ptr<sp/>=<sp/>ptx[v]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.TruthTops[env(name)][v<sp/>%<sp/>2].append(px)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>void<sp/>assign_neutrinos(self,<sp/>string<sp/>name,<sp/>vector[neutrino*]<sp/>ptx):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>int<sp/>v</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>Neutrino<sp/>px</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>v<sp/>in<sp/>range(ptx.size()):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px<sp/>=<sp/>Neutrino()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>px.ptr<sp/>=<sp/>ptx[v]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.RecoTops[env(name)][v<sp/>%<sp/>2].append(px)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>void<sp/>loader(NuNuCombinatorial<sp/>vl,<sp/>tuple<sp/>data):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>str<sp/>name<sp/>=<sp/>data[0]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>string<sp/>name_</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/><sp/><sp/>&quot;top_children&quot;<sp/>in<sp/>name:<sp/>name_<sp/>=<sp/>b&quot;top_children&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>elif<sp/>&quot;truthjet&quot;<sp/><sp/><sp/><sp/><sp/>in<sp/>name:<sp/>name_<sp/>=<sp/>b&quot;truthjet&quot;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>elif<sp/>&quot;jetchildren&quot;<sp/><sp/>in<sp/>name:<sp/>name_<sp/>=<sp/>b&quot;jetchildren&quot;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>elif<sp/>&quot;jetleptons&quot;<sp/><sp/><sp/>in<sp/>name:<sp/>name_<sp/>=<sp/>b&quot;jetleptons&quot;<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else:<sp/>print(&quot;invalid&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>&quot;matched_bquark&quot;<sp/>in<sp/>name:<sp/>vl.matched_bq[name_].push_back(&lt;vector[int]&gt;(data[1]));<sp/><sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>&quot;matched_lepton&quot;<sp/>in<sp/>name:<sp/>vl.matched_lp[name_].push_back(&lt;vector[int]&gt;(data[1]));<sp/><sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>&quot;distance&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>name:<sp/>vl.ellipse[name_].push_back(&lt;vector[double]&gt;(data[1]));<sp/><sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>&quot;pdgid&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>name:<sp/>vl.pdgid[name_].push_back(&lt;vector[int]&gt;(data[1]));<sp/><sp/><sp/><sp/><sp/><sp/><sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>&quot;nu1_chi2&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>name:<sp/>vl.chi2_nu1[name_].push_back(&lt;vector[double]&gt;(data[1]));<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>&quot;nu2_chi2&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>name:<sp/>vl.chi2_nu2[name_].push_back(&lt;vector[double]&gt;(data[1]));<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>&quot;nu1_pmu&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>name:<sp/>vl.pmu_nu1[name_].push_back(&lt;vector[vector[double]]&gt;(data[1]));<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>&quot;nu2_pmu&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>name:<sp/>vl.pmu_nu2[name_].push_back(&lt;vector[vector[double]]&gt;(data[1]));<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>&quot;pmu&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>name:<sp/>vl.pmu[name_].push_back(&lt;vector[vector[double]]&gt;(data[1]));<sp/><sp/><sp/><sp/><sp/>return</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>particle_template*<sp/>make_particle(vector[double]*<sp/>pmu,<sp/>int<sp/>pdgid):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>particle_template*<sp/>ptx<sp/>=<sp/>new<sp/>particle_template()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ptx.pt<sp/><sp/>=<sp/>pmu.at(0);<sp/>ptx.eta<sp/>=<sp/>pmu.at(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ptx.phi<sp/>=<sp/>pmu.at(2);<sp/>ptx.e<sp/><sp/><sp/>=<sp/>pmu.at(3)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ptx.pdgid<sp/>=<sp/>pdgid</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>ptx</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>neutrino*<sp/>make_neutrino(vector[double]*<sp/>pmu,<sp/>int<sp/>lep,<sp/>int<sp/>bq,<sp/>double<sp/>elp,<sp/>double<sp/>chi):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>neutrino*<sp/>ptx<sp/>=<sp/>new<sp/>neutrino()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ptx.pt<sp/><sp/>=<sp/>pmu.at(0);<sp/>ptx.eta<sp/>=<sp/>pmu.at(1)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ptx.phi<sp/>=<sp/>pmu.at(2);<sp/>ptx.e<sp/><sp/><sp/>=<sp/>pmu.at(3)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ptx.matched_bquark<sp/>=<sp/>bq;<sp/>ptx.matched_lepton<sp/>=<sp/>lep</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ptx.ellipse<sp/>=<sp/>elp;<sp/>ptx.chi2<sp/>=<sp/>chi;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>ptx</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>class<sp/>NuNuCombinatorial(SelectionTemplate):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__dealloc__(self):<sp/>del<sp/>self.tt</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__cinit__(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typx<sp/>=<sp/>[&quot;top_children&quot;,<sp/>&quot;truthjet&quot;,<sp/>&quot;jetchildren&quot;,<sp/>&quot;jetleptons&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attx<sp/>=<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;pmu&quot;,<sp/>&quot;matched_bquark&quot;,<sp/>&quot;matched_lepton&quot;,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;distance&quot;,<sp/>&quot;nu1_chi2&quot;,<sp/>&quot;nu2_chi2&quot;,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;nu1_pmu&quot;,<sp/>&quot;nu2_pmu&quot;,<sp/>&quot;pdgid&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.root_leaves<sp/>=<sp/>{i<sp/>+<sp/>&quot;_&quot;<sp/>+<sp/>j<sp/>:<sp/>loader<sp/>for<sp/>i<sp/>in<sp/>typx<sp/>for<sp/>j<sp/>in<sp/>attx}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr<sp/>=<sp/>new<sp/>combinatorial()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.tt<sp/>=<sp/>&lt;combinatorial*&gt;self.ptr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ix<sp/>=<sp/>-1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>Postprocessing(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[string]<sp/>typx<sp/>=<sp/>[b&quot;top_children&quot;,<sp/>b&quot;truthjet&quot;,<sp/>b&quot;jetchildren&quot;,<sp/>b&quot;jetleptons&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>string<sp/>name<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>int<sp/>iy,<sp/>iz</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[vector[double]]<sp/>vvd</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[double]<sp/>vd</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[int]<sp/>vi</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[neutrino*]<sp/>vnu</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[particle_template*]<sp/>vp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>neutrino*<sp/>ptx</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>Event<sp/>ev<sp/>=<sp/>Event()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>name<sp/>in<sp/>typx:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.lx<sp/>=<sp/>self.pmu[name].size()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.ix<sp/>&lt;<sp/>0:<sp/>return</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vvd<sp/>=<sp/>self.pmu[name][self.ix]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vp.clear();<sp/>vp.clear()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>iy<sp/>in<sp/>range(vvd.size()):<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vp.push_back(make_particle(&amp;vvd.at(iy),<sp/>self.pdgid[name][self.ix][iy]))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ev.assign_particles(name,<sp/>vp)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>iy<sp/>in<sp/>range(self.pmu_nu1[name][self.ix].size()):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptx<sp/>=<sp/>make_neutrino(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;self.pmu_nu1[name][self.ix][iy],<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matched_lp[name][self.ix][iy],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matched_bq[name][self.ix][iy],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ellipse[name][self.ix][iy],<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.chi2_nu1[name][self.ix][iy]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vnu.push_back(ptx)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptx<sp/>=<sp/>make_neutrino(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;self.pmu_nu2[name][self.ix][iy],<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matched_lp[name][self.ix][iy],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.matched_bq[name][self.ix][iy],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ellipse[name][self.ix][iy],<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.chi2_nu2[name][self.ix][iy]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vnu.push_back(ptx)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ev.assign_neutrinos(name,<sp/>vnu)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ev</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__iter__(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ix<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>self</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__next__(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>self.ix<sp/>&gt;=<sp/>self.lx:<sp/>raise<sp/>StopIteration<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>Event<sp/>ev<sp/>=<sp/>self.Postprocessing()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ix<sp/>+=<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ev</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>NumDevice(self):<sp/>return<sp/>self.tt.num_device</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@NumDevice.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>NumDevice(self,<sp/>int<sp/>val):<sp/>self.tt.num_device<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>MassTop(self):<sp/>return<sp/>self.tt.masstop</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@MassTop.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>MassTop(self,<sp/>float<sp/>val):<sp/>self.tt.masstop<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>MassW(self):<sp/>return<sp/>self.tt.massw</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>@MassW.setter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>MassW(self,<sp/>float<sp/>val):<sp/>self.tt.massw<sp/>=<sp/>val</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
    </programlisting>
    <location file="selections/neutrino/combinatorial/combinatorial.pyx"/>
  </compounddef>
</doxygen>
