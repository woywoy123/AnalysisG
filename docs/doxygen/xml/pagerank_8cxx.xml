<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="pagerank_8cxx" kind="file" language="C++">
    <compoundname>pagerank.cxx</compoundname>
    <includes refid="pagerank_8h" local="no">metrics/pagerank.h</includes>
    <incdepgraph>
      <node id="17">
        <label>c10/core/DeviceType.h</label>
      </node>
      <node id="8">
        <label>functional</label>
      </node>
      <node id="25">
        <label>structs/model.h</label>
        <link refid="model_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>TTreeReader.h</label>
      </node>
      <node id="9">
        <label>structs/element.h</label>
        <link refid="element_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>tools/vector_cast.h</label>
        <link refid="vector__cast_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>TTreeReaderArray.h</label>
      </node>
      <node id="30">
        <label>cstdint</label>
      </node>
      <node id="27">
        <label>structs/folds.h</label>
        <link refid="folds_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>templates/metric_template.h</label>
        <link refid="metric__template_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>structs/enums.h</label>
        <link refid="enums_8h"/>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="20">
        <label>map</label>
      </node>
      <node id="24">
        <label>structs/event.h</label>
        <link refid="modules_2structs_2include_2structs_2event_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>rapidjson/document.h</label>
      </node>
      <node id="18">
        <label>structs/meta.h</label>
        <link refid="structs_2include_2structs_2meta_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>metrics/pagerank.h</label>
        <link refid="pagerank_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>tuple</label>
      </node>
      <node id="19">
        <label>vector</label>
      </node>
      <node id="4">
        <label>notification/notification.h</label>
        <link refid="notification_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>TFile.h</label>
      </node>
      <node id="29">
        <label>tools/tools.h</label>
        <link refid="tools_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>plotting/plotting.h</label>
        <link refid="plotting_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>tools/merge_cast.h</label>
        <link refid="merge__cast_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>torch/torch.h</label>
      </node>
      <node id="31">
        <label>TH1F.h</label>
      </node>
      <node id="13">
        <label>TLeaf.h</label>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="21">
        <label>structs/base.h</label>
        <link refid="modules_2structs_2include_2structs_2base_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>meta/meta.h</label>
        <link refid="meta_2include_2meta_2meta_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>TBranch.h</label>
      </node>
      <node id="7">
        <label>structs/property.h</label>
        <link refid="property_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>TTree.h</label>
      </node>
      <node id="1">
        <label>pagerank.cxx</label>
        <link refid="pagerank_8cxx"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="pagerank_8h" kindref="compound">metrics/pagerank.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="classpagerank__metric_1a7c941ff423cc23c57f40287712304a88" refkind="member"><highlight class="normal"><ref refid="classpagerank__metric_1a7c941ff423cc23c57f40287712304a88" kindref="member">pagerank_metric::~pagerank_metric</ref>(){}</highlight></codeline>
<codeline lineno="4" refid="classpagerank__metric_1a3f9c894a12599f3ac78dbf640488e17a" refkind="member"><highlight class="normal"><ref refid="classpagerank__metric" kindref="compound">pagerank_metric</ref>*<sp/><ref refid="classpagerank__metric_1a3f9c894a12599f3ac78dbf640488e17a" kindref="member">pagerank_metric::clone</ref>(){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classpagerank__metric_1ad9197c8db1c9608b5e02a2420a689cf0" kindref="member">pagerank_metric</ref>();}</highlight></codeline>
<codeline lineno="5" refid="classpagerank__metric_1ad9197c8db1c9608b5e02a2420a689cf0" refkind="member"><highlight class="normal"><ref refid="classpagerank__metric_1ad9197c8db1c9608b5e02a2420a689cf0" kindref="member">pagerank_metric::pagerank_metric</ref>(){</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="classmetric__template_1a22f7ac23f74bbabee66b43d9d4aa5de7" kindref="member">name</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;pagerank&quot;</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="classpagerank__metric_1a91a690036da4a25dbc3c32e03a07bc7a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpagerank__metric_1a91a690036da4a25dbc3c32e03a07bc7a" kindref="member">pagerank_metric::define_variables</ref>(){</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>register_output(&quot;event_pagerank_training&quot;<sp/><sp/><sp/>,<sp/>&quot;&lt;variable&gt;&quot;,<sp/>&amp;this<sp/>-&gt;<sp/>pagerank);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>register_output(&quot;event_pagerank_validation&quot;<sp/>,<sp/>&quot;&lt;variable&gt;&quot;,<sp/>&amp;this<sp/>-&gt;<sp/>pagerank);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>register_output(&quot;event_pagerank_evaluation&quot;<sp/>,<sp/>&quot;&lt;variable&gt;&quot;,<sp/>&amp;this<sp/>-&gt;<sp/>pagerank);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>register_output(&quot;global_pagerank_training&quot;<sp/><sp/>,<sp/>&quot;&lt;variable&gt;&quot;,<sp/>&amp;this<sp/>-&gt;<sp/>global_pagerank);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>register_output(&quot;global_pagerank_validation&quot;,<sp/>&quot;&lt;variable&gt;&quot;,<sp/>&amp;this<sp/>-&gt;<sp/>global_pagerank);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>register_output(&quot;global_pagerank_evaluation&quot;,<sp/>&quot;&lt;variable&gt;&quot;,<sp/>&amp;this<sp/>-&gt;<sp/>global_pagerank);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="classpagerank__metric_1a48e9dfa3337470eefd832297c60c39f7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpagerank__metric_1a48e9dfa3337470eefd832297c60c39f7" kindref="member">pagerank_metric::event</ref>(){</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>write(&quot;event_pagerank_&quot;<sp/>+<sp/>this<sp/>-&gt;<sp/>mode,<sp/>&quot;&lt;variable&gt;&quot;<sp/><sp/>,<sp/>&amp;this<sp/>-&gt;<sp/>pagerank);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>write(&quot;event_pagerank_&quot;<sp/>+<sp/>this<sp/>-&gt;<sp/>mode,<sp/>&quot;&lt;variable-2&gt;&quot;,<sp/>&amp;this<sp/>-&gt;<sp/>&lt;name_2&gt;,<sp/>true);//<sp/>&lt;---<sp/>write<sp/>is<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="classpagerank__metric_1adf136c01307a12dba74f6b075d45a4ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpagerank__metric_1adf136c01307a12dba74f6b075d45a4ad" kindref="member">pagerank_metric::batch</ref>(){}</highlight></codeline>
<codeline lineno="23" refid="classpagerank__metric_1a5645a223f536ec244149aa2c502fef74" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpagerank__metric_1a5645a223f536ec244149aa2c502fef74" kindref="member">pagerank_metric::end</ref>(){</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>write(&quot;global_pagerank_&quot;<sp/>+<sp/>this<sp/>-&gt;<sp/>mode,<sp/>&quot;&lt;variable&gt;&quot;,<sp/>&amp;this<sp/>-&gt;<sp/>global_pagerank);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>write(&quot;global_pagerank_&quot;<sp/>+<sp/>this<sp/>-&gt;<sp/>mode,<sp/>&quot;&lt;variable&gt;&quot;,<sp/>&amp;this<sp/>-&gt;<sp/>global_&lt;name_2&gt;,<sp/>true);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="classpagerank__metric_1a0acd2c2b019d2b4b8d91afefd20596fa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpagerank__metric_1a0acd2c2b019d2b4b8d91afefd20596fa" kindref="member">pagerank_metric::pagerank</ref>(</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::map&lt;std::string,<sp/>std::string&gt;&gt;*<sp/>clust,<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>std::map&lt;int,<sp/>float&gt;&gt;*<sp/>bin_data</highlight></codeline>
<codeline lineno="31"><highlight class="normal">){</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha<sp/>=<sp/>0.85;<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>n_nodes<sp/>=<sp/>clust<sp/>-&gt;<sp/>size();<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>std::map&lt;int,<sp/>float&gt;&gt;<sp/>Mij;<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>std::map&lt;std::string,<sp/>std::string&gt;&gt;::iterator<sp/>itr;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itr<sp/>=<sp/>clust<sp/>-&gt;<sp/>begin();<sp/>itr<sp/>!=<sp/>clust<sp/>-&gt;<sp/><ref refid="classpagerank__metric_1a5645a223f536ec244149aa2c502fef74" kindref="member">end</ref>();<sp/>++itr){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bin_data){</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src<sp/>=<sp/>itr<sp/>-&gt;<sp/>first;<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>y(0);<sp/>y<sp/>&lt;<sp/>n_nodes;<sp/>++y){Mij[src][y]<sp/>=<sp/>(src<sp/>!=<sp/>y)*(*bin_data)[src][y];}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>float&gt;<sp/>pr_;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>y(0);<sp/>y<sp/>&lt;<sp/>n_nodes;<sp/>++y){</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bin_data){</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sm<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>(0);<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>&lt;<sp/>n_nodes;<sp/>++<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>){sm<sp/>+=<sp/>Mij[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>][y];}<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sm<sp/>=<sp/>((sm)<sp/>?<sp/>1.0/sm<sp/>:<sp/>0);<sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>(0);<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>&lt;<sp/>n_nodes;<sp/>++<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>){Mij[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>][y]<sp/>=<sp/>((sm)<sp/>?<sp/>Mij[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>][y]*sm<sp/>:<sp/>1.0/n_nodes)*alpha;}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr_[y]<sp/>=<sp/>(*bin_data)[y][y]/n_nodes;<sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>float&gt;<sp/>PR<sp/>=<sp/>pr_;<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bin_data){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr_.clear();<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sx<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>src(0);<sp/>src<sp/>&lt;<sp/>n_nodes;<sp/>++src){</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>(0);<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>&lt;<sp/>n_nodes;<sp/>++<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>){pr_[src]<sp/>+=<sp/>(Mij[src][<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>]*PR[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>]);}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr_[src]<sp/>+=<sp/>(1-alpha)/n_nodes;<sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sx<sp/>+=<sp/>pr_[src];<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itr<sp/>=<sp/>clust<sp/>-&gt;<sp/>begin();<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>norm<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>itr<sp/>!=<sp/>clust<sp/>-&gt;<sp/><ref refid="classpagerank__metric_1a5645a223f536ec244149aa2c502fef74" kindref="member">end</ref>();<sp/>++itr){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr_[itr<sp/>-&gt;<sp/>first]<sp/>=<sp/>pr_[itr<sp/>-&gt;<sp/>first]<sp/>/<sp/>sx;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/>+=<sp/>std::abs(pr_[itr<sp/>-&gt;<sp/>first]<sp/>-<sp/>PR[itr<sp/>-&gt;<sp/>first]);<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PR[itr<sp/>-&gt;<sp/>first]<sp/>=<sp/>pr_[itr<sp/>-&gt;<sp/>first];<sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout<sp/>+=<sp/>1;<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(norm<sp/>&gt;<sp/>1<ref refid="namespacetest__particles_1aad178dcf6e7313adddddce0674c990d0" kindref="member">e</ref>-6<sp/>&amp;&amp;<sp/>timeout<sp/>&lt;<sp/>1e6){</highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>norm<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>(0);<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>&lt;<sp/>n_nodes;<sp/>++<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>){</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sc<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>y(0);<sp/>y<sp/>&lt;<sp/>n_nodes;<sp/>++y){sc<sp/>+=<sp/>(<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>!=<sp/>y)<sp/>*<sp/>Mij[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>][y]<sp/>*<sp/>(pr_[y]);}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PR[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>]<sp/>=<sp/>sc;<sp/>norm<sp/>+=<sp/>sc;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!norm){</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>(0);<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>&lt;<sp/>n_nodes;<sp/>++<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>){PR[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>]<sp/>=<sp/>PR[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>]<sp/>/<sp/>norm;}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="classpagerank__metric_1a7ee9e25c68e9178ef983418866b97a26" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpagerank__metric_1a7ee9e25c68e9178ef983418866b97a26" kindref="member">pagerank_metric::define_metric</ref>(<ref refid="structmetric__t" kindref="compound">metric_t</ref>*<sp/><ref refid="namespacesimply__plot_1ae6b2d2b1db104871d1383019db2999d2" kindref="member">mtx</ref>){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-&gt;<sp/>mode<sp/>=<sp/><ref refid="namespacesimply__plot_1ae6b2d2b1db104871d1383019db2999d2" kindref="member">mtx</ref><sp/>-&gt;<sp/>mode();<sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::map&lt;int,<sp/>particle_gnn*&gt;<sp/>particle<sp/>=<sp/>this<sp/>-&gt;<sp/>sort_by_index(&amp;this<sp/>-&gt;<sp/>m_event_particles);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::map&lt;int,<sp/>std::map&lt;int,<sp/>float&gt;&gt;<sp/>bin_top,<sp/>bin_zprime;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::map&lt;int,<sp/>std::map&lt;std::string,<sp/>particle_gnn*&gt;&gt;<sp/>real_tops;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::map&lt;int,<sp/>std::map&lt;std::string,<sp/>particle_gnn*&gt;&gt;<sp/>real_zprime;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::map&lt;int,<sp/>std::map&lt;std::string,<sp/>particle_gnn*&gt;&gt;<sp/>reco_tops;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::map&lt;int,<sp/>std::map&lt;std::string,<sp/>particle_gnn*&gt;&gt;<sp/>reco_zprime;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>(size_t<sp/>x(0);<sp/>x<sp/>&lt;<sp/>this<sp/>-&gt;<sp/>m_edge_index.size();<sp/>++x){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>int<sp/>src<sp/>=<sp/>this<sp/>-&gt;<sp/>m_edge_index[x][0];<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>int<sp/>dst<sp/>=<sp/>this<sp/>-&gt;<sp/>m_edge_index[x][1];<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>particle_gnn*<sp/>ptr<sp/>=<sp/>particle[dst];<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>int<sp/>top_ij<sp/>=<sp/>(this<sp/>-&gt;<sp/>edge_top_scores[x][0]<sp/>&lt;<sp/>this<sp/>-&gt;<sp/>edge_top_scores[x][1]);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>int<sp/>res_ij<sp/>=<sp/>(this<sp/>-&gt;<sp/>edge_res_scores[x][0]<sp/>&lt;<sp/>this<sp/>-&gt;<sp/>edge_res_scores[x][1]);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(!reco_tops.count(src)){reco_tops[src]<sp/>=<sp/>{};}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(!reco_zprime.count(src)){reco_zprime[src]<sp/>=<sp/>{};}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::string<sp/>hx<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ptr<sp/>-&gt;<sp/>hash;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(top_ij){reco_tops[src][hx]<sp/><sp/><sp/>=<sp/>ptr;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(res_ij){reco_zprime[src][hx]<sp/>=<sp/>ptr;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>bin_top[src][dst]<sp/><sp/><sp/><sp/>=<sp/>this<sp/>-&gt;<sp/>edge_top_scores[x][1];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>bin_zprime[src][dst]<sp/>=<sp/>this<sp/>-&gt;<sp/>edge_res_scores[x][1];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(this<sp/>-&gt;<sp/>t_edge_top[x]){real_tops[src][hx]<sp/><sp/><sp/>=<sp/>ptr;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(this<sp/>-&gt;<sp/>t_edge_res[x]){real_zprime[src][hx]<sp/>=<sp/>ptr;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//if<sp/>(x<sp/>==<sp/>this<sp/>-&gt;<sp/>m_edge_index.size()-1){continue;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::map&lt;std::string,<sp/>std::vector&lt;particle_gnn*&gt;&gt;::iterator<sp/>it;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/>////<sp/>----<sp/>truth<sp/>---<sp/>//</highlight></codeline>
<codeline lineno="124"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::map&lt;std::string,<sp/>std::vector&lt;particle_gnn*&gt;&gt;<sp/>c_real_tops;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cluster(&amp;real_tops<sp/><sp/>,<sp/>&amp;c_real_tops,<sp/>nullptr,<sp/>nullptr);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>(it<sp/>=<sp/>c_real_tops.begin();<sp/>it<sp/>!=<sp/>c_real_tops.end();<sp/>++it){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>top*<sp/>t<sp/>=<sp/>nullptr;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>sum(&amp;it<sp/>-&gt;<sp/>second,<sp/>&amp;t);<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>m_t_tops[t<sp/>-&gt;<sp/>hash]<sp/>=<sp/>t;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>particle_template*&gt;<sp/>ch<sp/>=<sp/>t<sp/>-&gt;<sp/>children;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>particle_template*&gt;::iterator<sp/>itc<sp/>=<sp/>ch.begin();<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(;<sp/>itc<sp/>!=<sp/>ch.end();<sp/>++itc){t<sp/>-&gt;<sp/>n_leps<sp/>+=<sp/>((particle_gnn*)itc<sp/>-&gt;<sp/>second)<sp/>-&gt;<sp/>lep;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>t<sp/>-&gt;<sp/>n_nodes<sp/>=<sp/>ch.size();<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::map&lt;std::string,<sp/>std::vector&lt;particle_gnn*&gt;&gt;<sp/>c_real_zprime;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cluster(&amp;real_zprime,<sp/>&amp;c_real_zprime,<sp/>nullptr,<sp/>nullptr);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>(it<sp/>=<sp/>c_real_zprime.begin();<sp/>it<sp/>!=<sp/>c_real_zprime.end();<sp/>++it){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>zprime*<sp/>t<sp/>=<sp/>nullptr;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>sum(&amp;it<sp/>-&gt;<sp/>second,<sp/>&amp;t);<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>m_t_zprime[t<sp/>-&gt;<sp/>hash]<sp/>=<sp/>t;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>particle_template*&gt;<sp/>ch<sp/>=<sp/>t<sp/>-&gt;<sp/>children;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>particle_template*&gt;::iterator<sp/>itc<sp/>=<sp/>ch.begin();<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(;<sp/>itc<sp/>!=<sp/>ch.end();<sp/>++itc){t<sp/>-&gt;<sp/>n_leps<sp/>+=<sp/>((particle_gnn*)itc<sp/>-&gt;<sp/>second)<sp/>-&gt;<sp/>lep;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>t<sp/>-&gt;<sp/>n_nodes<sp/>=<sp/>ch.size();<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/>////<sp/>----<sp/>reco<sp/>----<sp/>//</highlight></codeline>
<codeline lineno="151"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::map&lt;std::string,<sp/>float&gt;<sp/>c_reco_tops_bin;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::map&lt;std::string,<sp/>std::vector&lt;particle_gnn*&gt;&gt;<sp/>c_reco_tops;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cluster(&amp;reco_tops<sp/><sp/>,<sp/>&amp;c_reco_tops,<sp/>&amp;c_reco_tops_bin,<sp/>&amp;bin_top);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>(it<sp/>=<sp/>c_reco_tops.begin();<sp/>it<sp/>!=<sp/>c_reco_tops.end();<sp/>++it){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>top*<sp/>t<sp/>=<sp/>nullptr;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>sum(&amp;it<sp/>-&gt;<sp/>second,<sp/>&amp;t);<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>t<sp/>-&gt;<sp/>av_score<sp/>=<sp/>c_reco_tops_bin[it<sp/>-&gt;<sp/>first];<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>m_r_tops[t<sp/>-&gt;<sp/>hash]<sp/>=<sp/>t;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>particle_template*&gt;<sp/>ch<sp/>=<sp/>t<sp/>-&gt;<sp/>children;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>particle_template*&gt;::iterator<sp/>itc<sp/>=<sp/>ch.begin();<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(;<sp/>itc<sp/>!=<sp/>ch.end();<sp/>++itc){t<sp/>-&gt;<sp/>n_leps<sp/>+=<sp/>((particle_gnn*)itc<sp/>-&gt;<sp/>second)<sp/>-&gt;<sp/>lep;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>t<sp/>-&gt;<sp/>n_nodes<sp/>=<sp/>ch.size();<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::map&lt;std::string,<sp/>float&gt;<sp/>c_reco_zprime_bin;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::map&lt;std::string,<sp/>std::vector&lt;particle_gnn*&gt;&gt;<sp/>c_reco_zprime;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cluster(&amp;reco_zprime,<sp/>&amp;c_reco_zprime,<sp/>&amp;c_reco_zprime_bin,<sp/>&amp;bin_zprime);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>(it<sp/>=<sp/>c_reco_zprime.begin();<sp/>it<sp/>!=<sp/>c_reco_zprime.end();<sp/>++it){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>zprime*<sp/>t<sp/>=<sp/>nullptr;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>sum(&amp;it<sp/>-&gt;<sp/>second,<sp/>&amp;t);<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>t<sp/>-&gt;<sp/>av_score<sp/>=<sp/>c_reco_zprime_bin[it<sp/>-&gt;<sp/>first];<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>this<sp/>-&gt;<sp/>m_r_zprime[t<sp/>-&gt;<sp/>hash]<sp/>=<sp/>t;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>particle_template*&gt;<sp/>ch<sp/>=<sp/>t<sp/>-&gt;<sp/>children;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>particle_template*&gt;::iterator<sp/>itc<sp/>=<sp/>ch.begin();<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>for<sp/>(;<sp/>itc<sp/>!=<sp/>ch.end();<sp/>++itc){t<sp/>-&gt;<sp/>n_leps<sp/>+=<sp/>((particle_gnn*)itc<sp/>-&gt;<sp/>second)<sp/>-&gt;<sp/>lep;}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>t<sp/>-&gt;<sp/>n_nodes<sp/>=<sp/>ch.size();<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/>////<sp/>-----<sp/>vectorize<sp/>the<sp/>output<sp/>particles<sp/>------<sp/>//</highlight></codeline>
<codeline lineno="182"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>-&gt;<sp/>vectorize(&amp;this<sp/>-&gt;<sp/>m_r_zprime,<sp/>&amp;this<sp/>-&gt;<sp/>r_zprime);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>-&gt;<sp/>vectorize(&amp;this<sp/>-&gt;<sp/>m_t_zprime,<sp/>&amp;this<sp/>-&gt;<sp/>t_zprime);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>-&gt;<sp/>vectorize(&amp;this<sp/>-&gt;<sp/>m_r_tops,<sp/>&amp;this<sp/>-&gt;<sp/>r_tops);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>-&gt;<sp/>vectorize(&amp;this<sp/>-&gt;<sp/>m_t_tops,<sp/>&amp;this<sp/>-&gt;<sp/>t_tops);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>-&gt;<sp/>vectorize(&amp;this<sp/>-&gt;<sp/>m_event_particles,<sp/>&amp;this<sp/>-&gt;<sp/>event_particles);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>-&gt;<sp/>m_edge_index<sp/>=<sp/>{};<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="metrics/pagerank/cxx/pagerank.cxx"/>
  </compounddef>
</doxygen>
