<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="tensor__cast_8h" kind="file" language="C++">
    <compoundname>tensor_cast.h</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">torch/torch.h</includes>
    <includedby refid="graph__template_8h" local="no">graph_template.h</includedby>
    <includedby refid="interface_8cxx" local="no">interface.cxx</includedby>
    <incdepgraph>
      <node id="1">
        <label>tensor_cast.h</label>
        <link refid="tensor__cast_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
      <node id="3">
        <label>torch/torch.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="16">
        <label>optimizer_build.cxx</label>
        <link refid="optimizer__build_8cxx"/>
      </node>
      <node id="21">
        <label>sampletracer.h</label>
        <link refid="sampletracer_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>event_build.cxx</label>
        <link refid="event__build_8cxx"/>
      </node>
      <node id="8">
        <label>graphs.cxx</label>
        <link refid="ssml__mc20_2cxx_2graphs_8cxx"/>
      </node>
      <node id="32">
        <label>interface.cxx</label>
        <link refid="interface_8cxx"/>
      </node>
      <node id="14">
        <label>methods.cxx</label>
        <link refid="methods_8cxx"/>
      </node>
      <node id="19">
        <label>container.cxx</label>
        <link refid="container_8cxx"/>
      </node>
      <node id="20">
        <label>entries.cxx</label>
        <link refid="entries_8cxx"/>
      </node>
      <node id="17">
        <label>selection_build.cxx</label>
        <link refid="selection__build_8cxx"/>
      </node>
      <node id="7">
        <label>graphs.cxx</label>
        <link refid="exp__mc20_2cxx_2graphs_8cxx"/>
      </node>
      <node id="28">
        <label>optimizer.cxx</label>
        <link refid="optimizer_2cxx_2optimizer_8cxx"/>
      </node>
      <node id="25">
        <label>dataloader.cxx</label>
        <link refid="dataloader_8cxx"/>
      </node>
      <node id="24">
        <label>cache.cxx</label>
        <link refid="cache_8cxx"/>
      </node>
      <node id="4">
        <label>graphs.h</label>
        <link refid="exp__mc20_2include_2exp__mc20_2graphs_8h"/>
      </node>
      <node id="2">
        <label>graph_template.h</label>
        <link refid="graph__template_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>graphs.cxx</label>
        <link refid="bsm__4tops_2cxx_2graphs_8cxx"/>
      </node>
      <node id="5">
        <label>graphs.h</label>
        <link refid="ssml__mc20_2include_2ssml__mc20_2graphs_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>inference_build.cxx</label>
        <link refid="inference__build_8cxx"/>
      </node>
      <node id="27">
        <label>optimizer.h</label>
        <link refid="optimizer_2include_2generators_2optimizer_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>graph_template.cxx</label>
        <link refid="graph__template_8cxx"/>
      </node>
      <node id="1">
        <label>tensor_cast.h</label>
        <link refid="tensor__cast_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>metric_build.cxx</label>
        <link refid="metric__build_8cxx"/>
      </node>
      <node id="18">
        <label>container.h</label>
        <link refid="container_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>dataloader.h</label>
        <link refid="dataloader_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>graph_build.cxx</label>
        <link refid="graph__build_8cxx"/>
      </node>
      <node id="22">
        <label>sampletracer.cxx</label>
        <link refid="sampletracer_8cxx"/>
      </node>
      <node id="30">
        <label>properties.cxx</label>
        <link refid="graph_2cxx_2properties_8cxx"/>
      </node>
      <node id="26">
        <label>dataset.cxx</label>
        <link refid="dataset_8cxx"/>
      </node>
      <node id="10">
        <label>analysis.cxx</label>
        <link refid="analysis_8cxx"/>
      </node>
      <node id="3">
        <label>graphs.h</label>
        <link refid="bsm__4tops_2include_2bsm__4tops_2graphs_8h"/>
      </node>
      <node id="31">
        <label>struct_graph.cxx</label>
        <link refid="struct__graph_8cxx"/>
      </node>
      <node id="9">
        <label>analysis.h</label>
        <link refid="analysis_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="tensor__cast_8h_1af735bf7b89e3864dbde7fe5def867d4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scout_dim</definition>
        <argsstring>(g *, int *)</argsstring>
        <name>scout_dim</name>
        <param>
          <type>g *</type>
        </param>
        <param>
          <type>int *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/typecasting/include/tools/tensor_cast.h" line="9" column="6" bodyfile="modules/typecasting/include/tools/tensor_cast.h" bodystart="9" bodyend="9"/>
        <referencedby refid="tensor__cast_8h_1a0a79cc424d604f22f510d2c9dc3de7b6" compoundref="tensor__cast_8h" startline="21" endline="29">scout_dim</referencedby>
      </memberdef>
      <memberdef kind="function" id="tensor__cast_8h_1a21dae38adc3eda42c21a7791d6b42232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nulls</definition>
        <argsstring>(g *d, int *)</argsstring>
        <name>nulls</name>
        <param>
          <type>g *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/typecasting/include/tools/tensor_cast.h" line="12" column="6" bodyfile="modules/typecasting/include/tools/tensor_cast.h" bodystart="12" bodyend="12"/>
        <references refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a8277e0910d750195b448797616e091ad">d</references>
        <referencedby refid="tensor__cast_8h_1aed6011af1941fc2fe6dd1cba12a682dd" compoundref="tensor__cast_8h" startline="32" endline="37">nulls</referencedby>
        <referencedby refid="tensor__cast_8h_1a093a1df6acceb4e79a18e0c1d1be24b0" compoundref="tensor__cast_8h" startline="40" endline="49">standard</referencedby>
      </memberdef>
      <memberdef kind="function" id="tensor__cast_8h_1af14120999422d60b3d0aef376398fca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool standard</definition>
        <argsstring>(g *, int *)</argsstring>
        <name>standard</name>
        <param>
          <type>g *</type>
        </param>
        <param>
          <type>int *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/typecasting/include/tools/tensor_cast.h" line="15" column="6" bodyfile="modules/typecasting/include/tools/tensor_cast.h" bodystart="15" bodyend="15"/>
        <referencedby refid="tensor__cast_8h_1a093a1df6acceb4e79a18e0c1d1be24b0" compoundref="tensor__cast_8h" startline="40" endline="49">standard</referencedby>
      </memberdef>
      <memberdef kind="function" id="tensor__cast_8h_1a49d70dbad1cfb3e27ebb8960cff818bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void as_primitive</definition>
        <argsstring>(G *data, std::vector&lt; g &gt; *lin, std::vector&lt; signed long &gt; *, unsigned int)</argsstring>
        <name>as_primitive</name>
        <param>
          <type>G *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::vector&lt; g &gt; *</type>
          <declname>lin</declname>
        </param>
        <param>
          <type>std::vector&lt; signed long &gt; *</type>
        </param>
        <param>
          <type>unsigned int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/typecasting/include/tools/tensor_cast.h" line="18" column="6" bodyfile="modules/typecasting/include/tools/tensor_cast.h" bodystart="18" bodyend="18"/>
        <references refid="namespacesimply__plot_1a73c4671efaa427b5621fe9d0d563decd" compoundref="simply__plot_8py" startline="620">simply_plot.data</references>
      </memberdef>
      <memberdef kind="function" id="tensor__cast_8h_1a0a79cc424d604f22f510d2c9dc3de7b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void scout_dim</definition>
        <argsstring>(const std::vector&lt; G &gt; *vec, int *mx_dim)</argsstring>
        <name>scout_dim</name>
        <param>
          <type>const std::vector&lt; G &gt; *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mx_dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/typecasting/include/tools/tensor_cast.h" line="21" column="6" bodyfile="modules/typecasting/include/tools/tensor_cast.h" bodystart="21" bodyend="29"/>
        <references refid="tensor__cast_8h_1af735bf7b89e3864dbde7fe5def867d4d" compoundref="tensor__cast_8h" startline="9" endline="9">scout_dim</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
      </memberdef>
      <memberdef kind="function" id="tensor__cast_8h_1aed6011af1941fc2fe6dd1cba12a682dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void nulls</definition>
        <argsstring>(const std::vector&lt; g &gt; *d, int *mx_dim)</argsstring>
        <name>nulls</name>
        <param>
          <type>const std::vector&lt; g &gt; *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mx_dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/typecasting/include/tools/tensor_cast.h" line="32" column="6" bodyfile="modules/typecasting/include/tools/tensor_cast.h" bodystart="32" bodyend="37"/>
        <references refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a8277e0910d750195b448797616e091ad">d</references>
        <references refid="tensor__cast_8h_1a21dae38adc3eda42c21a7791d6b42232" compoundref="tensor__cast_8h" startline="12" endline="12">nulls</references>
        <references refid="namespacetest__experimental__mc20_1a7f7159e9d580b1c745290260dc63e0c3" compoundref="test__experimental__mc20_8py" startline="7">test_experimental_mc20.t</references>
      </memberdef>
      <memberdef kind="function" id="tensor__cast_8h_1a093a1df6acceb4e79a18e0c1d1be24b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool standard</definition>
        <argsstring>(const std::vector&lt; g &gt; *vec, int *mx_dim)</argsstring>
        <name>standard</name>
        <param>
          <type>const std::vector&lt; g &gt; *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mx_dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/typecasting/include/tools/tensor_cast.h" line="40" column="6" bodyfile="modules/typecasting/include/tools/tensor_cast.h" bodystart="40" bodyend="49"/>
        <references refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a2db95e8e1a9267b7a1188556b2013b33">l</references>
        <references refid="tensor__cast_8h_1a21dae38adc3eda42c21a7791d6b42232" compoundref="tensor__cast_8h" startline="12" endline="12">nulls</references>
        <references refid="tensor__cast_8h_1af14120999422d60b3d0aef376398fca6" compoundref="tensor__cast_8h" startline="15" endline="15">standard</references>
        <references refid="namespacemain_1addad44088d98a1b128614b9004968ae0" compoundref="performance_2main_8py" startline="92">main.x</references>
      </memberdef>
      <memberdef kind="function" id="tensor__cast_8h_1a7309c6796a9e5ad0bcdbe2d4099d60ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void as_primitive</definition>
        <argsstring>(std::vector&lt; G &gt; *data, std::vector&lt; g &gt; *linear, std::vector&lt; signed long &gt; *dims, unsigned int depth=0)</argsstring>
        <name>as_primitive</name>
        <param>
          <type>std::vector&lt; G &gt; *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::vector&lt; g &gt; *</type>
          <declname>linear</declname>
        </param>
        <param>
          <type>std::vector&lt; signed long &gt; *</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>depth</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/typecasting/include/tools/tensor_cast.h" line="52" column="13" bodyfile="modules/typecasting/include/tools/tensor_cast.h" bodystart="52" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="tensor__cast_8h_1a27121e7e5aeb77bda0453dd6214cf7fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
          <param>
            <type>typename g</type>
          </param>
        </templateparamlist>
        <type>torch::Tensor</type>
        <definition>static torch::Tensor build_tensor</definition>
        <argsstring>(std::vector&lt; G &gt; *_data, at::ScalarType _op, g, torch::TensorOptions *op)</argsstring>
        <name>build_tensor</name>
        <param>
          <type>std::vector&lt; G &gt; *</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>at::ScalarType</type>
          <declname>_op</declname>
        </param>
        <param>
          <type>g</type>
        </param>
        <param>
          <type>torch::TensorOptions *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="modules/typecasting/include/tools/tensor_cast.h" line="62" column="22" bodyfile="modules/typecasting/include/tools/tensor_cast.h" bodystart="62" bodyend="78"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>TYPECASTING_TENSOR_CAST_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPECASTING_TENSOR_CAST_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;torch/torch.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------<sp/>tensor<sp/>padding<sp/>---------<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>g&gt;</highlight></codeline>
<codeline lineno="9" refid="tensor__cast_8h_1af735bf7b89e3864dbde7fe5def867d4d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tensor__cast_8h_1af735bf7b89e3864dbde7fe5def867d4d" kindref="member">scout_dim</ref>(g*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>g&gt;</highlight></codeline>
<codeline lineno="12" refid="tensor__cast_8h_1a21dae38adc3eda42c21a7791d6b42232" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tensor__cast_8h_1a21dae38adc3eda42c21a7791d6b42232" kindref="member">nulls</ref>(g*<sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*){*<ref refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a8277e0910d750195b448797616e091ad" kindref="member">d</ref><sp/>=<sp/>-1;}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>g&gt;</highlight></codeline>
<codeline lineno="15" refid="tensor__cast_8h_1af14120999422d60b3d0aef376398fca6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="tensor__cast_8h_1af14120999422d60b3d0aef376398fca6" kindref="member">standard</ref>(g*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>g&gt;</highlight></codeline>
<codeline lineno="18" refid="tensor__cast_8h_1a49d70dbad1cfb3e27ebb8960cff818bb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tensor__cast_8h_1a49d70dbad1cfb3e27ebb8960cff818bb" kindref="member">as_primitive</ref>(G*<sp/><ref refid="namespacesimply__plot_1a73c4671efaa427b5621fe9d0d563decd" kindref="member">data</ref>,<sp/>std::vector&lt;g&gt;*<sp/>lin,<sp/>std::vector&lt;signed<sp/>long&gt;*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">){lin<sp/>-&gt;<sp/>push_back(*<ref refid="namespacesimply__plot_1a73c4671efaa427b5621fe9d0d563decd" kindref="member">data</ref>);}<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G&gt;</highlight></codeline>
<codeline lineno="21" refid="tensor__cast_8h_1a0a79cc424d604f22f510d2c9dc3de7b6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tensor__cast_8h_1af735bf7b89e3864dbde7fe5def867d4d" kindref="member">scout_dim</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;G&gt;*<sp/>vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>mx_dim){</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>(0);<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>&lt;<sp/>vec<sp/>-&gt;<sp/>size();<sp/>++<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>){</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tensor__cast_8h_1af735bf7b89e3864dbde7fe5def867d4d" kindref="member">scout_dim</ref>(&amp;vec<sp/>-&gt;<sp/>at(<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>),<sp/>&amp;dim_);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dim_){dim_<sp/>=<sp/>vec<sp/>-&gt;<sp/>size();}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_<sp/>&lt;<sp/>*mx_dim){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>*mx_dim<sp/>=<sp/>dim_;<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>g&gt;</highlight></codeline>
<codeline lineno="32" refid="tensor__cast_8h_1aed6011af1941fc2fe6dd1cba12a682dd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tensor__cast_8h_1a21dae38adc3eda42c21a7791d6b42232" kindref="member">nulls</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;g&gt;*<sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>mx_dim){</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacetest__experimental__mc20_1a7f7159e9d580b1c745290260dc63e0c3" kindref="member">t</ref>(<ref refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a8277e0910d750195b448797616e091ad" kindref="member">d</ref><sp/>-&gt;<sp/>size());<sp/><ref refid="namespacetest__experimental__mc20_1a7f7159e9d580b1c745290260dc63e0c3" kindref="member">t</ref><sp/>&lt;<sp/>*mx_dim;<sp/>++<ref refid="namespacetest__experimental__mc20_1a7f7159e9d580b1c745290260dc63e0c3" kindref="member">t</ref>){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a8277e0910d750195b448797616e091ad" kindref="member">d</ref><sp/>-&gt;<sp/>push_back({});</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tensor__cast_8h_1a21dae38adc3eda42c21a7791d6b42232" kindref="member">nulls</ref>(&amp;<ref refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a8277e0910d750195b448797616e091ad" kindref="member">d</ref><sp/>-&gt;<sp/>at(<ref refid="namespacetest__experimental__mc20_1a7f7159e9d580b1c745290260dc63e0c3" kindref="member">t</ref>),<sp/>mx_dim);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>g&gt;</highlight></codeline>
<codeline lineno="40" refid="tensor__cast_8h_1a093a1df6acceb4e79a18e0c1d1be24b0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="tensor__cast_8h_1af14120999422d60b3d0aef376398fca6" kindref="member">standard</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;g&gt;*<sp/>vec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>mx_dim){</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a2db95e8e1a9267b7a1188556b2013b33" kindref="member">l</ref><sp/>=<sp/>vec<sp/>-&gt;<sp/>size();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a2db95e8e1a9267b7a1188556b2013b33" kindref="member">l</ref>){<ref refid="tensor__cast_8h_1a21dae38adc3eda42c21a7791d6b42232" kindref="member">nulls</ref>(vec,<sp/>mx_dim);}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>(0);<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>&lt;<sp/><ref refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a2db95e8e1a9267b7a1188556b2013b33" kindref="member">l</ref>;<sp/>++<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>){</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="tensor__cast_8h_1af14120999422d60b3d0aef376398fca6" kindref="member">standard</ref>(&amp;vec<sp/>-&gt;<sp/>at(<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>),<sp/>mx_dim)){</highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tensor__cast_8h_1a21dae38adc3eda42c21a7791d6b42232" kindref="member">nulls</ref>(vec,<sp/>mx_dim);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>g&gt;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tensor__cast_8h_1a49d70dbad1cfb3e27ebb8960cff818bb" kindref="member">as_primitive</ref>(std::vector&lt;G&gt;*<sp/><ref refid="namespacesimply__plot_1a73c4671efaa427b5621fe9d0d563decd" kindref="member">data</ref>,<sp/>std::vector&lt;g&gt;*<sp/>linear,<sp/>std::vector&lt;signed<sp/>long&gt;*<sp/>dims,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>depth<sp/>=<sp/>0){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(depth<sp/>==<sp/>dims<sp/>-&gt;<sp/>size()){dims<sp/>-&gt;<sp/>push_back(<ref refid="namespacesimply__plot_1a73c4671efaa427b5621fe9d0d563decd" kindref="member">data</ref><sp/>-&gt;<sp/>size());}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>(0);<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>&lt;<sp/><ref refid="namespacesimply__plot_1a73c4671efaa427b5621fe9d0d563decd" kindref="member">data</ref><sp/>-&gt;<sp/>size();<sp/>++<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>){</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G<sp/>tx<sp/>=<sp/>(*data)[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>];<sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tensor__cast_8h_1a49d70dbad1cfb3e27ebb8960cff818bb" kindref="member">as_primitive</ref>(&amp;tx,<sp/>linear,<sp/>dims,<sp/>depth+1);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>G,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>g&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>torch::Tensor<sp/>build_tensor(std::vector&lt;G&gt;*<sp/>_data,<sp/>at::ScalarType<sp/>_op,<sp/>g,<sp/>torch::TensorOptions*<sp/><ref refid="namespacetest__generator_1adac66e982d9a2a89699bf61856f98823" kindref="member">op</ref>){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_dim<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;g&gt;<sp/>linear<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;signed<sp/>long&gt;<sp/>dims<sp/>=<sp/>{};<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tensor__cast_8h_1af735bf7b89e3864dbde7fe5def867d4d" kindref="member">scout_dim</ref>(_data,<sp/>&amp;max_dim);<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tensor__cast_8h_1af14120999422d60b3d0aef376398fca6" kindref="member">standard</ref>(_data,<sp/>&amp;max_dim);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tensor__cast_8h_1a49d70dbad1cfb3e27ebb8960cff818bb" kindref="member">as_primitive</ref>(_data,<sp/>&amp;linear,<sp/>&amp;dims);<sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>linear.size();<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>g*<sp/><ref refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a8277e0910d750195b448797616e091ad" kindref="member">d</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>g[s];<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>(0);<sp/><ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref><sp/>&lt;<sp/>s;<sp/>++<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>){<ref refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a8277e0910d750195b448797616e091ad" kindref="member">d</ref>[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>]<sp/>=<sp/>linear[<ref refid="namespacemain_1addad44088d98a1b128614b9004968ae0" kindref="member">x</ref>];}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dims.size()<sp/>==<sp/>1){dims.push_back(1);}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>torch::Tensor<sp/>ten<sp/>=<sp/>torch::from_blob(d,<sp/>dims,<sp/>(*op).dtype(_op)).clone();<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/><ref refid="enums_8h_1afc0e564c96a59a78f7943fac65657ff3a8277e0910d750195b448797616e091ad" kindref="member">d</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ten;<sp/></highlight><highlight class="comment">//torch::from_blob((void*)linear.data(),<sp/>dims,<sp/>(*op).dtype(_op)).clone();<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="modules/typecasting/include/tools/tensor_cast.h"/>
  </compounddef>
</doxygen>
