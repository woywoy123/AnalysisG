<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="tools_8pyx" kind="file" language="C++">
    <compoundname>tools.pyx</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>distutils:<sp/>language=c++</highlight></codeline>
<codeline><highlight class="normal">#<sp/>cython:<sp/>language_level=3</highlight></codeline>
<codeline><highlight class="normal">from<sp/>libcpp<sp/>cimport<sp/>bool,<sp/>int</highlight></codeline>
<codeline><highlight class="normal">from<sp/>libcpp.map<sp/>cimport<sp/>map,<sp/>pair</highlight></codeline>
<codeline><highlight class="normal">from<sp/>libcpp.string<sp/>cimport<sp/>string</highlight></codeline>
<codeline><highlight class="normal">from<sp/>libcpp.vector<sp/>cimport<sp/>vector</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">from<sp/>cython.operator<sp/>cimport<sp/>dereference<sp/>as<sp/>dref</highlight></codeline>
<codeline><highlight class="normal">from<sp/>libcpp.unordered_map<sp/>cimport<sp/>unordered_map</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>string<sp/>enc(str<sp/>val):<sp/>return<sp/>val.encode(&quot;utf-8&quot;)</highlight></codeline>
<codeline><highlight class="normal">cdef<sp/>str<sp/>env(string<sp/>val):<sp/>return<sp/>val.decode(&quot;utf-8&quot;)</highlight></codeline>
<codeline><highlight class="normal">cdef<sp/>list<sp/>env_vec(vector[string]*<sp/>inpt):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>int<sp/>i</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>list<sp/>out<sp/>=<sp/>[env(inpt.at(i))<sp/>for<sp/>i<sp/>in<sp/>range(inpt.size())]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>out</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>vector[string]<sp/>enc_list(list<sp/>inpt):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>str<sp/>i</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>vector[string]<sp/>out<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>i<sp/>in<sp/>inpt:<sp/>out.push_back(enc(i))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>out</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>dict<sp/>as_basic_dist_dict_f(map[string,<sp/>map[float,<sp/>base_types]]*<sp/>inpt):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>output<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>pair[string,<sp/>map[float,<sp/>base_types]]<sp/>itr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>pair<sp/>in<sp/>dref(inpt):<sp/>output[env(pair.first)]<sp/>=<sp/>pair.second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>output</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>list<sp/>as_list(vector[base_types]*<sp/>inp):<sp/>return<sp/>list(dref(inp))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>dict<sp/>as_basic_dict(map[string,<sp/>base_types]*<sp/>inpt):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>output<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>pair[string,<sp/>base_types]<sp/>itr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>pair<sp/>in<sp/>dref(inpt):<sp/>output[env(pair.first)]<sp/>=<sp/>pair.second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>output</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>dict<sp/>as_basic_udict(unordered_map[string,<sp/>base_types]*<sp/>inpt):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>output<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>pair[string,<sp/>base_types]<sp/>itr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>pair<sp/>in<sp/>dref(inpt):<sp/>output[env(pair.first)]<sp/>=<sp/>pair.second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>output</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>dict<sp/>as_basic_dict_dict(map[string,<sp/>map[string,<sp/>base_types]]*<sp/>inpt):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>output<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>pair[string,<sp/>map[string,<sp/>base_types]]<sp/>itr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>pair<sp/>in<sp/>dref(inpt):<sp/>output[env(pair.first)]<sp/>=<sp/>as_basic_dict(&amp;pair.second)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>output</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>dict<sp/>as_dict(map[string,<sp/>vector[base_types]]*<sp/>inpt):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>output<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>pair[string,<sp/>vector[base_types]]<sp/>itr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>pair<sp/>in<sp/>dref(inpt):<sp/>output[env(pair.first)]<sp/>=<sp/>as_list(&amp;pair.second)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>output</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>dict<sp/>as_dict_dict(map[string,<sp/>map[string,<sp/>vector[base_types]]]*<sp/>inpt):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>output<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>pair[string,<sp/>map[string,<sp/>vector[base_types]]]<sp/>itr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>pair<sp/>in<sp/>dref(inpt):<sp/>output[env(pair.first)]<sp/>=<sp/>as_dict(&amp;pair.second)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>output</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>dict<sp/>as_dict_dict_dict(map[string,<sp/>map[string,<sp/>map[string,<sp/>vector[base_types]]]]*<sp/>inpt):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>output<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>pair[string,<sp/>map[string,<sp/>map[string,<sp/>vector[base_types]]]]<sp/>itr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>pair<sp/>in<sp/>dref(inpt):<sp/>output[env(pair.first)]<sp/>=<sp/>as_dict_dict(&amp;pair.second)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>output</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>void<sp/>as_map(dict<sp/>inpt,<sp/>map[string,<sp/>base_types]*<sp/>out):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>str<sp/>key</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>key<sp/>in<sp/>inpt:<sp/>dref(out)[enc(key)]<sp/>=<sp/>inpt[key]<sp/>if<sp/>not<sp/>isinstance(inpt[key],<sp/>str)<sp/>else<sp/>enc(inpt[key])</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>void<sp/>as_umap(dict<sp/>inpt,<sp/>unordered_map[string,<sp/>base_types]*<sp/>out):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>str<sp/>key</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>key<sp/>in<sp/>inpt:<sp/>dref(out)[enc(key)]<sp/>=<sp/>inpt[key]<sp/>if<sp/>not<sp/>isinstance(inpt[key],<sp/>str)<sp/>else<sp/>enc(inpt[key])</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>dict<sp/>as_basic_dict_dict_f(map[string,<sp/>map[float,<sp/>base_types]]*<sp/>inpt):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>dict<sp/>output<sp/>=<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cdef<sp/>pair[string,<sp/>map[float,<sp/>base_types]]<sp/>itr</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>pair<sp/>in<sp/>dref(inpt):<sp/>output[env(pair.first)]<sp/>=<sp/>pair.second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>output</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">cdef<sp/>class<sp/>Tools:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__cinit__(self):<sp/>self.ptr<sp/>=<sp/>new<sp/>tools()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__init__(self):<sp/>pass</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>__dealloc__(self):<sp/>del<sp/>self.ptr</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>create_path(self,<sp/>str<sp/>pth):<sp/>self.ptr.create_path(enc(pth))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>delete_path(self,<sp/>str<sp/>pth):<sp/>self.ptr.delete_path(enc(pth))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>is_file(self,<sp/>str<sp/>pth):<sp/>return<sp/>self.ptr.is_file(enc(pth))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>rename(self,<sp/>str<sp/>src,<sp/>str<sp/>dst):<sp/>self.ptr.rename(enc(src),<sp/>enc(dst))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>abs(self,<sp/>str<sp/>pth):<sp/>return<sp/>env(self.ptr.absolute_path(enc(pth)))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>ls(self,<sp/>str<sp/>pth,<sp/>str<sp/>ext):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[string]<sp/>pd<sp/>=<sp/>self.ptr.ls(enc(pth),<sp/>enc(ext))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>env_vec(&amp;pd)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>replace(self,<sp/>str<sp/>val,<sp/>str<sp/>rpl,<sp/>str<sp/>rpwl):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>string<sp/>sx<sp/>=<sp/>enc(val)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.ptr.replace(&amp;sx,<sp/>enc(rpl),<sp/>enc(rpwl))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>env(sx)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>has_substring(self,<sp/>str<sp/>val,<sp/>str<sp/>rpl):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>string<sp/>sx<sp/>=<sp/>enc(val)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>self.ptr.has_string(&amp;sx,<sp/>enc(rpl))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>ends_with(self,<sp/>str<sp/>val,<sp/>str<sp/>rpl):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>string<sp/>sx<sp/>=<sp/>enc(val)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>self.ptr.ends_with(&amp;sx,<sp/>enc(rpl))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>has_value(self,<sp/>list<sp/>data,<sp/>str<sp/>trg):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[string]<sp/>pd<sp/>=<sp/>enc_list(data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>self.ptr.has_value(&amp;pd,<sp/>enc(trg))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>split(self,<sp/>str<sp/>data,<sp/>trg):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[string]<sp/>pd<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/><sp/><sp/>isinstance(trg,<sp/>int):<sp/>pd<sp/>=<sp/>self.ptr.split(enc(data),<sp/>&lt;int&gt;(trg))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>isinstance(trg,<sp/>str):<sp/>pd<sp/>=<sp/>self.ptr.split(enc(data),<sp/>enc(trg))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>as_list(&amp;pd)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>hash(self,<sp/>str<sp/>data,<sp/>int<sp/>lx<sp/>=<sp/>8):<sp/>return<sp/>env(self.ptr.hash(enc(data),<sp/>lx))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>encode64(self,<sp/>str<sp/>data):<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>string<sp/>v<sp/>=<sp/>enc(data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>env(self.ptr.encode64(&amp;v))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>decode64(self,<sp/>str<sp/>data):<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>string<sp/>v<sp/>=<sp/>enc(data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>env(self.ptr.decode64(&amp;v))</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>def<sp/>discretize(self,<sp/>list<sp/>data,<sp/>int<sp/>lx):<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>not<sp/>len(data):<sp/>return<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[string]<sp/>v<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cdef<sp/>vector[int]<sp/>vi<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>isinstance(data[0],<sp/>str):<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>enc_list(data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>self.ptr.discretize(&amp;v,<sp/>lx)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif<sp/>isinstance(data[0],<sp/>int):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vi<sp/>=<sp/>&lt;vector[int]&gt;(data)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>self.ptr.discretize(&amp;vi,<sp/>lx)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>[]</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
    </programlisting>
    <location file="core/tools.pyx"/>
  </compounddef>
</doxygen>
