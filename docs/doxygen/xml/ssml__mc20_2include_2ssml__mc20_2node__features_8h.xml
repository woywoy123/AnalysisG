<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="ssml__mc20_2include_2ssml__mc20_2node__features_8h" kind="file" language="C++">
    <compoundname>ssml_mc20/include/ssml_mc20/node_features.h</compoundname>
    <includedby refid="bsm__4tops_2cxx_2graphs_8cxx" local="yes">graphs.cxx</includedby>
    <includedby refid="exp__mc20_2cxx_2graphs_8cxx" local="yes">graphs.cxx</includedby>
    <includedby refid="ssml__mc20_2cxx_2graphs_8cxx" local="yes">graphs.cxx</includedby>
    <invincdepgraph>
      <node id="4">
        <label>graphs.cxx</label>
        <link refid="ssml__mc20_2cxx_2graphs_8cxx"/>
      </node>
      <node id="3">
        <label>graphs.cxx</label>
        <link refid="exp__mc20_2cxx_2graphs_8cxx"/>
      </node>
      <node id="2">
        <label>graphs.cxx</label>
        <link refid="bsm__4tops_2cxx_2graphs_8cxx"/>
      </node>
      <node id="1">
        <label>node_features.h</label>
        <link refid="ssml__mc20_2include_2ssml__mc20_2node__features_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="ssml__mc20_2include_2ssml__mc20_2node__features_8h_1a5f54d2222321d1bed1940c6bfa3073f3" prot="public" static="no">
        <name>NODES_FEATURES_SSML_MC20_H</name>
        <briefdescription>
<para>&lt; Start of include guard for NODES_FEATURES_SSML_MC20_H. </para>
        </briefdescription>
        <detaileddescription>
<para>Definition of NODES_FEATURES_SSML_MC20_H to signify the header has been included. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/ssml_mc20/include/ssml_mc20/node_features.h" line="12" column="9" bodyfile="graphs/ssml_mc20/include/ssml_mc20/node_features.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ssml__mc20_2include_2ssml__mc20_2node__features_8h_1ab1c59b5f0c6a25f3a21b6ff62c95596a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void res_node</definition>
        <argsstring>(int *o, particle_template *p)</argsstring>
        <name>res_node</name>
        <param>
          <type>int *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Extracts resonance information from a particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to int where the output will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="classparticle__template" kindref="compound">particle_template</ref> containing the data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Determines if the particle originates from a resonance decay and stores the appropriate classification value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/ssml_mc20/include/ssml_mc20/node_features.h" line="23" column="13" bodyfile="graphs/ssml_mc20/include/ssml_mc20/node_features.h" bodystart="23" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="ssml__mc20_2include_2ssml__mc20_2node__features_8h_1ab2215efaacd3bffb7241a74646421796" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void top_node</definition>
        <argsstring>(int *o, particle_template *p)</argsstring>
        <name>top_node</name>
        <param>
          <type>int *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Extracts top quark origin information from a particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to int where the output will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="classparticle__template" kindref="compound">particle_template</ref> containing the data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Determines if the particle originates from a top quark decay and stores the appropriate classification value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/ssml_mc20/include/ssml_mc20/node_features.h" line="39" column="13" bodyfile="graphs/ssml_mc20/include/ssml_mc20/node_features.h" bodystart="39" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="ssml__mc20_2include_2ssml__mc20_2node__features_8h_1a5daf68d52b4706d971b5a8b47c929139" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void pt</definition>
        <argsstring>(double *o, particle_template *p)</argsstring>
        <name>pt</name>
        <param>
          <type>double *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Extracts transverse momentum feature from a particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to double where the output will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="classparticle__template" kindref="compound">particle_template</ref> containing the data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Calculates and stores the transverse momentum (pT) of the particle. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/ssml_mc20/include/ssml_mc20/node_features.h" line="67" column="13" bodyfile="graphs/ssml_mc20/include/ssml_mc20/node_features.h" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="ssml__mc20_2include_2ssml__mc20_2node__features_8h_1a2fdb1bac13680528517c929fb47b98f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void eta</definition>
        <argsstring>(double *o, particle_template *p)</argsstring>
        <name>eta</name>
        <param>
          <type>double *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Extracts pseudorapidity feature from a particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to double where the output will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="classparticle__template" kindref="compound">particle_template</ref> containing the data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Calculates and stores the pseudorapidity (eta) of the particle. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/ssml_mc20/include/ssml_mc20/node_features.h" line="76" column="13" bodyfile="graphs/ssml_mc20/include/ssml_mc20/node_features.h" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="ssml__mc20_2include_2ssml__mc20_2node__features_8h_1ac4bd110a4f0667540fb5f5ff27acd86c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void phi</definition>
        <argsstring>(double *o, particle_template *p)</argsstring>
        <name>phi</name>
        <param>
          <type>double *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Extracts azimuthal angle feature from a particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to double where the output will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="classparticle__template" kindref="compound">particle_template</ref> containing the data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Calculates and stores the azimuthal angle (phi) of the particle. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/ssml_mc20/include/ssml_mc20/node_features.h" line="85" column="13" bodyfile="graphs/ssml_mc20/include/ssml_mc20/node_features.h" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="ssml__mc20_2include_2ssml__mc20_2node__features_8h_1a4776e0edb8c7a7350aa30a628e979e1b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void energy</definition>
        <argsstring>(double *o, particle_template *p)</argsstring>
        <name>energy</name>
        <param>
          <type>double *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Extracts energy feature from a particle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to double where the output will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="classparticle__template" kindref="compound">particle_template</ref> containing the data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Retrieves and stores the energy of the particle. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/ssml_mc20/include/ssml_mc20/node_features.h" line="94" column="13" bodyfile="graphs/ssml_mc20/include/ssml_mc20/node_features.h" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="ssml__mc20_2include_2ssml__mc20_2node__features_8h_1a05898150cc9167a4de297df624e6c15a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void is_lepton</definition>
        <argsstring>(int *o, particle_template *p)</argsstring>
        <name>is_lepton</name>
        <param>
          <type>int *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Determines if a particle is a lepton. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to int where the output will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="classparticle__template" kindref="compound">particle_template</ref> containing the data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Sets the output to 1 if the particle is an electron or muon, 0 otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/ssml_mc20/include/ssml_mc20/node_features.h" line="103" column="13" bodyfile="graphs/ssml_mc20/include/ssml_mc20/node_features.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="ssml__mc20_2include_2ssml__mc20_2node__features_8h_1a3f3117b469cddb9e7a32cef78c5c085f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void is_bquark</definition>
        <argsstring>(int *o, particle_template *p)</argsstring>
        <name>is_bquark</name>
        <param>
          <type>int *</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classparticle__template" kindref="compound">particle_template</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Determines if a particle is a b-quark. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to int where the output will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="classparticle__template" kindref="compound">particle_template</ref> containing the data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Sets the output to 1 if the particle is a b-quark, 0 otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="graphs/ssml_mc20/include/ssml_mc20/node_features.h" line="112" column="13" bodyfile="graphs/ssml_mc20/include/ssml_mc20/node_features.h" bodystart="112" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines node feature extraction functions for SSML MC20 graphs. </para>
    </briefdescription>
    <detaileddescription>
<para>This file contains function definitions for extracting various features from particle data to create node representations in graph neural networks specific to the SSML MC20 analysis. It includes both truth-level functions for training/validation and observable-level functions for inference on real data. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>@file<sp/>node_features.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Defines<sp/>node<sp/>feature<sp/>extraction<sp/>functions<sp/>for<sp/>SSML<sp/>MC20<sp/>graphs.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>contains<sp/>function<sp/>definitions<sp/>for<sp/>extracting<sp/>various<sp/>features<sp/>from</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>particle<sp/>data<sp/>to<sp/>create<sp/>node<sp/>representations<sp/>in<sp/>graph<sp/>neural<sp/>networks<sp/>specific</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>to<sp/>the<sp/>SSML<sp/>MC20<sp/>analysis.<sp/>It<sp/>includes<sp/>both<sp/>truth-level<sp/>functions<sp/>for<sp/>training/validation</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>and<sp/>observable-level<sp/>functions<sp/>for<sp/>inference<sp/>on<sp/>real<sp/>data.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NODES_FEATURES_SSML_MC20_H<sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>of<sp/>include<sp/>guard<sp/>for<sp/>NODES_FEATURES_SSML_MC20_H.</highlight></codeline>
<codeline lineno="12" refid="ssml__mc20_2include_2ssml__mc20_2node__features_8h_1a5f54d2222321d1bed1940c6bfa3073f3" refkind="member"><highlight class="comment"></highlight><highlight class="normal">#define<sp/>NODES_FEATURES_SSML_MC20_H<sp/></highlight><highlight class="comment">///&lt;<sp/>Definition<sp/>of<sp/>NODES_FEATURES_SSML_MC20_H<sp/>to<sp/>signify<sp/>the<sp/>header<sp/>has<sp/>been<sp/>included.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------<sp/>Node<sp/>Truth<sp/>Features<sp/>---------------------<sp/>//</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Extracts<sp/>resonance<sp/>information<sp/>from<sp/>a<sp/>particle.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>@param<sp/>o<sp/>Pointer<sp/>to<sp/>int<sp/>where<sp/>the<sp/>output<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>@param<sp/>p<sp/>Pointer<sp/>to<sp/>the<sp/>particle_template<sp/>containing<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Determines<sp/>if<sp/>the<sp/>particle<sp/>originates<sp/>from<sp/>a<sp/>resonance<sp/>decay<sp/>and<sp/>stores</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>the<sp/>appropriate<sp/>classification<sp/>value.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>res_node(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>type<sp/>=<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/>type;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;mu&quot;</highlight><highlight class="normal">){*o<sp/>=<sp/>((<ref refid="classmuon" kindref="compound">muon</ref>*)<ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>)<sp/>-&gt;<sp/>from_res;}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;el&quot;</highlight><highlight class="normal">){*o<sp/>=<sp/>((<ref refid="classelectron" kindref="compound">electron</ref>*)<ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>)<sp/>-&gt;<sp/>from_res;}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;jet&quot;</highlight><highlight class="normal">){*o<sp/>=<sp/>((<ref refid="classjet" kindref="compound">jet</ref>*)<ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>)<sp/>-&gt;<sp/>from_res;}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{*o<sp/>=<sp/>0;}<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal">};<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="31"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Extracts<sp/>top<sp/>quark<sp/>origin<sp/>information<sp/>from<sp/>a<sp/>particle.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>@param<sp/>o<sp/>Pointer<sp/>to<sp/>int<sp/>where<sp/>the<sp/>output<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>@param<sp/>p<sp/>Pointer<sp/>to<sp/>the<sp/>particle_template<sp/>containing<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>Determines<sp/>if<sp/>the<sp/>particle<sp/>originates<sp/>from<sp/>a<sp/>top<sp/>quark<sp/>decay<sp/>and<sp/>stores</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>the<sp/>appropriate<sp/>classification<sp/>value.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>top_node(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>type<sp/>=<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/>type;<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;jet&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classjet" kindref="compound">jet</ref>*<sp/>tx<sp/>=<sp/>(<ref refid="classjet" kindref="compound">jet</ref>*)<ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>;<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx<sp/>-&gt;<sp/>top_index<sp/>&lt;<sp/>0){*o<sp/>=<sp/>-1;}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{*o<sp/>=<sp/>tx<sp/>-&gt;<sp/>top_index;}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;mu&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmuon" kindref="compound">muon</ref>*<sp/>tx<sp/>=<sp/>(<ref refid="classmuon" kindref="compound">muon</ref>*)<ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>;<sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*o<sp/>=<sp/>tx<sp/>-&gt;<sp/>top_index;<sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;el&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classelectron" kindref="compound">electron</ref>*<sp/>tx<sp/>=<sp/>(<ref refid="classelectron" kindref="compound">electron</ref>*)<ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>;<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*o<sp/>=<sp/>tx<sp/>-&gt;<sp/>top_index;<sp/></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{*o<sp/>=<sp/>-1;}<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal">};<sp/></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------<sp/>Node<sp/>Observable<sp/>Features<sp/>---------------------<sp/>//</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Extracts<sp/>transverse<sp/>momentum<sp/>feature<sp/>from<sp/>a<sp/>particle.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>@param<sp/>o<sp/>Pointer<sp/>to<sp/>double<sp/>where<sp/>the<sp/>output<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>@param<sp/>p<sp/>Pointer<sp/>to<sp/>the<sp/>particle_template<sp/>containing<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>Calculates<sp/>and<sp/>stores<sp/>the<sp/>transverse<sp/>momentum<sp/>(pT)<sp/>of<sp/>the<sp/>particle.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespacetest__particles_1ae334386283ec557a6b2b6a30058de708" kindref="member">pt</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){*o<sp/>=<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="namespacetest__particles_1ae334386283ec557a6b2b6a30058de708" kindref="member">pt</ref>;}<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Extracts<sp/>pseudorapidity<sp/>feature<sp/>from<sp/>a<sp/>particle.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>@param<sp/>o<sp/>Pointer<sp/>to<sp/>double<sp/>where<sp/>the<sp/>output<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>@param<sp/>p<sp/>Pointer<sp/>to<sp/>the<sp/>particle_template<sp/>containing<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>Calculates<sp/>and<sp/>stores<sp/>the<sp/>pseudorapidity<sp/>(eta)<sp/>of<sp/>the<sp/>particle.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespacetest__particles_1a648556978e44bc1b1da27c1270951db5" kindref="member">eta</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){*o<sp/>=<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="namespacetest__particles_1a648556978e44bc1b1da27c1270951db5" kindref="member">eta</ref>;}<sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Extracts<sp/>azimuthal<sp/>angle<sp/>feature<sp/>from<sp/>a<sp/>particle.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>@param<sp/>o<sp/>Pointer<sp/>to<sp/>double<sp/>where<sp/>the<sp/>output<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>@param<sp/>p<sp/>Pointer<sp/>to<sp/>the<sp/>particle_template<sp/>containing<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>Calculates<sp/>and<sp/>stores<sp/>the<sp/>azimuthal<sp/>angle<sp/>(phi)<sp/>of<sp/>the<sp/>particle.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespacetest__particles_1abb55ac0e421aeee040b7545a6d6705a3" kindref="member">phi</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){*o<sp/>=<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="namespacetest__particles_1abb55ac0e421aeee040b7545a6d6705a3" kindref="member">phi</ref>;}<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="87"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Extracts<sp/>energy<sp/>feature<sp/>from<sp/>a<sp/>particle.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>@param<sp/>o<sp/>Pointer<sp/>to<sp/>double<sp/>where<sp/>the<sp/>output<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>@param<sp/>p<sp/>Pointer<sp/>to<sp/>the<sp/>particle_template<sp/>containing<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>Retrieves<sp/>and<sp/>stores<sp/>the<sp/>energy<sp/>of<sp/>the<sp/>particle.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>energy(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){*o<sp/>=<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="namespacetest__particles_1aad178dcf6e7313adddddce0674c990d0" kindref="member">e</ref>;}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="96"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Determines<sp/>if<sp/>a<sp/>particle<sp/>is<sp/>a<sp/>lepton.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>@param<sp/>o<sp/>Pointer<sp/>to<sp/>int<sp/>where<sp/>the<sp/>output<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>@param<sp/>p<sp/>Pointer<sp/>to<sp/>the<sp/>particle_template<sp/>containing<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>Sets<sp/>the<sp/>output<sp/>to<sp/>1<sp/>if<sp/>the<sp/>particle<sp/>is<sp/>an<sp/>electron<sp/>or<sp/>muon,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>is_lepton(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){*o<sp/>=<sp/>(<ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="enums_8h_1a666fa98df084d96fc481369704153b28acc9357767a613ec2e912943553e95778" kindref="member">is_lep</ref><sp/>&amp;&amp;<sp/>!<ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="enums_8h_1a666fa98df084d96fc481369704153b28ab09e705fe6108a37560c8173e04c822d" kindref="member">is_nu</ref>);}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="105"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Determines<sp/>if<sp/>a<sp/>particle<sp/>is<sp/>a<sp/>b-quark.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>@param<sp/>o<sp/>Pointer<sp/>to<sp/>int<sp/>where<sp/>the<sp/>output<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>@param<sp/>p<sp/>Pointer<sp/>to<sp/>the<sp/>particle_template<sp/>containing<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>Sets<sp/>the<sp/>output<sp/>to<sp/>1<sp/>if<sp/>the<sp/>particle<sp/>is<sp/>a<sp/>b-quark,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>is_bquark(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){*o<sp/>=<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="enums_8h_1a666fa98df084d96fc481369704153b28ae0da17ca8558064e75c801fadc3537a4" kindref="member">is_b</ref>;}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Determines<sp/>if<sp/>a<sp/>particle<sp/>is<sp/>a<sp/>neutrino.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>@param<sp/>o<sp/>Pointer<sp/>to<sp/>int<sp/>where<sp/>the<sp/>output<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>@param<sp/>p<sp/>Pointer<sp/>to<sp/>the<sp/>particle_template<sp/>containing<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>Sets<sp/>the<sp/>output<sp/>to<sp/>1<sp/>if<sp/>the<sp/>particle<sp/>is<sp/>a<sp/>neutrino,<sp/>0<sp/>otherwise.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>is_neutrino(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>o,<sp/><ref refid="classparticle__template" kindref="compound">particle_template</ref>*<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref>){*o<sp/>=<sp/><ref refid="namespacernn__model_1a19e60fd57ec76804d163e73cb83e2e7d" kindref="member">p</ref><sp/>-&gt;<sp/><ref refid="enums_8h_1a666fa98df084d96fc481369704153b28ab09e705fe6108a37560c8173e04c822d" kindref="member">is_nu</ref>;}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">///&lt;<sp/>End<sp/>of<sp/>include<sp/>guard<sp/>for<sp/>NODES_FEATURES_SSML_MC20_H.</highlight></codeline>
    </programlisting>
    <location file="graphs/ssml_mc20/include/ssml_mc20/node_features.h"/>
  </compounddef>
</doxygen>
