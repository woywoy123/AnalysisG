/**
 * @file event_template.h
 * @brief This header file defines the `event_template` class, which serves as a foundational template for creating, managing, and processing event data within a high-energy physics analysis framework or similar data processing pipeline.
 *
 * @details The `event_template` class provides a comprehensive and flexible structure for handling various aspects of event-related information. This includes:
 * - **Data Storage:** Managing fundamental event properties like weight, index, and associated file names.
 * - **Particle Management:** Handling collections of particles associated with the event, including registration and deregistration of particle types (generators).
 * - **Event Building:** Facilitating the construction of event objects from underlying data sources (e.g., ROOT trees).
 * - **Configuration:** Utilizing `cproperty` objects for robust management of configuration attributes such as associated trees, branches, leaves, event name, unique hash, and current tree context.
 * - **Cloning:** Supporting the creation of independent copies of event objects.
 * - **Mapping:** Building internal mappings between data source structures (trees, branches, leaves) and the event object's representation.
 *
 * The class is designed to be extensible, often serving as a base class for more specific event types within an analysis. It inherits from a `tools` base class (presumably providing utility functions) and interacts with other core structures like `particle_template`, `property`, `element`, `event`, and `meta`.
 */

#ifndef EVENT_TEMPLATE_H
#define EVENT_TEMPLATE_H

// Include necessary headers for base classes, data structures, and utilities.
#include <templates/particle_template.h> // Defines the base template for particles.
#include <structs/property.h>          // Defines the cproperty class for managed attributes.
#include <structs/element.h>           // Defines the element_t structure, likely representing data elements.
#include <structs/event.h>             // Defines the event_t structure, likely holding raw event data.
#include <tools/tools.h>               // Defines the 'tools' base class.
#include <meta/meta.h>                 // Defines the 'meta' class, likely for metadata handling.

/**
 * @class event_template
 * @brief A template class designed for the creation and comprehensive management of event data.
 *
 * @details This class serves as a blueprint for representing and manipulating individual events in a data analysis context. It encapsulates event properties, associated particles, and the logic required to build and process event information from various data sources.
 * It leverages the `cproperty` mechanism for managing configurable attributes like the names of relevant trees, branches, and leaves from the input data, as well as intrinsic event properties like name, hash, weight, and index.
 * The class inherits from the `tools` class, likely gaining access to common utility functions or logging capabilities.
 */
class event_template: public tools
{
    public:
        /**
         * @brief Default constructor for the `event_template` class.
         * @details Initializes the `event_template` object. This typically involves setting up the `cproperty` members by associating them with their respective internal storage and potentially default values, as well as linking them to their static setter and getter methods where applicable. It ensures the object is in a valid initial state.
         */
        event_template();

        /**
         * @brief Virtual destructor for the `event_template` class.
         * @details Ensures proper cleanup when an `event_template` object (or a derived class object) is destroyed. This includes invoking `flush_particles()` to release resources held by associated particle objects and potentially deregistering any particle generators that were dynamically created or managed by this event instance. The virtual nature allows derived classes to implement their specific cleanup logic.
         */
        virtual ~event_template();

        /**
         * @brief Configurable property representing the list of TTree names relevant to this event template.
         * @details This `cproperty` manages a `std::vector<std::string>` containing the names of the TTrees (from input files, typically ROOT files) that this event template might interact with or read data from. It uses `set_trees` as its setter function.
         */
        cproperty<std::vector<std::string>, event_template> trees;

        /**
         * @brief Static setter function for the `trees` cproperty.
         * @details This function is called internally by the `trees` cproperty when its value is set. It updates the internal list of tree names (`m_trees`) within the provided `event_template` instance based on the input vector.
         * @param inpt A pointer to a `std::vector<std::string>` containing the new list of tree names. The `event_template` might take ownership or copy the contents.
         * @param ev A pointer to the `event_template` instance whose tree list is being modified.
         */
        void static set_trees(std::vector<std::string>*, event_template*);

        /**
         * @brief Configurable property representing the list of TBranch names relevant to this event template.
         * @details This `cproperty` manages a `std::vector<std::string>` containing the names of the TBranches (within the specified TTrees) that this event template needs to access. It uses `set_branches` as its setter function.
         */
        cproperty<std::vector<std::string>, event_template> branches;

        /**
         * @brief Static setter function for the `branches` cproperty.
         * @details This function is called internally by the `branches` cproperty when its value is set. It updates the internal list of branch names (`m_branches`) within the provided `event_template` instance based on the input vector.
         * @param inpt A pointer to a `std::vector<std::string>` containing the new list of branch names.
         * @param ev A pointer to the `event_template` instance whose branch list is being modified.
         */
        void static set_branches(std::vector<std::string>*, event_template*);

        /**
         * @brief Configurable property representing the list of TLeaf names relevant to this event template.
         * @details This `cproperty` manages a `std::vector<std::string>` containing the names of the TLeaves (within the specified TBranches) that hold the actual data values this event template will use. It uses `get_leaves` as its getter function. Note that direct setting might be handled differently, potentially via `add_leaf`.
         */
        cproperty<std::vector<std::string>, event_template> leaves;

        /**
         * @brief Static getter function for the `leaves` cproperty.
         * @details This function is called internally by the `leaves` cproperty when its value is requested. It populates the provided vector with the current list of leaf names stored internally (`m_leaves`).
         * @param inpt A pointer to a `std::vector<std::string>` where the retrieved leaf names will be stored. The vector is typically cleared before being populated.
         * @param ev A pointer to the `event_template` instance from which to retrieve the leaf names.
         */
        void static get_leaves(std::vector<std::string>*, event_template*);

        /**
         * @brief Adds a single leaf mapping to the event template's internal leaf map.
         * @details This method allows adding individual leaf mappings. It updates the `m_leaves` map, associating a key (often the desired internal name or alias) with the actual leaf name in the data source. If the `leaf` parameter is omitted or empty, the `key` is used as both the key and the value. This facilitates renaming or aliasing leaves during the data reading process.
         * @param key The identifier or alias to use for this leaf within the event template context.
         * @param leaf The actual name of the TLeaf in the input data source. Defaults to the `key` if not provided.
         */
        void add_leaf(std::string key, std::string leaf = "");

        /**
         * @brief Configurable property representing the logical name of the event template.
         * @details This `cproperty` manages a `std::string` that holds a user-defined name for this specific event configuration or type. It uses `set_name` as its setter function. This name can be useful for identification and debugging.
         */
        cproperty<std::string, event_template> name;

        /**
         * @brief Static setter function for the `name` cproperty.
         * @details This function is called internally by the `name` cproperty when its value is set. It updates the internal name storage within the provided `event_template` instance.
         * @param name A pointer to a `std::string` containing the new name for the event template.
         * @param ev A pointer to the `event_template` instance whose name is being modified.
         */
        void static set_name(std::string*, event_template*);

        /**
         * @brief Configurable property representing a unique hash identifier for the event template configuration.
         * @details This `cproperty` manages a `std::string` intended to store a hash value that uniquely identifies the configuration of this event template (e.g., based on its associated trees, branches, leaves, and potentially other settings). It uses `set_hash` as its setter and `get_hash` as its getter. The hash is often generated from a path or configuration source.
         */
        cproperty<std::string, event_template> hash;

        /**
         * @brief Static setter function for the `hash` cproperty.
         * @details This function is called internally by the `hash` cproperty when its value is set. It typically calculates a hash based on the provided input string (often a path to a configuration file or a unique identifier string) and stores it within the `event_template` instance.
         * @param path A pointer to a `std::string` (e.g., a file path or configuration identifier) used as input to generate the hash.
         * @param ev A pointer to the `event_template` instance whose hash is being set.
         */
        void static set_hash(std::string*, event_template*);

        /**
         * @brief Static getter function for the `hash` cproperty.
         * @details This function is called internally by the `hash` cproperty when its value is requested. It retrieves the stored hash value from the `event_template` instance.
         * @param val A pointer to a `std::string` where the retrieved hash value will be stored.
         * @param ev A pointer to the `event_template` instance from which to retrieve the hash.
         */
        void static get_hash(std::string*, event_template*);

        /**
         * @brief Configurable property representing the name of the primary or current TTree being processed.
         * @details This `cproperty` manages a `std::string` holding the name of the TTree that is currently considered active or the primary source for the event data. It uses `set_tree` as its setter and `get_tree` as its getter. This is useful when an event might be composed of data from multiple trees, specifying the main one.
         */
        cproperty<std::string, event_template> tree;

        /**
         * @brief Static setter function for the `tree` cproperty.
         * @details This function is called internally by the `tree` cproperty when its value is set. It updates the currently active tree name within the `event_template` instance.
         * @param name A pointer to a `std::string` containing the name of the tree to be set as active.
         * @param ev A pointer to the `event_template` instance whose active tree name is being modified.
         */
        void static set_tree(std::string*, event_template*);

        /**
         * @brief Static getter function for the `tree` cproperty.
         * @details This function is called internally by the `tree` cproperty when its value is requested. It retrieves the name of the currently active tree from the `event_template` instance.
         * @param name A pointer to a `std::string` where the retrieved tree name will be stored.
         * @param ev A pointer to the `event_template` instance from which to retrieve the active tree name.
         */
        void static get_tree(std::string*, event_template*);

        /**
         * @brief Configurable property representing the weight associated with the event.
         * @details This `cproperty` manages a `double` value representing the event weight, often used in statistical analysis (e.g., for Monte Carlo simulations or data corrections). It uses `set_weight` as its setter function.
         */
        cproperty<double, event_template> weight;

        /**
         * @brief Static setter function for the `weight` cproperty.
         * @details This function is called internally by the `weight` cproperty when its value is set. It updates the event weight within the `event_template` instance.
         * @param inpt A pointer to a `double` containing the new event weight value.
         * @param ev A pointer to the `event_template` instance whose weight is being modified.
         */
        void static set_weight(double*, event_template*);

        /**
         * @brief Configurable property representing the index or entry number of the event in the original data source.
         * @details This `cproperty` manages a `long` integer representing the sequential index (often the entry number in a TTree) of the event within its original file or dataset. It uses `set_index` as its setter function.
         */
        cproperty<long, event_template> index;

        /**
         * @brief Static setter function for the `index` cproperty.
         * @details This function is called internally by the `index` cproperty when its value is set. It updates the event index within the `event_template` instance.
         * @param inpt A pointer to a `long` containing the new event index value.
         * @param ev A pointer to the `event_template` instance whose index is being modified.
         */
        void static set_index(long*, event_template*);

        /**
         * @brief Internal map storing the configured tree names and potentially associated identifiers or aliases.
         * @details This map holds the definitive list of tree names relevant to this event template, possibly mapping user-friendly keys to actual TTree names. It is populated via the `set_trees` method (called by the `trees` cproperty).
         */
        std::map<std::string, std::string> m_trees;

        /**
         * @brief Internal map storing the configured branch names and potentially associated identifiers or aliases.
         * @details This map holds the definitive list of branch names relevant to this event template, possibly mapping user-friendly keys to actual TBranch names. It is populated via the `set_branches` method (called by the `branches` cproperty).
         */
        std::map<std::string, std::string> m_branches;

        /**
         * @brief Internal map storing the configured leaf names and their associated keys/aliases.
         * @details This map holds the definitive list of leaf names and their mappings relevant to this event template. The key is typically the alias used within the analysis code, and the value is the actual TLeaf name in the data source. It is populated via the `add_leaf` method and potentially influenced by the `leaves` cproperty.
         */
        std::map<std::string, std::string> m_leaves;

        /**
         * @brief Creates a deep copy (clone) of the current `event_template` object.
         * @details This virtual method allows for the creation of an independent copy of the event template instance. Derived classes should override this method to ensure that all members, including those specific to the derived class, are correctly copied. The cloned object will have its own copies of data and particle collections.
         * @return A pointer to a newly allocated `event_template` object that is a clone of the current one. The caller is responsible for managing the memory of the returned object.
         */
        virtual event_template* clone();

        /**
         * @brief Virtual method responsible for building or populating the event data based on an input data element.
         * @details This method takes a pointer to an `element_t` object (which likely represents a raw data entry, possibly from a TTree) and uses its contents to populate the fields and particle collections of the `event_template` instance. This is a core part of the event processing pipeline. Derived classes often override this to implement specific data extraction and object construction logic.
         * @param el A pointer to the `element_t` object containing the raw data for the current event entry.
         */
        virtual void build(element_t* el);

        /**
         * @brief Virtual method to perform final compilation or processing steps for the event.
         * @details This method is intended to be called after the initial `build` phase. It can be used for tasks like calculating derived quantities, applying final selections, resolving particle relationships, or performing other computations that depend on the fully populated event object. Derived classes can override this to add custom post-processing logic.
         */
        virtual void CompileEvent();

        /**
         * @brief Builds a map of named `event_template` objects from a map of raw data structures.
         * @details This utility function likely takes a map where keys are identifiers (e.g., sample names, process names) and values are pointers to `data_t` objects (representing datasets or collections of raw data). It processes this input map and constructs a corresponding map of fully configured `event_template` objects, ready for analysis.
         * @param evnt A pointer to a map (`std::map<std::string, data_t*>`) containing the input data structures, keyed by name.
         * @return A `std::map<std::string, event_template*>` where keys are the same as the input map, and values are pointers to newly created and configured `event_template` objects. The caller is responsible for managing the memory of the objects in the returned map.
         */
        std::map<std::string, event_template*> build_event(std::map<std::string, data_t*>* evnt);

        /**
         * @brief Registers a specific type of particle generator with the event template.
         * @details This template method allows associating a collection of particle objects (of type `G`, derived from `particle_template`) with the event template. It stores a pointer to the map containing these particles (`object`) and links it internally, likely using the particle type's name as a key. It also extracts the leaf names required by this particle type and adds them to the event template's overall leaf requirements (`m_leaves`). This ensures that the necessary data branches/leaves are read from the input source.
         * @tparam G The specific particle class type (e.g., `electron_template`, `muon_template`), which must inherit from `particle_template`.
         * @param object A pointer to a map (`std::map<std::string, G*>`) containing instances of the particle type `G`, keyed by a string identifier (e.g., "Electrons", "Muons"). The event template stores this pointer for later access during the `build` phase.
         */
        template <typename G>
        void register_particle(std::map<std::string, G*>* object);

        /**
         * @brief Deregisters and cleans up a previously registered particle generator.
         * @details This template method removes the association of a particle type `G` with the event template. It typically involves deleting the particle objects within the provided map and then clearing the map itself to release memory. It should also remove the internal link stored by `register_particle`. This is often called during the event template's destruction or when reconfiguring the analysis.
         * @tparam G The specific particle class type (e.g., `electron_template`, `muon_template`) to be deregistered.
         * @param object A pointer to the map (`std::map<std::string, G*>`) that was previously registered. The contents of the map will be deleted.
         */
        template <typename G>
        void deregister_particle(std::map<std::string, G*>* object);

        /**
         * @brief Overloads the equality operator (`==`) to compare two `event_template` objects.
         * @details Compares the current `event_template` object with another one (`p`). The comparison is based solely on the equality of their respective hash values (`hash` cproperty). This provides a way to check if two event templates likely represent the same configuration.
         * @param p The `event_template` object to compare against.
         * @return `true` if the `hash` values of both objects are identical, `false` otherwise.
         */
        bool operator == (event_template& p);

        /**
         * @brief Structure holding the core event data.
         * @details This member variable, of type `event_t` (defined in `structs/event.h`), likely contains the low-level or aggregated data extracted from the input source for the current event after the `build` process. It might store simple data types or pointers/references to more complex structures.
         */
        event_t data;

        /**
         * @brief Pointer to associated metadata.
         * @details Holds a pointer to a `meta` object (defined in `meta/meta.h`). This object likely contains metadata related to the dataset or sample from which the event originates (e.g., cross-section, luminosity, sample type). Initialized to `nullptr`.
         */
        meta* meta_data = nullptr;

        /**
         * @brief The name of the file from which the current event was read.
         * @details Stores the filename (potentially including the path) of the input data file that contains the current event record. Useful for tracking data provenance and debugging. Initialized to an empty string.
         */
        std::string filename = "";

        /**
         * @brief Cleans up resources associated with particles managed by this event.
         * @details This method iterates through all registered particle generators (stored in `particle_generators`) and likely calls a cleanup function (e.g., `clear()` or similar) on each associated particle collection. This is crucial for resetting the event state between processing different entries or for releasing memory before destruction. It is called by the destructor and potentially at the beginning of the `build` method.
         */
        void flush_particles();

    private:
        /**
         * @brief Builds the internal mapping between tree/branch/leaf names and data elements.
         * @details This private helper method is likely called during the initialization or configuration phase (e.g., within `build_event`). It examines the structure of the input data sources (represented by the `evnt` map) and establishes the `tree_variable_link` map. This link connects the specified tree names to maps that associate variable/leaf names with their corresponding `element_t` representations, facilitating efficient data access during the `build` phase.
         * @param evnt A pointer to a map (`std::map<std::string, data_t*>`) containing the input data structures.
         */
        void build_mapping(std::map<std::string, data_t*>* evnt);

        /**
         * @brief Clears internal string representations related to leaves.
         * @details This private helper method is likely used to reset or clear any temporary string buffers or cached representations related to leaf names or values, possibly as part of the `flush_particles` or event reset logic. The exact purpose depends on the internal implementation details.
         */
        void flush_leaf_string();

        /**
         * @brief Map to track the processing state (e.g., "next entry needed") for each associated tree.
         * @details This map likely stores a boolean flag for each TTree name associated with the event template. The flag might indicate whether the next entry needs to be read from that specific tree during the event building process, especially when dealing with friend trees or data spread across multiple TTrees.
         */
        std::map<std::string, bool> next_ = {};

        /**
         * @brief Map storing pointers to the actual particle generator objects (base class pointers).
         * @details This map holds the core collection of particle generators associated with this event template. Keys are typically strings identifying the particle type (e.g., "Electron", "Jet"), and values are pointers to `particle_template` base class objects. This allows the event template to manage and interact with different particle types polymorphically. Populated via `register_particle`.
         */
        std::map<std::string, particle_template*> particle_generators;

        /**
         * @brief Nested map linking tree names to variable names and their corresponding data element structures.
         * @details This is a crucial internal mapping structure built by `build_mapping`. It allows the `build` method to quickly find the `element_t` structure corresponding to a specific variable (leaf/branch) name within a given tree context.
         * `tree_variable_link[tree_name][variable_name]` would yield the `element_t` for that variable in that tree.
         */
        std::map<std::string, std::map<std::string, element_t>> tree_variable_link = {};

        /**
         * @brief Map linking particle type names to the maps containing the actual particle instances.
         * @details This map stores pointers to the original maps provided during `register_particle`. The key is the particle type name (e.g., "Electron"), and the value is a pointer to the `std::map<std::string, particle_template*>*` (or rather, `std::map<std::string, G*>*` cast appropriately) that holds the instances of that particle type. This allows the event template to access the specific particle collections when needed, for example, during `flush_particles`.
         */
        std::map<std::string, std::map<std::string, particle_template*>*> particle_link = {};
};


#endif // EVENT_TEMPLATE_H
