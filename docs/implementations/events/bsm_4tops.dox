/**
 * @file event.h
 * @brief Defines the bsm_4tops event class for handling BSM 4-Top analysis events.
 *
 * This header declares the structure and interface for the bsm_4tops event,
 * which inherits from event_template and provides specific containers and
 * methods for accessing particles and event properties relevant to the
 * BSM 4-Tops analysis based on AnalysisTop n-tuples.
 */
#ifndef EVENTS_BSM4TOPS_H
#define EVENTS_BSM4TOPS_H

// Include necessary headers for particle definitions and the base event template.
#include <bsm_4tops/particles.h>
#include <templates/event_template.h>

/**
 * @class bsm_4tops
 * @brief Represents a BSM 4-Tops event, derived from the generic event_template.
 *
 * This class encapsulates all information related to a single BSM 4-Tops event,
 * including generator-level particles (tops, children), truth-level objects (jets),
 * and detector-level reconstructed objects (jets, electrons, muons). It also stores
 * event-wide properties like event number, pile-up (mu), and missing transverse
 * momentum (MET). It provides methods to build the event from input data and
 * compile the relationships between particles.
 */
class bsm_4tops: public event_template
{
    public:
        /**
         * @brief Default constructor for the bsm_4tops event.
         * Initializes the event structure, registers particle types, and sets up
         * necessary configurations like leaf names for reading from n-tuples.
         */
        bsm_4tops();

        /**
         * @brief Virtual destructor for the bsm_4tops event.
         * Ensures proper cleanup of resources, especially dynamically allocated particles.
         */
        virtual ~bsm_4tops();

        /** @brief Vector storing pointers to the top quark partons in the event. */
        std::vector<particle_template*> Tops;
        /** @brief Vector storing pointers to the decay products (children) of the top quarks. */
        std::vector<particle_template*> Children;
        /** @brief Vector storing pointers to the truth jets identified in the event. */
        std::vector<particle_template*> TruthJets;

        /** @brief Vector storing pointers to the reconstructed jets in the event. */
        std::vector<particle_template*> Jets;
        /** @brief Vector storing pointers to the reconstructed electrons in the event. */
        std::vector<particle_template*> Electrons;
        /** @brief Vector storing pointers to the reconstructed muons in the event. */
        std::vector<particle_template*> Muons;
        /** @brief Combined vector storing pointers to all detector-level objects (Jets, Electrons, Muons). */
        std::vector<particle_template*> DetectorObjects;

        /** @brief The unique event number identifier. */
        unsigned long long event_number;
        /** @brief The average number of interactions per bunch crossing (pile-up). */
        float mu;
        /** @brief The magnitude of the missing transverse momentum (MET). */
        float met;
        /** @brief The azimuthal angle (phi) of the missing transverse momentum vector. */
        float phi;

        /**
         * @brief Creates a new instance (clone) of the bsm_4tops event.
         * @return A pointer to the newly created event_template object (specifically a bsm_4tops).
         * @details Implements the virtual clone method from the base class. Used for polymorphism.
         */
        event_template* clone() override;

        /**
         * @brief Populates event-level properties from an input data element.
         * @param el Pointer to the element_t object containing the event data (e.g., from a TTree entry).
         * @details Reads variables like event number, mu, MET, phi, and weight from the input.
         */
        void build(element_t* el) override;

        /**
         * @brief Compiles the event structure by establishing relationships between particles.
         * @details This method sorts particles, links parents to children (e.g., tops to their decay products),
         * matches truth/reco objects (e.g., jets to tops, leptons to top children),
         * and populates the public particle vectors (Tops, Children, Jets, etc.).
         */
        void CompileEvent() override;

    private:
        // Internal storage maps for particles, keyed by their unique hash strings.
        // These are used during the initial build phase before relationships are compiled.
        /** @brief Internal map storing top partons before compilation. */
        std::map<std::string, top*>            m_Tops;
        /** @brief Internal map storing top children before compilation. */
        std::map<std::string, top_children*>   m_Children;
        /** @brief Internal map storing truth jets before compilation. */
        std::map<std::string, truthjet*>       m_TruthJets;
        /** @brief Internal map storing reconstructed jets before compilation. */
        std::map<std::string, jet*>            m_Jets;
        /** @brief Internal map storing electrons before compilation. */
        std::map<std::string, electron*>       m_Electrons;
        /** @brief Internal map storing muons before compilation. */
        std::map<std::string, muon*>           m_Muons;
        /** @brief Internal map storing partons associated with reconstructed jets. */
        std::map<std::string, jetparton*>      m_JetParton;
        /** @brief Internal map storing partons associated with truth jets. */
        std::map<std::string, truthjetparton*> m_TruthJetParton;

        /**
         * @brief Utility template function to sort particles stored in a map by their index.
         * @tparam G The particle type (e.g., top, jet).
         * @param ipt Pointer to the input map (string hash -> particle pointer).
         * @return A map containing the same particles, but sorted by their integer index.
         * @details Useful for processing particles in a defined order during event compilation.
         */
        template <typename G>
        std::map<int, G*> sort_by_index(std::map<std::string, G*>* ipt);

        /**
         * @brief Utility template function to transfer particles from a map to a vector.
         * @tparam m The key type of the input map (usually int or std::string).
         * @tparam G The particle type (e.g., top, jet).
         * @param ipt Pointer to the input map containing particles.
         * @param vec Pointer to the output vector where particle_template pointers will be stored.
         * @details Populates the public vectors (like Tops, Jets) after compilation.
         */
        template <typename m, typename G>
        void vectorize(std::map<m, G*>* ipt, std::vector<particle_template*>* vec);
};


#endif // EVENTS_BSM4TOPS_H

/**
 * @file particles.h
 * @brief Defines particle classes specific to the bsm_4tops event implementation.
 *
 * This header declares various particle types used within the bsm_4tops event,
 * such as top quarks, their decay children, truth jets, reconstructed jets,
 * electrons, muons, and associated partons. Each class inherits from
 * particle_template and adds specific properties and methods relevant to
 * the BSM 4-Tops analysis.
 */
#ifndef EVENTS_BSM4TOPS_PARTICLES_H
#define EVENTS_BSM4TOPS_PARTICLES_H

// Include the base particle template definition.
#include <templates/particle_template.h>

// Forward declarations for particle types used within other particle classes.
class truthjetparton;
class jetparton;
class truthjet;
class jet;

/**
 * @brief Template utility function to assign kinematic and basic properties to particles from input data.
 * @tparam g The specific particle type (e.g., top, jet) inheriting from particle_template.
 * @param inpt Pointer to a vector where newly created particle objects of type 'g' will be stored.
 * @param el Pointer to the element_t object containing arrays of particle properties (pt, eta, phi, e, index, pdgid).
 * @details Reads arrays of kinematic variables and identifiers from the input element and creates
 *          particle objects, populating their basic properties.
 */
template <typename g>
void assign_vector(std::vector<g*>* inpt, element_t* el);


/**
 * @class top
 * @brief Represents a generator-level top quark parton.
 *
 * Stores information about top quarks from the Monte Carlo generation,
 * including kinematics, origin (from resonance), status code, and links
 * to matched truth and reconstructed jets.
 */
class top: public particle_template
{
    public:
        /** @brief Inherit constructors from the base particle_template class. */
        using particle_template::particle_template;

        /**
         * @brief Default constructor for the top particle.
         * Initializes type name and registers leaf names for reading data.
         */
        top();
        /** @brief Virtual destructor for the top particle. */
        virtual ~top();

        /** @brief Flag indicating if the top quark originates from a resonance decay (e.g., a heavy scalar). */
        bool from_res;
        /** @brief Status code from the generator, indicating the particle's stage (e.g., final state before decay). */
        int status;

        /** @brief Vector of pointers to truth jets matched to this top quark. */
        std::vector<truthjet*> TruthJets;
        /** @brief Vector of pointers to reconstructed jets matched to this top quark. */
        std::vector<jet*> Jets;

        /**
         * @brief Creates a new instance (clone) of the top particle.
         * @return A pointer to the newly created particle_template object (specifically a top).
         */
        particle_template* clone() override;
        /**
         * @brief Builds top particle instances from input data.
         * @param prt Pointer to the map where created particles are stored (keyed by hash).
         * @param el Pointer to the element_t object containing top quark data arrays.
         * @details Uses assign_vector and reads additional top-specific properties.
         */
        void build(std::map<std::string, particle_template*>* prt, element_t* el) override;
};

/**
 * @class top_children
 * @brief Represents a particle originating directly from a top quark decay (excluding intermediate W bosons).
 *
 * Stores information about the direct decay products of top quarks, such as
 * bottom quarks, leptons, and neutrinos. Includes kinematics and a link back
 * to the parent top quark index.
 */
class top_children: public particle_template
{
    public:
        /** @brief Inherit constructors from the base particle_template class. */
        using particle_template::particle_template;

        /**
         * @brief Default constructor for the top_children particle.
         * Initializes type name, registers leaf names, and sets up the 'from_res' cproperty.
         */
        top_children();
        /** @brief Virtual destructor for the top_children particle. */
        virtual ~top_children();

        /** @brief Index of the parent top quark from which this particle originates. */
        int top_index;

        /**
         * @brief Property indicating if the parent top quark originated from a resonance.
         * @details This is a calculated property (cproperty) that checks the 'from_res' flag
         *          of the linked parent top particle.
         */
        cproperty<bool, top_children> from_res;

        /**
         * @brief Creates a new instance (clone) of the top_children particle.
         * @return A pointer to the newly created particle_template object (specifically a top_children).
         */
        particle_template* clone() override;
        /**
         * @brief Builds top_children particle instances from input data.
         * @param prt Pointer to the map where created particles are stored (keyed by hash).
         * @param el Pointer to the element_t object containing top children data arrays.
         * @details Reads nested vectors of properties for children associated with each top.
         */
        void build(std::map<std::string, particle_template*>* prt, element_t* el) override;

    private:
        /**
         * @brief Static getter function for the 'from_res' cproperty.
         * @param[out] val Pointer to the boolean value to be set.
         * @param prt Pointer to the top_children instance being queried.
         * @details Navigates to the parent top and retrieves its 'from_res' status.
         */
        void static get_from_res(bool* val, top_children* prt);
};


/**
 * @class truthjet
 * @brief Represents a jet constructed from truth-level particles (e.g., stable particles excluding neutrinos).
 *
 * Stores information about truth jets, including kinematics, b-tagging status (derived),
 * counts of associated top quarks and W bosons, links to matched top quarks, and constituent partons.
 */
class truthjet: public particle_template
{
    public:
        /** @brief Inherit constructors from the base particle_template class. */
        using particle_template::particle_template;

        /**
         * @brief Default constructor for the truthjet particle.
         * Initializes type name, registers leaf names, and sets up the 'from_res' cproperty.
         */
        truthjet();
        /** @brief Virtual destructor for the truthjet particle. */
        virtual ~truthjet();

        /** @brief Number of distinct top quarks associated with this truth jet (from n-tuple). */
        int top_quark_count;
        /** @brief Number of distinct W bosons associated with this truth jet (from n-tuple). */
        int w_boson_count;
        /** @brief Vector of indices of the top quarks matched to this truth jet. */
        std::vector<int> top_index;
        /**
         * @brief Property indicating if any matched top quark originated from a resonance.
         * @details This is a calculated property (cproperty) that checks the 'from_res' flag
         *          of all linked top particles.
         */
        cproperty<bool, truthjet> from_res;

        /** @brief Vector of pointers to the top quark objects matched to this truth jet. */
        std::vector<top*> Tops;
        /** @brief Vector of pointers to the truth-level partons constituting this truth jet. */
        std::vector<truthjetparton*> Parton;

        /**
         * @brief Creates a new instance (clone) of the truthjet particle.
         * @return A pointer to the newly created particle_template object (specifically a truthjet).
         */
        particle_template* clone() override;
        /**
         * @brief Builds truthjet particle instances from input data.
         * @param prt Pointer to the map where created particles are stored (keyed by hash).
         * @param el Pointer to the element_t object containing truth jet data arrays.
         * @details Uses assign_vector and reads additional truthjet-specific properties.
         */
        void build(std::map<std::string, particle_template*>* prt, element_t* el) override;

    private:
        /**
         * @brief Static getter function for the 'from_res' cproperty.
         * @param[out] val Pointer to the boolean value to be set.
         * @param prt Pointer to the truthjet instance being queried.
         * @details Checks the 'from_res' status of all associated top quarks.
         */
        void static get_from_res(bool* val, truthjet* prt);

};

/**
 * @class truthjetparton
 * @brief Represents a truth-level parton associated with a truth jet.
 *
 * Stores kinematic information for a parton contributing to a truth jet,
 * along with links to the parent truth jet and the original top child(ren)
 * it originated from.
 */
class truthjetparton: public particle_template
{
    public:
        /** @brief Inherit constructors from the base particle_template class. */
        using particle_template::particle_template;

        /**
         * @brief Default constructor for the truthjetparton particle.
         * Initializes type name and registers leaf names.
         */
        truthjetparton();
        /** @brief Virtual destructor for the truthjetparton particle. */
        virtual ~truthjetparton();

        /** @brief Index of the truth jet this parton belongs to. */
        int truthjet_index;
        /** @brief Vector of indices of the top children this parton originated from. */
        std::vector<int> topchild_index;

        /**
         * @brief Creates a new instance (clone) of the truthjetparton particle.
         * @return A pointer to the newly created particle_template object (specifically a truthjetparton).
         */
        particle_template* clone() override;
        /**
         * @brief Builds truthjetparton particle instances from input data.
         * @param prt Pointer to the map where created particles are stored (keyed by hash).
         * @param el Pointer to the element_t object containing truth jet parton data arrays.
         */
        void build(std::map<std::string, particle_template*>* prt, element_t* el) override;
};


/**
 * @class jet
 * @brief Represents a reconstructed jet built from detector signals.
 *
 * Stores information about reconstructed jets, including kinematics,
 * various b-tagging scores and working points (DL1, DL1r), links to matched
 * generator top quarks, and constituent partons (if available/matched).
 */
class jet: public particle_template
{
    public:
        /** @brief Inherit constructors from the base particle_template class. */
        using particle_template::particle_template;

        /**
         * @brief Default constructor for the jet particle.
         * Initializes type name, registers leaf names for kinematics and b-tagging,
         * and sets up the 'from_res' cproperty.
         */
        jet();
        /** @brief Virtual destructor for the jet particle. */
        virtual ~jet();

        /** @brief Vector of pointers to the generator top quarks matched to this jet. */
        std::vector<top*> Tops;
        /** @brief Vector of pointers to the partons matched to this reconstructed jet. */
        std::vector<jetparton*> Parton;

        /** @brief Vector of indices of the generator top quarks matched to this jet. */
        std::vector<int> top_index;
        /**
         * @brief Property indicating if any matched generator top quark originated from a resonance.
         * @details This is a calculated property (cproperty) that checks the 'from_res' flag
         *          of all linked top particles.
         */
        cproperty<bool, jet> from_res;

        // B-tagging working points (flags)
        /** @brief Flag indicating if the jet passes the DL1r 60% efficiency working point. */
        bool btag_DL1r_60;
        /** @brief Flag indicating if the jet passes the DL1 60% efficiency working point. */
        bool btag_DL1_60;
        /** @brief Flag indicating if the jet passes the DL1r 70% efficiency working point. */
        bool btag_DL1r_70;
        /** @brief Flag indicating if the jet passes the DL1 70% efficiency working point. */
        bool btag_DL1_70;
        /** @brief Flag indicating if the jet passes the DL1r 77% efficiency working point. */
        bool btag_DL1r_77;
        /** @brief Flag indicating if the jet passes the DL1 77% efficiency working point. */
        bool btag_DL1_77;
        /** @brief Flag indicating if the jet passes the DL1r 85% efficiency working point. */
        bool btag_DL1r_85;
        /** @brief Flag indicating if the jet passes the DL1 85% efficiency working point. */
        bool btag_DL1_85;

        // Raw B-tagging discriminant scores
        /** @brief Raw score from the DL1 tagger for the b-jet hypothesis. */
        float DL1_b;
        /** @brief Raw score from the DL1 tagger for the c-jet hypothesis. */
        float DL1_c;
        /** @brief Raw score from the DL1 tagger for the light-jet hypothesis. */
        float DL1_u;
        /** @brief Raw score from the DL1r tagger for the b-jet hypothesis. */
        float DL1r_b;
        /** @brief Raw score from the DL1r tagger for the c-jet hypothesis. */
        float DL1r_c;
        /** @brief Raw score from the DL1r tagger for the light-jet hypothesis. */
        float DL1r_u;

        /**
         * @brief Creates a new instance (clone) of the jet particle.
         * @return A pointer to the newly created particle_template object (specifically a jet).
         */
        particle_template* clone() override;
        /**
         * @brief Builds jet particle instances from input data.
         * @param prt Pointer to the map where created particles are stored (keyed by hash).
         * @param el Pointer to the element_t object containing reconstructed jet data arrays.
         * @details Reads kinematics, b-tagging information, and top matching indices.
         */
        void build(std::map<std::string, particle_template*>* prt, element_t* el) override;

    private:
        /**
         * @brief Static getter function for the 'from_res' cproperty.
         * @param[out] val Pointer to the boolean value to be set.
         * @param prt Pointer to the jet instance being queried.
         * @details Checks the 'from_res' status of all associated top quarks.
         */
        void static get_from_res(bool*, jet*);


};


/**
 * @class jetparton
 * @brief Represents a parton associated with a reconstructed jet.
 *
 * Stores kinematic information for a parton matched to a reconstructed jet,
 * along with links to the parent jet and the original top child(ren)
 * it originated from.
 */
class jetparton: public particle_template
{
    public:
        /** @brief Inherit constructors from the base particle_template class. */
        using particle_template::particle_template;

        /**
         * @brief Default constructor for the jetparton particle.
         * Initializes type name and registers leaf names.
         */
        jetparton();
        /** @brief Virtual destructor for the jetparton particle. */
        virtual ~jetparton();

        /** @brief Index of the reconstructed jet this parton is associated with. */
        int jet_index;
        /** @brief Vector of indices of the top children this parton originated from. */
        std::vector<int> topchild_index;

        /**
         * @brief Creates a new instance (clone) of the jetparton particle.
         * @return A pointer to the newly created particle_template object (specifically a jetparton).
         */
        particle_template* clone() override;
        /**
         * @brief Builds jetparton particle instances from input data.
         * @param prt Pointer to the map where created particles are stored (keyed by hash).
         * @param el Pointer to the element_t object containing jet parton data arrays.
         */
        void build(std::map<std::string, particle_template*>* prt, element_t* el) override;
};


/**
 * @class electron
 * @brief Represents a reconstructed electron.
 *
 * Stores kinematic information (pt, eta, phi, e, charge) for a reconstructed electron.
 * Includes flags and indices populated during event compilation to link it back
 * to generator-level top decays if matched.
 */
class electron: public particle_template
{
    public:
        /** @brief Inherit constructors from the base particle_template class. */
        using particle_template::particle_template;

        /**
         * @brief Default constructor for the electron particle.
         * Initializes type name and registers leaf names for kinematics.
         */
        electron();
        /** @brief Virtual destructor for the electron particle. */
        virtual ~electron();
        /** @brief Flag indicating if the electron is matched to a top child originating from a resonance. Set during CompileEvent. */
        bool from_res;
        /** @brief Index of the parent top quark if the electron is matched to a top decay. Set during CompileEvent. */
        int top_index;

        /**
         * @brief Creates a new instance (clone) of the electron particle.
         * @return A pointer to the newly created particle_template object (specifically an electron).
         */
        particle_template* clone() override;
        /**
         * @brief Builds electron particle instances from input data.
         * @param prt Pointer to the map where created particles are stored (keyed by hash).
         * @param el Pointer to the element_t object containing electron data arrays.
         * @details Reads kinematics and charge, sets default index/pdgid.
         */
        void build(std::map<std::string, particle_template*>* prt, element_t* el) override;
};


/**
 * @class muon
 * @brief Represents a reconstructed muon.
 *
 * Stores kinematic information (pt, eta, phi, e, charge) for a reconstructed muon.
 * Includes flags and indices populated during event compilation to link it back
 * to generator-level top decays if matched.
 */
class muon: public particle_template
{
    public:
        /** @brief Inherit constructors from the base particle_template class. */
        using particle_template::particle_template;

        /**
         * @brief Default constructor for the muon particle.
         * Initializes type name and registers leaf names for kinematics.
         */
        muon();
        /** @brief Virtual destructor for the muon particle. */
        virtual ~muon();
        /** @brief Flag indicating if the muon is matched to a top child originating from a resonance. Set during CompileEvent. */
        bool from_res;
        /** @brief Index of the parent top quark if the muon is matched to a top decay. Set during CompileEvent. */
        int top_index;

        /**
         * @brief Creates a new instance (clone) of the muon particle.
         * @return A pointer to the newly created particle_template object (specifically a muon).
         */
        particle_template* clone() override;
        /**
         * @brief Builds muon particle instances from input data.
         * @param prt Pointer to the map where created particles are stored (keyed by hash).
         * @param el Pointer to the element_t object containing muon data arrays.
         * @details Reads kinematics and charge, sets default index/pdgid.
         */
        void build(std::map<std::string, particle_template*>* prt, element_t* el) override;
};

#endif // EVENTS_BSM4TOPS_PARTICLES_H
