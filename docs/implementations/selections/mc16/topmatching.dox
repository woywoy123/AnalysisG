/**
 * @file topmatching.h
 * @brief Defines the topmatching class for analyzing top quark properties and matching strategies.
 *
 * This file contains the declaration of the topmatching class, which inherits from
 * selection_template. It is designed to perform analysis related to top quark
 * reconstruction, truth matching, and associated jet/lepton properties within the
 * bsm_4tops analysis framework. It includes methods for event selection,
 * analysis strategy execution, and merging results from parallel processing.
 * Various member variables are declared to store intermediate and final results
 * related to masses, particle counts, and kinematic properties of top quarks
 * and their decay products.
 */

#ifndef MC16_TOPMATCHING_H
#define MC16_TOPMATCHING_H

// -- Include directives --
// Include necessary headers for event data structure (bsm_4tops) and the base selection template.

/**
 * @class topmatching
 * @brief Implements selection and analysis strategies for top quark matching studies.
 *
 * Inherits from selection_template and provides specific implementations for
 * analyzing events containing top quarks, focusing on matching reconstructed objects
 * (jets, leptons) to truth-level top quark decay products. It calculates various
 * invariant masses and properties based on different combinations of particles
 * (truth children, truth jets, reconstructed jets, leptons) associated with each
 * truth top quark. The results are stored in member vectors for later aggregation
 * and analysis.
 */
class topmatching: public selection_template
{
    public:
        /**
         * @brief Default constructor for the topmatching class.
         * Initializes the selection name to "top-matching".
         */
        topmatching();

        /**
         * @brief Destructor for the topmatching class.
         * Overrides the base class destructor. Handles cleanup if necessary.
         */
        ~topmatching() override;

        /**
         * @brief Creates a clone of the current topmatching object.
         * @details This method is used for parallel processing, allowing multiple
         *          instances of the selection to run independently.
         * @return A pointer to a new topmatching object (casted to selection_template*).
         */
        selection_template* clone() override;

        /**
         * @brief Defines the event selection criteria.
         * @details Currently, this selection accepts all events. It can be modified
         *          to implement specific pre-selection cuts if needed.
         * @param ev Pointer to the event object (event_template).
         * @return Always returns true in this implementation.
         */
        bool selection(event_template* ev) override;

        /**
         * @brief Implements the core analysis strategy for top matching.
         * @details This method iterates through the truth top quarks in the event.
         *          For each top quark, it identifies its children, associated truth jets,
         *          and reconstructed jets. It calculates invariant masses and properties
         *          for various combinations:
         *          - Truth top mass.
         *          - Invariant mass of truth children (distinguishing leptonic decays).
         *          - Invariant mass of truth jets + leptonic children (distinguishing leptonic decays).
         *          - Invariant mass of reconstructed jets + truth children (distinguishing leptonic decays).
         *          - Invariant mass of reconstructed jets + associated leptons/neutrinos (distinguishing leptonic decays).
         *          It stores these calculated values in the corresponding member vectors.
         * @param ev Pointer to the event object, cast to bsm_4tops specific type.
         * @return Always returns true, indicating successful processing.
         */
        bool strategy(event_template* ev) override;

        /**
         * @brief Merges the results from another topmatching instance into this one.
         * @details This method is called after parallel processing to combine the
         *          results stored in the member vectors from a source selection object (`sl`)
         *          into the current object's vectors using the `write` method (presumably
         *          defined in the base class or a utility).
         * @param sl Pointer to the source selection_template object (casted to topmatching*).
         */
        void merge(selection_template* sl) override;

        // --- Member Variables ---
        // These vectors store the calculated quantities for each truth top quark across all processed events.

        /** @brief Vector storing the truth mass of each top quark (in GeV). */
        std::vector<float> truth_top;
        /** @brief Vector storing flags (e.g., 1) if a top quark had no identifiable children. */
        std::vector<int> no_children;

        /** @brief Vector storing the invariant mass of the direct truth children of each top quark. */
        std::vector<float> topchildren_mass;
        /** @brief Vector storing flags indicating if the top decay (based on children) was leptonic (1) or hadronic (0). */
        std::vector<int>   topchildren_leptonic;

        /** @brief Vector storing the invariant mass of truth jets associated with each top quark, potentially including leptonic children. */
        std::vector<float> toptruthjets_mass;
        /** @brief Vector storing flags indicating if the top decay (based on truth jets + leptons) was leptonic (1) or hadronic (0). */
        std::vector<int>   toptruthjets_leptonic;
        /** @brief Vector storing the number of truth jets associated with each top quark. */
        std::vector<int>   toptruthjets_njets;

        /** @brief Vector storing the invariant mass of reconstructed jets associated with each top quark + its truth children. */
        std::vector<float> topjets_children_mass;
        /** @brief Vector storing flags indicating if the top decay (based on reco jets + truth children) was leptonic (1) or hadronic (0). */
        std::vector<int>   topjets_children_leptonic;

        /** @brief Vector storing the invariant mass of reconstructed jets associated with each top quark + matched detector leptons/neutrinos. */
        std::vector<float> topjets_leptons_mass;
        /** @brief Vector storing flags indicating if the top decay (based on reco jets + leptons) was leptonic (1) or hadronic (0). */
        std::vector<int>   topjets_leptons_leptonic;
        /** @brief Vector storing the absolute PDG ID of the matched lepton for leptonic decays. */
        std::vector<int>   topjets_leptons_pdgid;
        /** @brief Vector storing the number of reconstructed jets associated with each top quark. */
        std::vector<int>   topjets_leptons_njets;


        /**
         * @brief Template helper function to convert a map of pointers to a vector of pointers.
         * @tparam T The type of the objects pointed to in the map and vector.
         * @param mp Pointer to a map where values are pointers of type T*.
         * @return A vector containing the pointers extracted from the map's values.
         */
        template <typename T>
        std::vector<T*> vectorize(std::map<std::string, T*>* mp);

        /**
         * @brief Template helper function to downcast a vector of derived class pointers to a vector of base class pointers.
         * @details Specifically used here to cast vectors of jet types (like jet*) to particle_template*.
         * @tparam T The derived class type (e.g., jet).
         * @param mp Pointer to a vector of pointers of type T*.
         * @return A vector containing the same pointers, but cast to particle_template*.
         */
        template <typename T>
        std::vector<particle_template*> downcast(std::vector<T*>* mp);
};

#endif // MC16_TOPMATCHING_H

# distutils: language=c++
# cython: language_level=3

# --- Cython PXD Definition ---
# This block defines the C++ topmatching class interface for Cython.

# --- Cython PYX Implementation ---
# This file provides the Python interface (wrapper) for the C++ topmatching class.

"""
Module providing the TopMatching class, a Python wrapper for the C++ topmatching selection.

This module uses Cython to interface with the C++ `topmatching` class, allowing it
to be used within the Python-based AnalysisG framework. It handles the creation
of the C++ object, defines how data is transferred from the C++ results vectors
to Python attributes after processing, and structures the results into dictionaries
for easier analysis and plotting.
"""

# --- Import necessary Cython and AnalysisG components ---

# --- C++ Class Declaration for Cython ---
# Declares the existence and constructor of the C++ topmatching class.

# --- Python Wrapper Class ---
cdef class TopMatching(SelectionTemplate):
    """
    Python wrapper for the C++ topmatching selection class.

    This class manages an instance of the C++ `topmatching` object and provides
    methods and attributes for interacting with it from Python. It defines how
    to initialize the C++ object, how to retrieve and process the results after
    running the analysis, and organizes the output data.

    Attributes:
        tt (topmatching*): Pointer to the underlying C++ topmatching object.
        top_mass (vector[float]): C++ vector to temporarily store truth top masses.
        topchildren_mass (vector[float]): C++ vector for truth children invariant masses.
        toptruthjets_mass (vector[float]): C++ vector for truth jets (+ leptons) invariant masses.
        topjets_children_mass (vector[float]): C++ vector for reco jets + truth children invariant masses.
        topjets_leptons_mass (vector[float]): C++ vector for reco jets + leptons invariant masses.
        topchildren_islep (vector[bool]): C++ vector for leptonic flag (truth children).
        toptruthjets_islep (vector[bool]): C++ vector for leptonic flag (truth jets).
        topjets_children_islep (vector[bool]): C++ vector for leptonic flag (reco jets + truth children).
        topjets_leptons_islep (vector[bool]): C++ vector for leptonic flag (reco jets + leptons).
        toptruthjets_njets (vector[int]): C++ vector for number of truth jets.
        topjets_leptons_pdgid (vector[int]): C++ vector for matched lepton PDG ID.
        topjets_leptons_njets (vector[int]): C++ vector for number of reco jets.

        truth_top (list): Python list storing the final truth top masses.
        no_children (list): Python list storing flags for tops with no children (currently unused in Postprocessing).
        truth_children (dict): Dictionary categorizing topchildren_mass by 'lep'/'had'/'all'.
        truth_jets (dict): Dictionary categorizing toptruthjets_mass by 'lep'/'had'/'all'.
        n_truth_jets_lep (dict): Dictionary categorizing toptruthjets_mass for leptonic tops by number of truth jets.
        n_truth_jets_had (dict): Dictionary categorizing toptruthjets_mass for hadronic tops by number of truth jets.
        jets_truth_leps (dict): Dictionary categorizing topjets_children_mass by 'lep'/'had'/'all'.
        jet_leps (dict): Dictionary categorizing topjets_leptons_mass by 'lep'/'had'/'all' and lepton PDG ID.
        n_jets_lep (dict): Dictionary categorizing topjets_leptons_mass for leptonic tops by number of reco jets.
        n_jets_had (dict): Dictionary categorizing topjets_leptons_mass for hadronic tops by number of reco jets.
    """
    # --- C++ pointer definition ---
    # --- C++ vector definitions for data transfer ---
    # --- Python attribute definitions ---

# --- Cython PYX Implementation Details ---

# --- Helper functions for merging data from C++ vectors ---

cdef void fx_mass(TopMatching xl, tuple data):
    """
    Helper function to merge float vector data (masses) from C++ results.

    Args:
        xl (TopMatching): The target TopMatching instance.
        data (tuple): A tuple containing the leaf name (str) and the C++ vector (vector[float]).
    """
    # --- Implementation to merge float data based on leaf name ---

def fx_lep(TopMatching xl, tuple data):
    """
    Helper function to merge boolean vector data (leptonic flags) from C++ results.

    Args:
        xl (TopMatching): The target TopMatching instance.
        data (tuple): A tuple containing the leaf name (str) and the C++ vector (vector[bool]).
    """
    # --- Implementation to merge bool data based on leaf name ---

def fx_njx(TopMatching xl, tuple data):
    """
    Helper function to merge integer vector data (jet counts, PDG IDs) from C++ results.

    Args:
        xl (TopMatching): The target TopMatching instance.
        data (tuple): A tuple containing the leaf name (str) and the C++ vector (vector[int]).
    """
    # --- Implementation to merge int data based on leaf name ---


cdef class TopMatching(SelectionTemplate):
    """Re-opening class definition for method implementations."""

    def __cinit__(self):
        """
        Constructor for the Cython wrapper class TopMatching.

        Initializes the mapping between C++ result leaf names and the corresponding
        Cython merging functions (`fx_mass`, `fx_lep`, `fx_njx`).
        Creates a new instance of the C++ `topmatching` class and stores its pointer.
        Initializes the Python dictionaries that will hold the categorized results.
        """
        # --- Initialize root_leaves mapping ---
        # --- Create C++ object instance ---
        # --- Initialize Python result dictionaries ---

    def __dealloc__(self):
        """Destructor for the Cython wrapper. Deletes the C++ object."""
        # --- Delete the C++ object ---

    def Postprocessing(self):
        """
        Processes the data retrieved from the C++ vectors after analysis.

        Copies data from the temporary C++ vectors (e.g., `self.top_mass`) into
        the primary Python list attributes (e.g., `self.truth_top`).
        Iterates through the result vectors and populates the various Python
        dictionaries (`truth_children`, `truth_jets`, `jet_leps`, etc.) by
        categorizing the mass values based on leptonic flags, jet counts,
        and lepton PDG IDs. This structures the data for easier plotting and analysis.
        """
        # --- Copy primary results (e.g., truth_top) ---
        # --- Initialize result dictionaries ---
        # --- Populate truth_children dictionary ---
        # --- Populate truth_jets and n_truth_jets dictionaries ---
        # --- Populate jets_truth_leps dictionary ---
        # --- Populate jet_leps and n_jets dictionaries, including lepton PDG ID categories ---

    cdef void transform_dict_keys(self):
        """Placeholder method, currently does nothing."""
        pass
