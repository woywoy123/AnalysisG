/**
 * @file event.h
 * @brief Defines the event class, a specific implementation of a selection template
 *        for event-level analysis, potentially within the bsm_4tops framework.
 *
 * This header declares the `event` class, which inherits from `selection_template`.
 * It provides the structure for defining event selection criteria and strategies,
 * allowing for customization and extension in physics analysis.
 */

#ifndef EVENT_H
#define EVENT_H

#include <bsm_4tops/event.h> // Include the specific event data structure used (bsm_4tops)
#include <templates/selection_template.h> // Include the base class definition

#include <vector> // Include vector for potential member variables

/**
 * @class event
 * @brief Implements event-level selection criteria and strategies.
 *
 * This class derives from `selection_template` and specializes it for operations
 * performed on entire events. It overrides virtual methods from the base class
 * to define specific selection logic, cloning behavior, and merging procedures
 * for distributed processing. It is designed to work with event data encapsulated
 * in `event_template` (or derived classes like `bsm_4tops`).
 */
class event: public selection_template
{
    public:
        /**
         * @brief Default constructor for the event class.
         *
         * Initializes a new instance of the event selection class.
         * Sets the default name of the selection to "event".
         */
        event();

        /**
         * @brief Virtual destructor for the event class.
         *
         * Ensures proper cleanup of resources when an event object is destroyed,
         * especially important due to virtual inheritance.
         */
        ~event() override;

        /**
         * @brief Creates a copy (clone) of the current event selection object.
         *
         * This method implements the virtual `clone` function from the base class.
         * It allocates a new `event` object on the heap and returns a pointer
         * to it, cast to the base class type `selection_template*`. This is
         * crucial for polymorphism and potentially for parallel processing frameworks.
         *
         * @return selection_template* A pointer to the newly created clone of this object.
         */
        selection_template* clone() override;

        /**
         * @brief Defines the primary selection criteria for an event.
         *
         * This method overrides the base class `selection` method. It takes a pointer
         * to a generic event (`event_template`) and applies specific cuts or conditions
         * to determine if the event passes the selection.
         * In this specific implementation, it currently accepts all events.
         *
         * @param ev A pointer to the event_template object representing the current event.
         * @return bool True if the event passes the selection criteria, false otherwise.
         */
        bool selection(event_template* ev) override;

        /**
         * @brief Defines an alternative or additional strategy/logic for event processing.
         *
         * This method overrides the base class `strategy` method. It allows for
         * implementing different processing logic or selection variations. It receives
         * a pointer to an `event_template`, which is cast to a specific event type
         * (`bsm_4tops` in this case) to access specific event data members.
         * Currently, this implementation returns true for all events.
         *
         * @param ev A pointer to the event_template object, expected to be castable to bsm_4tops*.
         * @return bool True if the event satisfies the strategy conditions, false otherwise.
         */
        bool strategy(event_template* ev) override;

        /**
         * @brief Merges data from another event selection object into this one.
         *
         * This method overrides the base class `merge` function. It's designed to
         * combine results or accumulated data (like histograms or counters) from
         * another `event` object (passed as a `selection_template*` and cast internally)
         * into the current object. This is essential for combining results from
         * parallel processing jobs. The implementation details for merging specific
         * member variables are commented out as examples.
         *
         * @param sl A pointer to another selection_template object (expected to be an event*)
         *           whose data needs to be merged into this object.
         */
        void merge(selection_template* sl) override;

        // /**
        //  * @brief Example member variable: A vector of floating-point numbers.
        //  *
        //  * This is a placeholder comment for a potential member variable.
        //  * You would replace `<var-name>` with an actual variable name (e.g., `cut_flow_values`)
        //  * and uncomment the line to declare it. This variable could be used, for example,
        //  * to store cut flow counters or other event-level aggregated data that needs
        //  * to be merged.
        //  */
        // std::vector<float> <var-name>;
};

#endif // EVENT_H

// --- Cython Definitions ---

// distutils: language=c++
// cython: language_level=3

// Import necessary C++ standard library components for Cython.
from libcpp.map cimport map
from libcpp.vector cimport vector
from libcpp.string cimport string
// Import the base Cython wrapper class.
from AnalysisG.core.selection_template cimport *

/**
 * @brief Cython extern declaration for the C++ event class.
 *
 * This block informs Cython about the existence and basic structure of the C++ `event` class,
 * allowing Cython code to interact with it. It specifies that `event` inherits from
 * `selection_template` and declares its constructor, marking it as potentially throwing
 * C++ exceptions (`except +`).
 */
cdef extern from "event.h":
    cdef cppclass event(selection_template):
        /**
         * @brief C++ constructor declaration for Cython.
         */
        event() except +

/**
 * @brief Cython wrapper class (Event) for the C++ event class.
 *
 * This Python class provides a Pythonic interface to the underlying C++ `event` object.
 * It inherits from `SelectionTemplate`, the Cython wrapper for `selection_template`.
 */
cdef class Event(SelectionTemplate):
    /**
     * @brief Pointer to the underlying C++ event object.
     *
     * This member holds the actual instance of the C++ `event` class.
     * It is declared as `tt` which might be a shorthand or typo for the intended object name.
     * It is initialized and managed alongside the `ptr` member inherited from the base class.
     */
    cdef event* tt

// --- Cython Implementation ---

// distutils: language=c++
// cython: language_level=3

// Import utility functions and the base class from AnalysisG core.
from AnalysisG.core.tools cimport as_dict, as_list
from AnalysisG.core.selection_template cimport *

/**
 * @brief Cython wrapper class implementation for the C++ event class.
 */
cdef class Event(SelectionTemplate):
    /**
     * @brief Cython constructor (__cinit__).
     *
     * This special method is called when an `Event` object is created in Python.
     * It allocates a new C++ `event` object on the heap, assigns its address to the
     * `ptr` member (inherited from `SelectionTemplate`), and also assigns the
     * correctly typed pointer to the `tt` member.
     */
    def __cinit__(self):
        pass # Implementation replaced by documentation

    /**
     * @brief Cython destructor (__dealloc__).
     *
     * This special method is called when the `Event` object is about to be destroyed
     * and its memory deallocated. It ensures that the C++ `event` object pointed to
     * by `tt` (and `ptr`) is properly deleted using `del`, preventing memory leaks.
     * Note: The base class `SelectionTemplate` likely handles the deletion of `ptr`,
     * so deleting `tt` might be redundant or potentially problematic if `ptr` and `tt`
     * always point to the same object managed by the base class. Careful review of the
     * base class's deallocation logic is needed.
     */
    def __dealloc__(self):
        pass # Implementation replaced by documentation

    /**
     * @brief Placeholder method for transforming dictionary keys.
     *
     * This method is defined but currently has no implementation (`pass`).
     * Its intended purpose might be related to converting data structures or keys
     * when interacting between Python dictionaries and C++ data members, potentially
     * during the merging process or when retrieving results.
     *
     * @param self The instance of the Event class.
     */
    cdef void transform_dict_keys(self):
        pass # Implementation replaced by documentation