/**
 * @file matching.dox
 * @brief Implementation file for the matching class, which performs various particle matching tasks related to top quarks.
 */

#include "matching.h"

/**
 * @brief Default constructor for the matching class.
 * @details Initializes the selection name to "matching".
 */
matching::matching();

/**
 * @brief Creates a deep copy (clone) of the current matching object.
 * @details Allocates a new matching object on the heap and copies the configuration,
 *          specifically the energy_constraint, from the current object.
 *          The caller is responsible for deleting the returned pointer.
 * @return selection_template* A pointer to the newly created matching object, cast to the base class type.
 * @override
 */
selection_template* matching::clone();

/**
 * @brief Destructor for the matching class.
 * @details Currently empty, performs default cleanup.
 */
matching::~matching();

/**
 * @brief Merges the results from another matching selection object into this one.
 * @details This function is typically used to combine results from parallel processing or different selection steps.
 *          It casts the input selection_template pointer to a matching pointer and then uses the
 *          `write` method (presumably inherited or available in the base class) to append the data
 *          from the source object (`slt`) to the corresponding data members (vectors) within the
 *          `data` buffer of the current object (`this`). Each `write` call corresponds to a specific
 *          data field (e.g., number of tops, mass, PDG ID) for different matching categories
 *          (partons, children, truth jets, jets+children, jets+leptons).
 * @param sl A pointer to the selection_template object whose data needs to be merged. It's expected
 *           to be dynamically castable to a matching object.
 * @override
 */
void matching::merge(selection_template* sl);

/**
 * @brief Populates a data structure with information about a collection of matched particles associated with a top quark decay.
 * @details This function takes a collection of particles (`obj`) assumed to be matched to a single top quark decay chain.
 *          It updates the provided `object_data_t` structure (`datav`) with summary statistics and details about these particles.
 *          It increments counters for the total number of tops processed, the number of leptonic (`is_lepx`) and hadronic tops.
 *          It records whether the assigned leptonic status (`is_lepx`) matches the true status (`is_lep_tru`) and increments `num_false` if they differ.
 *          It stores the assigned leptonic/hadronic status flags.
 *          Optionally, it records the number of associated jets (`num_jets`) and the merging information (`num_merged`) if provided.
 *          It extracts and stores the PDG IDs of the particles in the collection using `get_pdgid`.
 *          It calculates the invariant mass (`mx`) of the particle collection using `sum` and stores it.
 *          It calculates and stores a metric (`wrong_matched`) which is the mass if the match was incorrect (leptonic status mismatch) or -1 otherwise.
 * @param datav Pointer to the `object_data_t` structure to be filled with data.
 * @param obj Pointer to a vector of particle_template pointers representing the matched particles.
 * @param is_lepx Boolean indicating whether the reconstructed/matched top is considered leptonic based on the current matching criteria.
 * @param is_lep_tru Boolean indicating the true leptonic nature of the top quark (e.g., from generator information).
 * @param num_jets Optional pointer to an integer representing the number of jets associated with this top reconstruction. Defaults to nullptr.
 * @param num_merged Optional pointer to a vector of integers representing merging information (e.g., number of tops sharing a jet) for associated jets. Defaults to nullptr.
 */
void matching::dump(
    object_data_t* datav, std::vector<particle_template*>* obj,
    bool is_lepx, bool is_lep_tru, int* num_jets = nullptr, std::vector<int>* num_merged = nullptr
);

/**
 * @brief Performs matching between a collection of particles and a parent particle based on ancestry and energy fraction.
 * @details Iterates through a vector of input particles (`vx`). For each particle, it checks if it has the specified parent (`hash_`) in its ancestry map.
 *          If `exl_lep` is true, leptons are skipped during the primary matching but their presence is noted (`is_lepx`). If `exl_lep` is false, leptons are included in the matching process.
 *          Particles passing the parent check (and lepton exclusion if applicable) are temporarily stored along with their energy fraction (E/1000.0).
 *          After iterating through all input particles, it calculates the total energy of the temporarily stored particles.
 *          It then iterates through the temporarily stored particles again. If a particle's energy fraction relative to the total energy (`energy_frac[y] / tl`)
 *          is above the `energy_constraint` threshold, it is added to the output vector (`out`).
 *          If the particle added to `out` is not a lepton, its parent count (from the ancestry map) is added to `num_merged`, and `num_jets` is incremented.
 *          The function clears the `out` vector and `num_merged` vector before starting the matching process.
 * @param vx Pointer to the input vector of particle_template pointers to perform matching on.
 * @param out Pointer to the output vector where matched particle_template pointers will be stored.
 * @param hash_ The string hash identifying the parent particle to match against.
 * @param num_merged Pointer to an output vector where the number of parents for each matched non-lepton particle will be stored.
 * @param num_jets Pointer to an output integer that will store the count of matched non-lepton particles.
 * @param exl_lep Boolean flag indicating whether to exclude leptons from the primary matching process (true) or include them (false).
 * @return bool Returns true if any lepton was found among the particles originating from the specified parent (`hash_`), regardless of whether it passed the energy cut or `exl_lep` was true. Returns false otherwise.
 */
bool matching::match_obj(
    std::vector<particle_template*>* vx, std::vector<particle_template*>* out,
    std::string hash_, std::vector<int>* num_merged, int* num_jets, bool exl_lep
);


/**
 * @brief Extracts the Particle Data Group (PDG) IDs from a vector of particles.
 * @param prt Pointer to a vector of particle_template pointers.
 * @return std::vector<int> A vector containing the PDG IDs of the input particles in the same order.
 */
std::vector<int> matching::get_pdgid(std::vector<particle_template*>* prt);


/**
 * @brief Selects and executes the appropriate matching strategy based on the event type.
 * @details This function acts as a dispatcher. It checks the `name` attribute of the input `event_template`
 *          and calls the corresponding specialized matching function (`experimental`, `current`, or `reference`).
 * @param ev Pointer to the event_template object containing the event data.
 * @return bool Always returns true, indicating successful execution (or completion of the attempt).
 * @override
 */
bool matching::strategy(event_template* ev);

// --- Header Content ---

/**
 * @brief Header file defining the matching class and associated data structures.
 */
#ifndef MATCHING_H
#define MATCHING_H
#include <templates/selection_template.h> // Base class definition

/**
 * @struct object_data_t
 * @brief Structure to hold aggregated data for a specific type of top quark object matching (e.g., partons, children, jets).
 * @details Contains counters for total tops, leptonic/hadronic tops, and incorrectly matched tops (based on leptonic status).
 *          Also stores vectors for kinematic properties (mass), matching quality metrics (wrong_matched), jet information
 *          (number of jets, merged jet info), decay type flags (is_leptonic, is_hadronic), and constituent particle IDs (pdgid).
 */
struct object_data_t {
    int num_tops; ///< Counter for the total number of top objects processed/matched in this category.
    int num_ltop; ///< Counter for the number of leptonically decaying tops identified in this category.
    int num_htop; ///< Counter for the number of hadronically decaying tops identified in this category.
    int num_false; ///< Counter for the number of tops where the reconstructed leptonic status mismatched the true status.

    std::vector<double> mass; ///< Vector storing the invariant mass (usually in GeV) for each matched top object.
    std::vector<double> wrong_matched; ///< Vector storing a metric related to incorrect matching, often mass if wrong, -1 otherwise.

    std::vector<int> num_jets; ///< Vector storing the number of jets associated with each top object (if applicable, e.g., for jet-based matching).
    std::vector<int> is_leptonic; ///< Vector storing a flag (1 or 0) indicating if the matched top object is considered leptonic.
    std::vector<int> is_hadronic; ///< Vector storing a flag (1 or 0) indicating if the matched top object is considered hadronic.
    std::vector<std::vector<int>> merged; ///< Vector of vectors, potentially storing information about how jets are shared or merged between tops.
    std::vector<std::vector<int>> pdgid; ///< Vector of vectors, storing the PDG IDs of the constituent particles for each matched top object.
};

/**
 * @struct buffer_t
 * @brief Structure acting as a buffer to hold multiple `object_data_t` instances,
 *        one for each stage or type of top quark matching performed.
 */
struct buffer_t {
    object_data_t top_partons;       ///< Data related to matching at the parton level (truth tops).
    object_data_t top_children;      ///< Data related to matching using the direct children of the truth tops.
    object_data_t top_truthjets;     ///< Data related to matching using truth jets associated with tops.
    object_data_t top_jets_children; ///< Data related to matching using reconstructed jets combined with truth children (leptons/neutrinos).
    object_data_t top_jets_leptons;  ///< Data related to matching using reconstructed jets combined with reconstructed leptons and truth neutrinos.
};

/**
 * @class matching
 * @brief A selection class derived from selection_template, designed to perform various matching algorithms
 *        related to top quark identification and reconstruction in high-energy physics events.
 * @details This class implements different matching strategies (`reference`, `experimental`, `current`) tailored
 *          to specific event data formats or analysis goals. It uses helper functions (`match_obj`, `dump`)
 *          to perform the core matching logic and store results in internal data buffers (`buffer_t data`).
 *          The matching often involves associating truth particles (tops, children) with reconstructed objects
 *          (jets, leptons) based on ancestry information and energy criteria.
 */
class matching: public selection_template
{
    public:
    /**
     * @brief Constructor.
     */
    matching();

    /**
     * @brief Destructor.
     */
    ~matching();

    /**
     * @brief Clones the matching object.
     * @return selection_template* Pointer to the new clone.
     * @override
     */
    selection_template* clone() override;

    /**
     * @brief Implements the matching logic for the 'reference' or 'bsm_4tops' event type.
     * @details This strategy typically uses direct associations stored within the event data structure
     *          (e.g., `tpx->TruthJets`, `tpx->Jets`) to link tops, children, and jets. It calculates
     *          summary information and stores it using the `dump` function for different object combinations
     *          (partons, children, truth jets, jets+children, jets+leptons). It handles identifying
     *          leptonic decays based on the presence of neutrinos among children and matches reconstructed
     *          leptons back to the top decay chain.
     * @param ev Pointer to the event_template, expected to be dynamically castable to `bsm_4tops`.
     */
    void reference(event_template* ev);

    /**
     * @brief Implements the matching logic for the 'experimental_mc20' event type.
     * @details This strategy relies more heavily on the generic `match_obj` function. It matches
     *          particles from different collections (`PhysicsTruth`, `Jets`, `Detector`) back to the
     *          truth top (`tpx->hash`) based on ancestry and the `energy_constraint`. It identifies
     *          leptonic decays based on truth children (neutrinos/leptons) and stores results using `dump`.
     *          Different calls to `match_obj` and `dump` handle truth-jet matching, jet+children matching,
     *          and jet+lepton matching, carefully managing whether leptons are included or excluded
     *          in the `match_obj` step depending on the specific matching goal.
     * @param ev Pointer to the event_template, expected to be dynamically castable to `exp_mc20`.
     */
    void experimental(event_template* ev);

    /**
     * @brief Implements the matching logic for the 'current' or 'ssml_mc20' event type.
     * @details Similar to `reference`, this strategy often uses direct associations stored in the
     *          event data (`tpx->truthjets`, `tpx->jets`). It identifies top children, determines
     *          leptonic status, and calculates summary information for partons, children, truth jets,
     *          and jets+children using `dump`. It also performs matching involving reconstructed leptons
     *          by checking their parentage against the top's children.
     * @param ev Pointer to the event_template, expected to be dynamically castable to `ssml_mc20`.
     */
    void current(event_template* ev);

    /**
     * @brief Dumps summary information about a matched object collection into a data structure.
     * @param data Pointer to the `object_data_t` structure to fill.
     * @param obj Pointer to the vector of matched particles.
     * @param is_lepx Reconstructed leptonic status.
     * @param is_tru True leptonic status.
     * @param num_jets Optional pointer to the number of associated jets.
     * @param num_merged Optional pointer to jet merging information.
     * @see dump(object_data_t*, std::vector<particle_template*>*, bool, bool, int*, std::vector<int>*)
     */
    void dump(
        object_data_t* data, std::vector<particle_template*>* obj, bool is_lepx, bool is_tru,
        int* num_jets = nullptr, std::vector<int>* num_merged = nullptr
    );

    /**
     * @brief Matches particles from a vector (`vx`) to a parent (`hash_`) based on energy fraction.
     * @param vx Input particle vector.
     * @param out Output vector for matched particles.
     * @param hash_ Parent hash string.
     * @param num_merged Output vector for merge counts.
     * @param num_jets Output jet count.
     * @param exl_lep Flag to exclude leptons from matching.
     * @return bool True if a lepton originating from the parent was found.
     * @see match_obj(std::vector<particle_template*>*, std::vector<particle_template*>*, std::string, std::vector<int>*, int*, bool)
     */
    bool match_obj(
        std::vector<particle_template*>* vx, std::vector<particle_template*>* out,
        std::string hash_, std::vector<int>* num_merged, int* num_jets, bool exl_lep
    );

    /**
     * @brief Extracts PDG IDs from a particle vector.
     * @param prt Input particle vector.
     * @return std::vector<int> Vector of PDG IDs.
     * @see get_pdgid(std::vector<particle_template*>*)
     */
    std::vector<int> get_pdgid(std::vector<particle_template*>* prt);

    /**
     * @brief Executes the appropriate matching strategy based on the event type.
     * @param ev Pointer to the event data.
     * @return bool Always true.
     * @override
     * @see strategy(event_template*)
     */
    bool strategy(event_template* ev) override;

    /**
     * @brief Merges data from another matching object into this one.
     * @param sl Pointer to the object to merge from.
     * @override
     * @see merge(selection_template*)
     */
    void merge(selection_template* sl) override;

    /**
     * @brief Energy fraction constraint used in `match_obj`.
     * @details Particles are considered matched only if their energy constitutes a fraction
     *          greater than this value relative to the total energy of all potential matches.
     *          A value of -1 typically implies no energy constraint.
     */
    double energy_constraint;

    /**
     * @brief Buffer to store the results of the various matching steps.
     * @details Contains separate `object_data_t` structures for different matching definitions
     *          (parton, children, truth jets, etc.).
     */
    buffer_t data;
};

#endif // MATCHING_H

// --- Cython/Python Binding Definitions ---
// Note: These are definitions for bridging C++ to Python using Cython.
// They define how the C++ class and its members are exposed to Python.

/*
# distuils: language=c++
# cython: language_level=3

from libcpp.map cimport map
from libcpp.vector cimport vector
from libcpp.string cimport string
from AnalysisG.core.selection_template cimport *
from AnalysisG.core.particle_template cimport *

cdef extern from "matching.h":
    cdef cppclass matching(selection_template):
    matching() except + // Expose constructor, potentially raising Python exceptions
    double energy_constraint // Expose the energy_constraint member

// Python wrapper class definition
cdef class TopMatching(SelectionTemplate):
    cdef matching* tt // Pointer to the underlying C++ matching object

    # distutils: language=c++
    # cython: language_level=3

    from libcpp.vector cimport vector
    from AnalysisG.core.tools cimport *
    from AnalysisG.core.selection_template cimport *
    from AnalysisG.core.particle_template cimport *

    cdef class TopMatching(SelectionTemplate):
    def __cinit__(self): // Python constructor
        self.ptr = new matching() // Create C++ object, store in base class ptr
        self.tt = <matching*>self.ptr // Cast and store typed pointer

    def __dealloc__(self): // Python destructor
        del self.tt // Delete the C++ object (via base class destructor)

    @property // Define a Python property for energy_constraint
    def EnergyLimit(self): return self.tt.energy_constraint // Getter
    @EnergyLimit.setter // Setter for the property
    def EnergyLimit(self, val): self.tt.energy_constraint = val // Set C++ member
*/

// --- Implementation Files Inclusion (Illustrative) ---
// These lines indicate that the implementations for reference, experimental,
// and current methods are likely in separate files included during compilation.

// #include "matching_reference.cxx"   // Contains matching::reference implementation
// #include "matching_experimental.cxx" // Contains matching::experimental implementation
// #include "matching_current.cxx"      // Contains matching::current implementation

