{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "1f3c1c8d-38af-4574-8a4b-e5a4985cbf63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>.jp-OutputArea-output {display:flex}</style>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# This to allow horizontal scrolling\n",
    "from IPython.display import display, HTML\n",
    "display(HTML(\"<style>.jp-OutputArea-output {display:flex}</style>\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "ee71bedb-7869-4402-9532-f47ad5a23273",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import os\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import uproot\n",
    "import awkward as ak\n",
    "\n",
    "#sns.set(style=\"darkgrid\")\n",
    "\n",
    "from hepunits.units import nb, pb, invpb, fb, invfb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "5911a0e1-3143-46f1-a594-e3dbdfcae4fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.width', 1000)\n",
    "pd.set_option('display.max_columns', None)  \n",
    "pd.set_option('display.max_rows', None)\n",
    "pd.set_option('display.expand_frame_repr', True)\n",
    "pd.set_option('max_colwidth', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "6b08aa8a-d402-4909-8fab-5061021dd4ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'tttt': 'aMcAtNloPythia8EvtGen_A14NNPDF31_SM4topsNLO'}"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "samples = { 'tttt' : 'aMcAtNloPythia8EvtGen_A14NNPDF31_SM4topsNLO' }\n",
    "samples"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec40c845-8020-400f-9764-81fb93fe3cac",
   "metadata": {},
   "source": [
    "Let's look at a DAOD file from the tttt sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "9923e26e-1f42-4ff8-86c6-609b3d7485bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "sample = 'tttt'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "f674123c-10bb-460c-9de0-95bb30d70311",
   "metadata": {},
   "outputs": [],
   "source": [
    "topdirname = \"/import/wu1/tnom6927/sorted_samples/DileptonCollection\"\n",
    "pathname = topdirname+\"/\"+samples[sample]\n",
    "filename = \"DAOD_TOPQ1.27733779._000001.root\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "19247f19-58f2-485e-a1d1-bc1d2495259b",
   "metadata": {},
   "outputs": [],
   "source": [
    "file =  uproot.open(pathname+\"/\"+filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "b03f69b9-7c04-4266-971c-b21473317eba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'dsid': 'int32_t',\n",
       " 'isAFII': 'int32_t',\n",
       " 'generators': 'std::string',\n",
       " 'AMITag': 'std::string',\n",
       " 'totalEventsWeighted': 'float',\n",
       " 'totalEvents': 'uint64_t',\n",
       " 'processedEvents': 'uint64_t',\n",
       " 'processedEventsWeighted': 'float',\n",
       " 'processedEventsWeightedSquared': 'float'}"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sumweights = file[\"sumWeights\"]\n",
    "sumweights.typenames()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "3910360d-50fb-4a59-94a2-a27dce6ac594",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[412043]\n",
      "[1]\n",
      "['aMcAtNlo+Pythia8+EvtGen']\n",
      "['r10201_r10201_r10201_r10201_r10201_r10210_p4514']\n",
      "[108]\n",
      "[10000]\n",
      "[10000]\n",
      "[108]\n",
      "[9.26]\n"
     ]
    }
   ],
   "source": [
    "print(sumweights[\"dsid\"].array())\n",
    "print(sumweights[\"isAFII\"].array())\n",
    "print(sumweights[\"generators\"].array())\n",
    "print(sumweights[\"AMITag\"].array())\n",
    "print(sumweights[\"totalEventsWeighted\"].array())\n",
    "print(sumweights[\"totalEvents\"].array())\n",
    "print(sumweights[\"processedEvents\"].array())\n",
    "print(sumweights[\"processedEventsWeighted\"].array())\n",
    "print(sumweights[\"processedEventsWeightedSquared\"].array())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "12821d88-96db-408f-ad44-71ff3abee52c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "108.41329"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sumweights[\"totalEventsWeighted\"].array()[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "910e6761-7484-47bc-b7e3-40f0257ea65e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<TTree 'sumWeights' (9 branches) at 0x7f0d2a182cd0>\n"
     ]
    }
   ],
   "source": [
    "print(sumweights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "11e6336f-56c5-4031-a377-0d8776650763",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'weight_mc': 'float',\n",
       " 'weight_pileup': 'float',\n",
       " 'weight_leptonSF': 'float',\n",
       " 'weight_globalLeptonTriggerSF': 'float',\n",
       " 'weight_oldTriggerSF': 'float',\n",
       " 'weight_bTagSF_DL1_77': 'float',\n",
       " 'weight_bTagSF_DL1r_77': 'float',\n",
       " 'weight_bTagSF_DL1_70': 'float',\n",
       " 'weight_bTagSF_DL1r_70': 'float',\n",
       " 'weight_bTagSF_DL1_60': 'float',\n",
       " 'weight_bTagSF_DL1r_60': 'float',\n",
       " 'weight_bTagSF_DL1_85': 'float',\n",
       " 'weight_bTagSF_DL1r_85': 'float',\n",
       " 'weight_jvt': 'float',\n",
       " 'weight_pileup_UP': 'float',\n",
       " 'weight_pileup_DOWN': 'float',\n",
       " 'weight_leptonSF_EL_SF_Trigger_UP': 'float',\n",
       " 'weight_leptonSF_EL_SF_Trigger_DOWN': 'float',\n",
       " 'weight_leptonSF_EL_SF_Reco_UP': 'float',\n",
       " 'weight_leptonSF_EL_SF_Reco_DOWN': 'float',\n",
       " 'weight_leptonSF_EL_SF_ID_UP': 'float',\n",
       " 'weight_leptonSF_EL_SF_ID_DOWN': 'float',\n",
       " 'weight_leptonSF_EL_SF_Isol_UP': 'float',\n",
       " 'weight_leptonSF_EL_SF_Isol_DOWN': 'float',\n",
       " 'weight_leptonSF_MU_SF_Trigger_STAT_UP': 'float',\n",
       " 'weight_leptonSF_MU_SF_Trigger_STAT_DOWN': 'float',\n",
       " 'weight_leptonSF_MU_SF_Trigger_SYST_UP': 'float',\n",
       " 'weight_leptonSF_MU_SF_Trigger_SYST_DOWN': 'float',\n",
       " 'weight_leptonSF_MU_SF_ID_STAT_UP': 'float',\n",
       " 'weight_leptonSF_MU_SF_ID_STAT_DOWN': 'float',\n",
       " 'weight_leptonSF_MU_SF_ID_STAT_LOWPT_UP': 'float',\n",
       " 'weight_leptonSF_MU_SF_ID_STAT_LOWPT_DOWN': 'float',\n",
       " 'weight_leptonSF_MU_SF_ID_SYST_LOWPT_UP': 'float',\n",
       " 'weight_leptonSF_MU_SF_ID_SYST_LOWPT_DOWN': 'float',\n",
       " 'weight_leptonSF_MU_SF_ID_SYST_UP': 'float',\n",
       " 'weight_leptonSF_MU_SF_ID_SYST_DOWN': 'float',\n",
       " 'weight_leptonSF_MU_SF_Isol_STAT_UP': 'float',\n",
       " 'weight_leptonSF_MU_SF_Isol_STAT_DOWN': 'float',\n",
       " 'weight_leptonSF_MU_SF_Isol_SYST_UP': 'float',\n",
       " 'weight_leptonSF_MU_SF_Isol_SYST_DOWN': 'float',\n",
       " 'weight_leptonSF_MU_SF_TTVA_STAT_UP': 'float',\n",
       " 'weight_leptonSF_MU_SF_TTVA_STAT_DOWN': 'float',\n",
       " 'weight_leptonSF_MU_SF_TTVA_SYST_UP': 'float',\n",
       " 'weight_leptonSF_MU_SF_TTVA_SYST_DOWN': 'float',\n",
       " 'weight_globalLeptonTriggerSF_EL_Trigger_UP': 'float',\n",
       " 'weight_globalLeptonTriggerSF_EL_Trigger_DOWN': 'float',\n",
       " 'weight_globalLeptonTriggerSF_MU_Trigger_STAT_UP': 'float',\n",
       " 'weight_globalLeptonTriggerSF_MU_Trigger_STAT_DOWN': 'float',\n",
       " 'weight_globalLeptonTriggerSF_MU_Trigger_SYST_UP': 'float',\n",
       " 'weight_globalLeptonTriggerSF_MU_Trigger_SYST_DOWN': 'float',\n",
       " 'weight_oldTriggerSF_EL_Trigger_UP': 'float',\n",
       " 'weight_oldTriggerSF_EL_Trigger_DOWN': 'float',\n",
       " 'weight_oldTriggerSF_MU_Trigger_STAT_UP': 'float',\n",
       " 'weight_oldTriggerSF_MU_Trigger_STAT_DOWN': 'float',\n",
       " 'weight_oldTriggerSF_MU_Trigger_SYST_UP': 'float',\n",
       " 'weight_oldTriggerSF_MU_Trigger_SYST_DOWN': 'float',\n",
       " 'weight_indiv_SF_EL_Reco': 'float',\n",
       " 'weight_indiv_SF_EL_Reco_UP': 'float',\n",
       " 'weight_indiv_SF_EL_Reco_DOWN': 'float',\n",
       " 'weight_indiv_SF_EL_ID': 'float',\n",
       " 'weight_indiv_SF_EL_ID_UP': 'float',\n",
       " 'weight_indiv_SF_EL_ID_DOWN': 'float',\n",
       " 'weight_indiv_SF_EL_Isol': 'float',\n",
       " 'weight_indiv_SF_EL_Isol_UP': 'float',\n",
       " 'weight_indiv_SF_EL_Isol_DOWN': 'float',\n",
       " 'weight_indiv_SF_EL_ChargeID': 'float',\n",
       " 'weight_indiv_SF_EL_ChargeID_UP': 'float',\n",
       " 'weight_indiv_SF_EL_ChargeID_DOWN': 'float',\n",
       " 'weight_indiv_SF_EL_ChargeMisID': 'float',\n",
       " 'weight_indiv_SF_EL_ChargeMisID_STAT_UP': 'float',\n",
       " 'weight_indiv_SF_EL_ChargeMisID_STAT_DOWN': 'float',\n",
       " 'weight_indiv_SF_EL_ChargeMisID_SYST_UP': 'float',\n",
       " 'weight_indiv_SF_EL_ChargeMisID_SYST_DOWN': 'float',\n",
       " 'weight_indiv_SF_MU_ID': 'float',\n",
       " 'weight_indiv_SF_MU_ID_STAT_UP': 'float',\n",
       " 'weight_indiv_SF_MU_ID_STAT_DOWN': 'float',\n",
       " 'weight_indiv_SF_MU_ID_SYST_UP': 'float',\n",
       " 'weight_indiv_SF_MU_ID_SYST_DOWN': 'float',\n",
       " 'weight_indiv_SF_MU_ID_STAT_LOWPT_UP': 'float',\n",
       " 'weight_indiv_SF_MU_ID_STAT_LOWPT_DOWN': 'float',\n",
       " 'weight_indiv_SF_MU_ID_SYST_LOWPT_UP': 'float',\n",
       " 'weight_indiv_SF_MU_ID_SYST_LOWPT_DOWN': 'float',\n",
       " 'weight_indiv_SF_MU_Isol': 'float',\n",
       " 'weight_indiv_SF_MU_Isol_STAT_UP': 'float',\n",
       " 'weight_indiv_SF_MU_Isol_STAT_DOWN': 'float',\n",
       " 'weight_indiv_SF_MU_Isol_SYST_UP': 'float',\n",
       " 'weight_indiv_SF_MU_Isol_SYST_DOWN': 'float',\n",
       " 'weight_indiv_SF_MU_TTVA': 'float',\n",
       " 'weight_indiv_SF_MU_TTVA_STAT_UP': 'float',\n",
       " 'weight_indiv_SF_MU_TTVA_STAT_DOWN': 'float',\n",
       " 'weight_indiv_SF_MU_TTVA_SYST_UP': 'float',\n",
       " 'weight_indiv_SF_MU_TTVA_SYST_DOWN': 'float',\n",
       " 'weight_jvt_UP': 'float',\n",
       " 'weight_jvt_DOWN': 'float',\n",
       " 'weight_bTagSF_DL1_77_eigenvars_B_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_77_eigenvars_C_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_77_eigenvars_Light_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_77_eigenvars_B_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_77_eigenvars_C_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_77_eigenvars_Light_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_77_extrapolation_up': 'float',\n",
       " 'weight_bTagSF_DL1_77_extrapolation_down': 'float',\n",
       " 'weight_bTagSF_DL1_77_extrapolation_from_charm_up': 'float',\n",
       " 'weight_bTagSF_DL1_77_extrapolation_from_charm_down': 'float',\n",
       " 'weight_bTagSF_DL1r_77_eigenvars_B_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_77_eigenvars_C_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_77_eigenvars_Light_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_77_eigenvars_B_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_77_eigenvars_C_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_77_eigenvars_Light_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_77_extrapolation_up': 'float',\n",
       " 'weight_bTagSF_DL1r_77_extrapolation_down': 'float',\n",
       " 'weight_bTagSF_DL1r_77_extrapolation_from_charm_up': 'float',\n",
       " 'weight_bTagSF_DL1r_77_extrapolation_from_charm_down': 'float',\n",
       " 'weight_bTagSF_DL1_70_eigenvars_B_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_70_eigenvars_C_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_70_eigenvars_Light_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_70_eigenvars_B_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_70_eigenvars_C_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_70_eigenvars_Light_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_70_extrapolation_up': 'float',\n",
       " 'weight_bTagSF_DL1_70_extrapolation_down': 'float',\n",
       " 'weight_bTagSF_DL1_70_extrapolation_from_charm_up': 'float',\n",
       " 'weight_bTagSF_DL1_70_extrapolation_from_charm_down': 'float',\n",
       " 'weight_bTagSF_DL1r_70_eigenvars_B_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_70_eigenvars_C_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_70_eigenvars_Light_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_70_eigenvars_B_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_70_eigenvars_C_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_70_eigenvars_Light_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_70_extrapolation_up': 'float',\n",
       " 'weight_bTagSF_DL1r_70_extrapolation_down': 'float',\n",
       " 'weight_bTagSF_DL1r_70_extrapolation_from_charm_up': 'float',\n",
       " 'weight_bTagSF_DL1r_70_extrapolation_from_charm_down': 'float',\n",
       " 'weight_bTagSF_DL1_60_eigenvars_B_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_60_eigenvars_C_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_60_eigenvars_Light_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_60_eigenvars_B_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_60_eigenvars_C_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_60_eigenvars_Light_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_60_extrapolation_up': 'float',\n",
       " 'weight_bTagSF_DL1_60_extrapolation_down': 'float',\n",
       " 'weight_bTagSF_DL1_60_extrapolation_from_charm_up': 'float',\n",
       " 'weight_bTagSF_DL1_60_extrapolation_from_charm_down': 'float',\n",
       " 'weight_bTagSF_DL1r_60_eigenvars_B_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_60_eigenvars_C_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_60_eigenvars_Light_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_60_eigenvars_B_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_60_eigenvars_C_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_60_eigenvars_Light_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_60_extrapolation_up': 'float',\n",
       " 'weight_bTagSF_DL1r_60_extrapolation_down': 'float',\n",
       " 'weight_bTagSF_DL1r_60_extrapolation_from_charm_up': 'float',\n",
       " 'weight_bTagSF_DL1r_60_extrapolation_from_charm_down': 'float',\n",
       " 'weight_bTagSF_DL1_85_eigenvars_B_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_85_eigenvars_C_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_85_eigenvars_Light_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_85_eigenvars_B_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_85_eigenvars_C_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_85_eigenvars_Light_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1_85_extrapolation_up': 'float',\n",
       " 'weight_bTagSF_DL1_85_extrapolation_down': 'float',\n",
       " 'weight_bTagSF_DL1_85_extrapolation_from_charm_up': 'float',\n",
       " 'weight_bTagSF_DL1_85_extrapolation_from_charm_down': 'float',\n",
       " 'weight_bTagSF_DL1r_85_eigenvars_B_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_85_eigenvars_C_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_85_eigenvars_Light_up': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_85_eigenvars_B_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_85_eigenvars_C_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_85_eigenvars_Light_down': 'std::vector<float>',\n",
       " 'weight_bTagSF_DL1r_85_extrapolation_up': 'float',\n",
       " 'weight_bTagSF_DL1r_85_extrapolation_down': 'float',\n",
       " 'weight_bTagSF_DL1r_85_extrapolation_from_charm_up': 'float',\n",
       " 'weight_bTagSF_DL1r_85_extrapolation_from_charm_down': 'float',\n",
       " 'eventNumber': 'uint64_t',\n",
       " 'runNumber': 'uint32_t',\n",
       " 'randomRunNumber': 'uint32_t',\n",
       " 'mcChannelNumber': 'uint32_t',\n",
       " 'mu': 'float',\n",
       " 'mu_actual': 'float',\n",
       " 'backgroundFlags': 'uint32_t',\n",
       " 'hasBadMuon': 'uint32_t',\n",
       " 'el_pt': 'std::vector<float>',\n",
       " 'el_eta': 'std::vector<float>',\n",
       " 'el_cl_eta': 'std::vector<float>',\n",
       " 'el_phi': 'std::vector<float>',\n",
       " 'el_e': 'std::vector<float>',\n",
       " 'el_charge': 'std::vector<float>',\n",
       " 'el_topoetcone20': 'std::vector<float>',\n",
       " 'el_ptvarcone20': 'std::vector<float>',\n",
       " 'el_CF': 'std::vector<int8_t>',\n",
       " 'el_d0sig': 'std::vector<float>',\n",
       " 'el_delta_z0_sintheta': 'std::vector<float>',\n",
       " 'el_true_type': 'std::vector<int32_t>',\n",
       " 'el_true_origin': 'std::vector<int32_t>',\n",
       " 'el_true_firstEgMotherTruthType': 'std::vector<int32_t>',\n",
       " 'el_true_firstEgMotherTruthOrigin': 'std::vector<int32_t>',\n",
       " 'el_true_firstEgMotherPdgId': 'std::vector<int32_t>',\n",
       " 'el_true_IFFclass': 'std::vector<int32_t>',\n",
       " 'el_true_isPrompt': 'std::vector<int8_t>',\n",
       " 'el_true_isChargeFl': 'std::vector<int8_t>',\n",
       " 'mu_pt': 'std::vector<float>',\n",
       " 'mu_eta': 'std::vector<float>',\n",
       " 'mu_phi': 'std::vector<float>',\n",
       " 'mu_e': 'std::vector<float>',\n",
       " 'mu_charge': 'std::vector<float>',\n",
       " 'mu_topoetcone20': 'std::vector<float>',\n",
       " 'mu_ptvarcone30': 'std::vector<float>',\n",
       " 'mu_d0sig': 'std::vector<float>',\n",
       " 'mu_delta_z0_sintheta': 'std::vector<float>',\n",
       " 'mu_true_type': 'std::vector<int32_t>',\n",
       " 'mu_true_origin': 'std::vector<int32_t>',\n",
       " 'mu_true_IFFclass': 'std::vector<int32_t>',\n",
       " 'mu_true_isPrompt': 'std::vector<int8_t>',\n",
       " 'jet_pt': 'std::vector<float>',\n",
       " 'jet_eta': 'std::vector<float>',\n",
       " 'jet_phi': 'std::vector<float>',\n",
       " 'jet_e': 'std::vector<float>',\n",
       " 'jet_jvt': 'std::vector<float>',\n",
       " 'jet_truthflav': 'std::vector<int32_t>',\n",
       " 'jet_truthPartonLabel': 'std::vector<int32_t>',\n",
       " 'jet_isTrueHS': 'std::vector<int8_t>',\n",
       " 'jet_truthflavExtended': 'std::vector<int32_t>',\n",
       " 'jet_isbtagged_DL1_77': 'std::vector<int8_t>',\n",
       " 'jet_isbtagged_DL1r_77': 'std::vector<int8_t>',\n",
       " 'jet_isbtagged_DL1_70': 'std::vector<int8_t>',\n",
       " 'jet_isbtagged_DL1r_70': 'std::vector<int8_t>',\n",
       " 'jet_isbtagged_DL1_60': 'std::vector<int8_t>',\n",
       " 'jet_isbtagged_DL1r_60': 'std::vector<int8_t>',\n",
       " 'jet_isbtagged_DL1_85': 'std::vector<int8_t>',\n",
       " 'jet_isbtagged_DL1r_85': 'std::vector<int8_t>',\n",
       " 'jet_DL1': 'std::vector<float>',\n",
       " 'jet_DL1_pb': 'std::vector<float>',\n",
       " 'jet_DL1_pc': 'std::vector<float>',\n",
       " 'jet_DL1_pu': 'std::vector<float>',\n",
       " 'jet_DL1r': 'std::vector<float>',\n",
       " 'jet_DL1r_pb': 'std::vector<float>',\n",
       " 'jet_DL1r_pc': 'std::vector<float>',\n",
       " 'jet_DL1r_pu': 'std::vector<float>',\n",
       " 'rcjet_pt': 'std::vector<float>',\n",
       " 'rcjet_eta': 'std::vector<float>',\n",
       " 'rcjet_phi': 'std::vector<float>',\n",
       " 'rcjet_e': 'std::vector<float>',\n",
       " 'rcjet_d12': 'std::vector<float>',\n",
       " 'rcjet_d23': 'std::vector<float>',\n",
       " 'rcjetsub_pt': 'std::vector<std::vector<float>>',\n",
       " 'rcjetsub_eta': 'std::vector<std::vector<float>>',\n",
       " 'rcjetsub_phi': 'std::vector<std::vector<float>>',\n",
       " 'rcjetsub_e': 'std::vector<std::vector<float>>',\n",
       " 'met_met': 'float',\n",
       " 'met_phi': 'float',\n",
       " 'ee_DL1r': 'int32_t',\n",
       " 'emu_DL1r': 'int32_t',\n",
       " 'mumu_DL1r': 'int32_t',\n",
       " 'eee_DL1r': 'int32_t',\n",
       " 'eemu_DL1r': 'int32_t',\n",
       " 'emumu_DL1r': 'int32_t',\n",
       " 'mumumu_DL1r': 'int32_t',\n",
       " 'HLT_mu26_ivarmedium': 'int8_t',\n",
       " 'HLT_mu50': 'int8_t',\n",
       " 'HLT_e60_lhmedium_nod0': 'int8_t',\n",
       " 'HLT_e140_lhloose_nod0': 'int8_t',\n",
       " 'HLT_e26_lhtight_nod0_ivarloose': 'int8_t',\n",
       " 'el_trigMatch_HLT_e60_lhmedium_nod0': 'std::vector<int8_t>',\n",
       " 'el_trigMatch_HLT_e140_lhloose_nod0': 'std::vector<int8_t>',\n",
       " 'el_trigMatch_HLT_e26_lhtight_nod0_ivarloose': 'std::vector<int8_t>',\n",
       " 'mu_trigMatch_HLT_mu50': 'std::vector<int8_t>',\n",
       " 'mu_trigMatch_HLT_mu26_ivarmedium': 'std::vector<int8_t>',\n",
       " 'truthjets_index': 'std::vector<int32_t>',\n",
       " 'truthjets_pt': 'std::vector<float>',\n",
       " 'truthjets_eta': 'std::vector<float>',\n",
       " 'truthjets_phi': 'std::vector<float>',\n",
       " 'truthjets_e': 'std::vector<float>',\n",
       " 'truthjets_btagged': 'std::vector<int32_t>',\n",
       " 'truthjets_topquarkcount': 'std::vector<int32_t>',\n",
       " 'truthjets_wbosoncount': 'std::vector<int32_t>',\n",
       " 'truthjets_TopIndex': 'std::vector<std::vector<int32_t>>',\n",
       " 'jet_index': 'std::vector<int32_t>',\n",
       " 'jet_TopIndex': 'std::vector<std::vector<int32_t>>',\n",
       " 'top_index': 'std::vector<int32_t>',\n",
       " 'top_pt': 'std::vector<float>',\n",
       " 'top_e': 'std::vector<float>',\n",
       " 'top_eta': 'std::vector<float>',\n",
       " 'top_phi': 'std::vector<float>',\n",
       " 'top_charge': 'std::vector<float>',\n",
       " 'top_pdgid': 'std::vector<int32_t>',\n",
       " 'top_FromRes': 'std::vector<int32_t>',\n",
       " 'top_status': 'std::vector<int32_t>',\n",
       " 'children_index': 'std::vector<std::vector<int32_t>>',\n",
       " 'children_pt': 'std::vector<std::vector<float>>',\n",
       " 'children_e': 'std::vector<std::vector<float>>',\n",
       " 'children_eta': 'std::vector<std::vector<float>>',\n",
       " 'children_phi': 'std::vector<std::vector<float>>',\n",
       " 'children_charge': 'std::vector<std::vector<float>>',\n",
       " 'children_pdgid': 'std::vector<std::vector<int32_t>>',\n",
       " 'children_TopIndex': 'std::vector<std::vector<int32_t>>',\n",
       " 'TJparton_index': 'std::vector<int32_t>',\n",
       " 'TJparton_TruthJetIndex': 'std::vector<int32_t>',\n",
       " 'TJparton_ChildIndex': 'std::vector<std::vector<int32_t>>',\n",
       " 'TJparton_pt': 'std::vector<float>',\n",
       " 'TJparton_eta': 'std::vector<float>',\n",
       " 'TJparton_phi': 'std::vector<float>',\n",
       " 'TJparton_e': 'std::vector<float>',\n",
       " 'TJparton_charge': 'std::vector<float>',\n",
       " 'TJparton_pdgid': 'std::vector<float>',\n",
       " 'Jparton_index': 'std::vector<int32_t>',\n",
       " 'Jparton_JetIndex': 'std::vector<int32_t>',\n",
       " 'Jparton_ChildIndex': 'std::vector<std::vector<int32_t>>',\n",
       " 'Jparton_pt': 'std::vector<float>',\n",
       " 'Jparton_eta': 'std::vector<float>',\n",
       " 'Jparton_phi': 'std::vector<float>',\n",
       " 'Jparton_e': 'std::vector<float>',\n",
       " 'Jparton_charge': 'std::vector<float>',\n",
       " 'Jparton_pdgid': 'std::vector<float>'}"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nominal  = file[\"nominal\"]\n",
    "nominal.typenames()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "bd107f14-d09f-4216-85d9-a25685a63a90",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-0.0304, 0.0304, 0.0304, -0.0304, 0.0304, ..., 0.0304, 0.0304, 0.0304, 0.0304]\n"
     ]
    }
   ],
   "source": [
    "weight_mc = nominal[\"weight_mc\"].array()\n",
    "print(weight_mc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "876ce594-d0f5-48c1-8b1d-91610b59583f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "628\n"
     ]
    }
   ],
   "source": [
    "met_met = nominal[\"met_met\"].array()\n",
    "print(len(met_met))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "f51016da-6a29-4e12-892c-3e715afc891b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import boost_histogram as bh\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import mplhep as hep\n",
    "#plt.style.use(hep.style.ATLAS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "8761bcbb-f1b3-405d-b159-d275b63db60c",
   "metadata": {},
   "outputs": [],
   "source": [
    "hist1 = bh.Histogram(bh.axis.Regular(25, 0.0, 500000.), metadata=\"Missing ET\")\n",
    "hist2 = bh.Histogram(bh.axis.Regular(25, 0.0, 500000.), metadata=\"Missing ET weighted\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "7a85eee1-1caf-42ff-bbb8-672b1da8e2f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 622.0 (628.0 with flow)"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist1.fill(met_met)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "7272a77a-bbef-454d-8d00-e6e9b1eb643f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.635070506483316 (6.756815489381552 with flow)"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist2.fill(met_met, weight=weight_mc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "90ea6351-fd87-4444-b864-564f4bfef7c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[StairsArtists(stairs=<matplotlib.patches.StepPatch object at 0x7f0d2c5fb950>, errorbar=<ErrorbarContainer object of 3 artists>, legend_artist=<ErrorbarContainer object of 3 artists>)]"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "hep.histplot(hist1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "95d9dd7c-d52d-43f6-be71-9fc677ce7295",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[StairsArtists(stairs=<matplotlib.patches.StepPatch object at 0x7f0d2ba22cd0>, errorbar=None, legend_artist=None)]"
      ]
     },
     "execution_count": 149,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "hep.histplot(hist2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "b580044e-9720-4c67-ae7d-701a561877f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                      ┌──────────────────────────────────────────────────────┐\n",
      "[   -inf,       0) 0  │                                                      │\n",
      "[      0,   2e+04) 20 │█████████████▎                                        │\n",
      "[  2e+04,   4e+04) 47 │███████████████████████████████▏                      │\n",
      "[  4e+04,   6e+04) 62 │█████████████████████████████████████████▏            │\n",
      "[  6e+04,   8e+04) 76 │██████████████████████████████████████████████████▍   │\n",
      "[  8e+04,   1e+05) 77 │███████████████████████████████████████████████████   │\n",
      "[  1e+05, 1.2e+05) 80 │█████████████████████████████████████████████████████ │\n",
      "[1.2e+05, 1.4e+05) 56 │█████████████████████████████████████▏                │\n",
      "[1.4e+05, 1.6e+05) 36 │███████████████████████▉                              │\n",
      "[1.6e+05, 1.8e+05) 28 │██████████████████▌                                   │\n",
      "[1.8e+05,   2e+05) 22 │██████████████▋                                       │\n",
      "[  2e+05, 2.2e+05) 31 │████████████████████▌                                 │\n",
      "[2.2e+05, 2.4e+05) 15 │█████████▉                                            │\n",
      "[2.4e+05, 2.6e+05) 21 │█████████████▉                                        │\n",
      "[2.6e+05, 2.8e+05) 15 │█████████▉                                            │\n",
      "[2.8e+05,   3e+05) 12 │████████                                              │\n",
      "[  3e+05, 3.2e+05) 7  │████▋                                                 │\n",
      "[3.2e+05, 3.4e+05) 5  │███▍                                                  │\n",
      "[3.4e+05, 3.6e+05) 4  │██▋                                                   │\n",
      "[3.6e+05, 3.8e+05) 0  │                                                      │\n",
      "[3.8e+05,   4e+05) 0  │                                                      │\n",
      "[  4e+05, 4.2e+05) 0  │                                                      │\n",
      "[4.2e+05, 4.4e+05) 2  │█▍                                                    │\n",
      "[4.4e+05, 4.6e+05) 3  │██                                                    │\n",
      "[4.6e+05, 4.8e+05) 1  │▋                                                     │\n",
      "[4.8e+05,   5e+05) 2  │█▍                                                    │\n",
      "[  5e+05,     inf) 6  │████                                                  │\n",
      "                      └──────────────────────────────────────────────────────┘\n"
     ]
    }
   ],
   "source": [
    "print(hist1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "93e5012b-1689-4b4c-b866-35a8ef44174f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            ┌────────────────────────────────────────────────┐\n",
      "[   -inf,       0) 0        │                                                │\n",
      "[      0,   2e+04) 0.1826   │  █████████▊                                    │\n",
      "[  2e+04,   4e+04) 0.5783   │  ██████████████████████████████▊               │\n",
      "[  4e+04,   6e+04) 0.6696   │  ███████████████████████████████████▋          │\n",
      "[  6e+04,   8e+04) 0.8522   │  █████████████████████████████████████████████▍│\n",
      "[  8e+04,   1e+05) 0.6392   │  ██████████████████████████████████            │\n",
      "[  1e+05, 1.2e+05) 0.8522   │  █████████████████████████████████████████████▍│\n",
      "[1.2e+05, 1.4e+05) 0.2435   │  █████████████                                 │\n",
      "[1.4e+05, 1.6e+05) 0.5479   │  █████████████████████████████▏                │\n",
      "[1.6e+05, 1.8e+05) 0.487    │  █████████████████████████▉                    │\n",
      "[1.8e+05,   2e+05) 0.1217   │  ██████▌                                       │\n",
      "[  2e+05, 2.2e+05) 0.3348   │  █████████████████▉                            │\n",
      "[2.2e+05, 2.4e+05) 0.2131   │  ███████████▍                                  │\n",
      "[2.4e+05, 2.6e+05) 0.3348   │  █████████████████▉                            │\n",
      "[2.6e+05, 2.8e+05) 0.2131   │  ███████████▍                                  │\n",
      "[2.8e+05,   3e+05) 0.1826   │  █████████▊                                    │\n",
      "[  3e+05, 3.2e+05) 0.03044  │  █▋                                            │\n",
      "[3.2e+05, 3.4e+05) 0.03044  │  █▋                                            │\n",
      "[3.4e+05, 3.6e+05) 0.06087  │  ███▎                                          │\n",
      "[3.6e+05, 3.8e+05) 0        │                                                │\n",
      "[3.8e+05,   4e+05) 0        │                                                │\n",
      "[  4e+05, 4.2e+05) 0        │                                                │\n",
      "[4.2e+05, 4.4e+05) 0.06087  │  ███▎                                          │\n",
      "[4.4e+05, 4.6e+05) 0.03044  │  █▋                                            │\n",
      "[4.6e+05, 4.8e+05) -0.03044 │██                                              │\n",
      "[4.8e+05,   5e+05) 0        │                                                │\n",
      "[  5e+05,     inf) 0.1217   │  ██████▌                                       │\n",
      "                            └────────────────────────────────────────────────┘\n"
     ]
    }
   ],
   "source": [
    "print(hist2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "f1ef9520-2d2e-41bf-87be-a47546ad92c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[StairsArtists(stairs=<matplotlib.patches.StepPatch object at 0x7f0d35061250>, errorbar=None, legend_artist=None)]"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "hep.histplot(hist1, density=True)\n",
    "hep.histplot(hist2, density=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "a09ac4d3-c674-47ee-90ca-9748ff116f52",
   "metadata": {},
   "outputs": [],
   "source": [
    "filelist = os.listdir(path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "b873890d-f662-4175-b411-5118f12db546",
   "metadata": {},
   "outputs": [],
   "source": [
    "tot_ews_arr = []\n",
    "for file in filelist:\n",
    "    f = uproot.open(pathname+\"/\"+file)\n",
    "    sws = f[\"sumWeights\"]\n",
    "    tot_ews = sws[\"totalEventsWeighted\"].array()\n",
    "    tot_ews_arr.append(tot_ews)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "1329feec-d4f4-4e62-8e02-60ba13c09986",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>[[323],\n",
       " [108],\n",
       " [309],\n",
       " [106],\n",
       " [329],\n",
       " [105],\n",
       " [316],\n",
       " [106],\n",
       " [320],\n",
       " [109],\n",
       " ...,\n",
       " [319],\n",
       " [317],\n",
       " [323],\n",
       " [317],\n",
       " [320],\n",
       " [316],\n",
       " [316],\n",
       " [320],\n",
       " [317]]\n",
       "-------------------------\n",
       "type: 548 * var * float64</pre>"
      ],
      "text/plain": [
       "<Array [[323], [108], [309], ..., [320], [317]] type='548 * var * float64'>"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ak.Array(tot_ews_arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "00e66754-3302-4310-816f-50eb4cd2c628",
   "metadata": {},
   "outputs": [],
   "source": [
    "tot_ews_arr_flat = ak.flatten(ak.Array(tot_ews_arr))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "78219509-2ff4-408b-a72b-9e29f9385c13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>[323,\n",
       " 108,\n",
       " 309,\n",
       " 106,\n",
       " 329,\n",
       " 105,\n",
       " 316,\n",
       " 106,\n",
       " 320,\n",
       " 109,\n",
       " ...,\n",
       " 319,\n",
       " 317,\n",
       " 323,\n",
       " 317,\n",
       " 320,\n",
       " 316,\n",
       " 316,\n",
       " 320,\n",
       " 317]\n",
       "-------------------\n",
       "type: 548 * float64</pre>"
      ],
      "text/plain": [
       "<Array [323, 108, 309, 106, 329, ..., 316, 316, 320, 317] type='548 * float64'>"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tot_ews_arr_flat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "3a3eb997-af68-4b65-a9aa-a5846151aa1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "sew = ak.sum(tot_ews_arr_flat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "6624c6fa-8252-4b48-bef5-d30d225d868a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "134287.47077178955"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sew"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "e9c9862d-93fb-4718-ad30-af34853ac7a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "hists = []\n",
    "histsw = []\n",
    "tot_ews_arr = []\n",
    "for file in filelist:\n",
    "    f = uproot.open(pathname+\"/\"+file)\n",
    "    sws = f[\"sumWeights\"]\n",
    "    tot_ews = sws[\"totalEventsWeighted\"].array()\n",
    "    tot_ews_arr.append(tot_ews)\n",
    "    nom = f[\"nominal\"]\n",
    "    weight_mc = nom[\"weight_mc\"].array()\n",
    "    met = nom[\"met_met\"].array()\n",
    "    h  = bh.Histogram(bh.axis.Regular(25, 0.0, 500000.), metadata=\"Missing ET\")\n",
    "    hw = bh.Histogram(bh.axis.Regular(25, 0.0, 500000.), metadata=\"Missing ET weighted\")\n",
    "    h.fill(met)\n",
    "    hw.fill(met, weight=weight_mc)\n",
    "    hists.append(h)\n",
    "    histsw.append(hw)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "74b24492-3145-47b6-af0c-740319765da7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1992.0 (2005.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 622.0 (628.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2003.0 (2017.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 654.0 (658.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1932.0 (1944.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 694.0 (696.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1963.0 (1969.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 672.0 (676.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2037.0 (2041.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 593.0 (595.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1913.0 (1920.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 642.0 (646.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1932.0 (1942.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 672.0 (676.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1904.0 (1911.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 627.0 (633.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2018.0 (2025.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 702.0 (705.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1979.0 (1987.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 655.0 (656.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1993.0 (1996.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1896.0 (1908.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1953.0 (1958.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1301.0 (1306.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2022.0 (2035.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1345.0 (1354.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1934.0 (1941.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1337.0 (1340.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1967.0 (1969.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1290.0 (1297.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2043.0 (2052.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1931.0 (1940.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1991.0 (1998.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1976.0 (1983.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2017.0 (2028.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2004.0 (2010.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1958.0 (1970.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1983.0 (1993.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2012.0 (2025.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2009.0 (2019.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2034.0 (2047.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1917.0 (1925.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2028.0 (2035.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1896.0 (1905.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1992.0 (2000.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1931.0 (1942.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1940.0 (1944.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1957.0 (1964.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1976.0 (1985.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1962.0 (1970.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1916.0 (1929.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1934.0 (1942.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1943.0 (1949.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2011.0 (2023.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2060.0 (2074.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1940.0 (1949.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1953.0 (1960.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1975.0 (1987.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1975.0 (1986.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2067.0 (2079.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1960.0 (1966.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1964.0 (1976.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1985.0 (1995.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2063.0 (2073.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1959.0 (1971.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1923.0 (1932.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2011.0 (2019.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1944.0 (1953.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1989.0 (1998.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1979.0 (1994.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2022.0 (2031.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1981.0 (1997.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1995.0 (2007.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1996.0 (2008.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1930.0 (1937.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1944.0 (1959.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1969.0 (1978.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2015.0 (2021.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1946.0 (1951.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1927.0 (1933.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2023.0 (2037.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1960.0 (1971.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2042.0 (2050.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1902.0 (1915.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1941.0 (1948.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1889.0 (1898.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 991.0 (995.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1935.0 (1944.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1991.0 (1995.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1978.0 (1983.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1930.0 (1940.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1888.0 (1897.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1979.0 (1985.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2002.0 (2003.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1944.0 (1952.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1938.0 (1950.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1935.0 (1941.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1960.0 (1967.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1966.0 (1975.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1985.0 (1993.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1997.0 (2002.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1931.0 (1940.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1959.0 (1971.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1934.0 (1950.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1920.0 (1926.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1996.0 (2009.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1970.0 (1976.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2002.0 (2005.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1962.0 (1974.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1955.0 (1962.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1944.0 (1956.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1845.0 (1852.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1970.0 (1980.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2001.0 (2018.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1957.0 (1966.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1975.0 (1983.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1974.0 (1988.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1945.0 (1950.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1918.0 (1925.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1286.0 (1290.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1951.0 (1959.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1954.0 (1965.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1863.0 (1870.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1916.0 (1929.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1927.0 (1933.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2024.0 (2035.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1934.0 (1942.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1972.0 (1985.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1909.0 (1922.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1964.0 (1973.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1990.0 (1999.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1944.0 (1956.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2060.0 (2074.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1967.0 (1975.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1974.0 (1982.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1933.0 (1943.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2018.0 (2029.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1945.0 (1957.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1952.0 (1963.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1975.0 (1985.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2028.0 (2038.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1976.0 (1983.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1942.0 (1954.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1923.0 (1930.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1996.0 (2009.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2037.0 (2048.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1960.0 (1968.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1910.0 (1919.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1965.0 (1969.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1954.0 (1965.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1914.0 (1928.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2010.0 (2022.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2009.0 (2020.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1874.0 (1886.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1964.0 (1975.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1979.0 (1990.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2013.0 (2027.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1975.0 (1979.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1985.0 (1997.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2004.0 (2013.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2020.0 (2025.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1938.0 (1943.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1941.0 (1950.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2063.0 (2069.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1941.0 (1945.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1995.0 (2000.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 691.0 (695.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 699.0 (701.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 635.0 (639.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 698.0 (703.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 671.0 (674.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 665.0 (668.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 681.0 (687.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 670.0 (672.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1247.0 (1254.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1325.0 (1327.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1371.0 (1377.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1912.0 (1926.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 671.0 (672.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 650.0 (654.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 641.0 (642.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 656.0 (659.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 656.0 (658.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 635.0 (636.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 666.0 (670.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 661.0 (663.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 627.0 (635.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 645.0 (649.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 678.0 (681.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 617.0 (621.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 654.0 (660.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 698.0,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 668.0 (671.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 650.0 (653.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 648.0 (649.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 704.0 (707.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 651.0 (653.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 668.0 (673.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 627.0 (630.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 669.0 (671.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 646.0 (650.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 693.0 (695.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 692.0 (694.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 651.0 (656.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 634.0 (636.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 651.0 (654.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 665.0 (669.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 713.0 (716.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 651.0 (655.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 641.0 (642.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 689.0 (694.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 638.0 (640.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 658.0 (662.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 625.0 (629.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 649.0 (651.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 678.0 (680.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 708.0 (711.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 678.0 (680.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 662.0 (665.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2009.0 (2015.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1897.0 (1902.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1972.0 (1981.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1884.0 (1889.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1974.0 (1980.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1997.0 (2011.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2002.0 (2004.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2005.0 (2017.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1938.0 (1946.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2014.0 (2023.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1981.0 (1988.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1958.0 (1966.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2014.0 (2023.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1945.0 (1955.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1973.0 (1988.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1980.0 (1989.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1988.0 (2006.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2011.0 (2019.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2106.0 (2116.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1971.0 (1978.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1963.0 (1971.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 691.0 (698.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 651.0 (653.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 700.0 (701.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 661.0 (662.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 668.0 (670.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 641.0 (643.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 658.0 (662.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 641.0 (643.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 680.0 (683.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 678.0 (680.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 677.0 (681.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 672.0 (677.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 645.0 (647.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 677.0 (679.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 630.0 (633.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 648.0 (650.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 664.0 (667.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 660.0 (664.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 635.0 (638.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 665.0 (666.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 667.0 (673.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 669.0 (670.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 636.0 (642.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 665.0 (669.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 625.0 (627.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 665.0 (672.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 675.0 (681.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 652.0 (657.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 707.0 (710.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 664.0 (667.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 685.0 (688.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 677.0 (681.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 661.0 (664.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 676.0 (678.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 641.0 (644.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 663.0 (666.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 670.0 (673.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 617.0 (618.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 651.0 (654.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 657.0 (660.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 660.0 (669.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 663.0 (667.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 690.0 (700.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2003.0 (2014.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1990.0 (2000.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2037.0 (2050.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1994.0 (1998.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1938.0 (1946.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1973.0 (1983.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1922.0 (1933.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1935.0 (1943.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1954.0 (1960.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 677.0 (678.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 656.0 (658.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 667.0,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 692.0 (694.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 661.0 (666.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 656.0 (666.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 613.0 (618.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 673.0 (678.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 626.0 (629.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 570.0 (573.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 664.0 (668.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 677.0 (681.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 625.0 (627.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 670.0 (672.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 635.0 (636.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 650.0 (653.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 609.0 (611.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 661.0 (665.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 703.0 (707.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 677.0 (682.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 656.0 (659.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1358.0 (1362.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1313.0 (1319.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1355.0 (1365.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1334.0 (1339.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1321.0 (1327.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1291.0 (1301.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1334.0 (1338.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1347.0 (1348.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1264.0 (1269.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1235.0 (1239.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1298.0 (1304.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1297.0 (1303.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1313.0 (1314.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1306.0 (1313.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1300.0 (1308.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1302.0 (1309.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1331.0 (1337.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1371.0 (1378.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1348.0 (1354.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1294.0 (1298.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1292.0 (1298.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1349.0 (1351.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1364.0 (1368.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1261.0 (1267.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1349.0 (1354.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1299.0 (1304.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1374.0 (1381.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1320.0 (1326.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1300.0 (1307.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1279.0 (1284.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1944.0 (1954.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2019.0 (2032.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1970.0 (1980.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2040.0 (2045.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1920.0 (1931.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1904.0 (1907.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1988.0 (1992.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1997.0 (2005.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2019.0 (2028.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1932.0 (1944.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2003.0 (2013.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2000.0 (2013.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1971.0 (1986.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1945.0 (1952.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 628.0 (631.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 649.0 (651.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 691.0 (694.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 668.0 (673.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 697.0,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 664.0 (668.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 657.0,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 620.0 (623.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 678.0 (679.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 656.0 (658.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 674.0 (678.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 718.0 (720.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 672.0 (676.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 618.0 (623.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 680.0 (683.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 649.0 (651.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 600.0 (603.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 673.0 (678.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 629.0 (633.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 663.0 (668.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 640.0 (642.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 671.0 (675.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 649.0 (653.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 657.0 (659.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 619.0 (624.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 647.0 (650.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 641.0 (644.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 673.0 (674.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 622.0 (623.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 650.0 (655.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 638.0 (641.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1984.0 (1994.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2050.0 (2057.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1946.0 (1954.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1930.0 (1941.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1323.0 (1330.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1301.0 (1306.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1366.0 (1373.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2020.0 (2031.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2017.0 (2023.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2016.0 (2023.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1966.0 (1978.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 667.0 (671.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 625.0 (630.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1891.0 (1899.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 683.0 (689.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2041.0 (2050.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1294.0 (1300.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 632.0 (636.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 662.0 (665.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1978.0 (1982.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 630.0 (636.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 652.0 (653.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 664.0 (665.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 644.0 (647.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 665.0 (666.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 715.0 (720.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 691.0 (694.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 652.0 (656.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 668.0 (672.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 618.0 (621.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 616.0 (619.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2059.0 (2070.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1985.0 (1995.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2011.0 (2019.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2020.0 (2024.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1977.0 (1980.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1999.0 (2010.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2046.0 (2054.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2014.0 (2021.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2058.0 (2066.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2003.0 (2015.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2083.0 (2088.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1960.0 (1975.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1977.0 (1985.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2031.0 (2040.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1984.0 (1991.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1974.0 (1984.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2052.0 (2062.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1985.0 (1991.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1899.0 (1910.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2047.0 (2055.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1951.0 (1958.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2012.0 (2018.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2113.0 (2124.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1974.0 (1985.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2015.0 (2020.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1996.0 (2006.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1973.0 (1983.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2002.0 (2011.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1965.0 (1970.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1979.0 (1986.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1994.0 (2001.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1990.0 (2000.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1988.0 (1995.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2010.0 (2017.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1922.0 (1928.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1978.0 (1989.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2004.0 (2022.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1943.0 (1950.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2099.0 (2107.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2071.0 (2089.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2077.0 (2087.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2103.0 (2113.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1979.0 (1990.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2042.0 (2051.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1921.0 (1931.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2001.0 (2013.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2021.0 (2029.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2036.0 (2044.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2042.0 (2048.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1951.0 (1957.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2020.0 (2031.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2047.0 (2054.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1933.0 (1946.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1928.0 (1936.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2041.0 (2050.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1975.0 (1987.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2038.0 (2045.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2028.0 (2037.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1913.0 (1927.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1970.0 (1983.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1945.0 (1954.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1965.0 (1970.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2032.0 (2039.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2096.0 (2101.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1931.0 (1938.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2018.0 (2028.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1326.0 (1336.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1958.0 (1969.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2028.0 (2035.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2037.0 (2044.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1978.0 (1988.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2031.0 (2041.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2050.0 (2055.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1986.0 (1991.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2045.0 (2055.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1969.0 (1975.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1933.0 (1940.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2035.0 (2042.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1994.0 (2008.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2048.0 (2058.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1933.0 (1938.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1998.0 (2008.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1993.0 (2002.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1943.0 (1954.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1990.0 (2005.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1950.0 (1959.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2006.0 (2013.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1991.0 (2000.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2025.0 (2035.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1978.0 (1988.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2026.0 (2033.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1964.0 (1970.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1998.0 (2002.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2032.0 (2041.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1976.0 (1985.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1939.0 (1951.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1925.0 (1933.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1986.0 (1996.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1965.0 (1974.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1933.0 (1943.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1909.0 (1920.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1997.0 (2002.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2023.0 (2027.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1972.0 (1979.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2004.0 (2012.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2017.0 (2022.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1933.0 (1942.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1962.0 (1965.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2015.0 (2022.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1986.0 (1992.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1927.0 (1931.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1979.0 (1986.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1964.0 (1973.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1984.0 (1995.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1844.0 (1854.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2083.0 (2093.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1936.0 (1946.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2027.0 (2042.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1988.0 (1994.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2015.0 (2021.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2092.0 (2101.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2037.0 (2044.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1972.0 (1979.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1976.0 (1987.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2030.0 (2040.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2008.0 (2019.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2027.0 (2036.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 2009.0 (2013.0 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 1968.0 (1982.0 with flow)]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "73fe5307-39bb-42ea-9257-3ec4492771ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.453112384304404 (20.6052936129272 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.635070506483316 (6.756815489381552 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.63132118806243,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.904607409611344 (5.965479901060462 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.818360973149538 (20.818359032273293 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.487287301570177 (7.426414810121059 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.6400794852525 (21.579208930954337 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.4872640408575535 (7.548137502744794 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.11828658170998 (20.179158102720976 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.178534587845206 (6.239407079294324 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.75309531390667 (19.78353155963123 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.609038110822439 (7.6090371403843164 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.087872691452503 (20.331362657248974 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.730781182646751 (7.791653674095869 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.087852254509926 (20.118287529796362 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.300307670608163 (6.30030670017004 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.827091097831726 (23.040143847465515 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.730754002928734 (7.761190248653293 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.64004839025438 (21.761793373152614 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.604625543579459 (6.635061789304018 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.248843165114522 (22.340150931850076 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.487870141863823 (21.609613187611103 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.761838011443615 (21.85314674861729 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 12.631003104150295 (12.722312811762094 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.270486203953624 (20.422667432576418 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 12.87447370775044 (12.844039402902126 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.940078761428595 (20.909642515704036 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 13.300673171877861 (13.33110941760242 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.457471692934632 (21.51834418438375 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 13.635379888117313 (13.66581516340375 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.970495652407408 (21.18354937247932 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.127032229676843 (22.096595983952284 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.335730604827404 (21.3052924182266 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.42704126611352 (21.518350003287196 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.727007625624537 (21.000933837145567 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.705343211069703 (22.827087223529816 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.696567507460713 (20.75743902847171 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.45746194757521 (21.518335409462452 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.18353095650673 (21.396583706140518 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.057404408231378 (20.118275929242373 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.79227232374251 (21.944454522803426 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.21398850902915 (21.274862937629223 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.21839721687138 (22.431448996067047 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.48790699057281 (21.7009597402066 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 18.8095067050308 (18.931251687929034 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.787855876609683 (21.061780147254467 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 18.748636135831475 (18.80950765684247 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.883565545082092 (21.974872345104814 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.79227421991527 (21.944455448538065 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.853155501186848 (21.914027025923133 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.27047558873892 (20.361784325912595 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.73141054622829 (21.731409575790167 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.700980123132467 (21.700979152694345 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.979310186579823 (23.10105516947806 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.52273253723979 (22.583607940003276 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.462010223418474 (22.614190481603146 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.579215686768293 (21.731396915391088 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.39661955088377 (21.335748029872775 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.61406941153109 (22.82711827941239 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.84873222745955 (20.9096056856215 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.122684655711055 (21.305302130058408 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.85317100584507,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.570445811375976 (19.753061344847083 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.848739944398403 (21.031356448307633 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.396571995690465 (21.45744351670146 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.79667517542839 (22.94885446317494 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.370529947802424 (22.553146451711655 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.366175519302487 (21.45748328603804 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.822635987773538 (21.913941813632846 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.93565843999386 (19.96609274484217 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.366185273975134 (21.396623456850648 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 24.31847395375371 (24.683705991134048 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.935684649273753 (20.057425750419497 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.00967657007277 (23.253165561705828 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.453086253255606 (20.544394990429282 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.08783578686416 (19.935653587803245 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.066251864656806 (22.096687139943242 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.492287576198578 (22.55316103808582 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.600882951170206 (19.753063209354877 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.883567495271564 (21.94443998672068 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.8575137834996 (23.04013028740883 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.600873328745365 (19.69218109548092 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.6184218917042 (23.740166874602437 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.513971319422126 (20.666150607168674 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.118267172947526 (20.20957493968308 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.457476565614343 (21.54878530278802 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 10.317768087610602 (10.37864057905972 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.970481168478727 (21.1226614266634 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.187948390841484 (22.2488208822906 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.20959337055683 (20.118285603821278 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.157523795962334 (22.340140299871564 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.72259403206408 (19.935647752135992 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.883620887994766 (22.005365870893 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.79229080118239 (21.822727046906948 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 17.713836772367358,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.722620218992233 (19.84436520189047 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.64004946127534 (21.57917600311339 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.792170459404588 (21.822606705129147 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.696566490456462 (20.787874257192016 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.674916714429855,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.249016519635916 (22.218580273911357 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.387650169432163 (19.539830427616835 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.509565580636263 (19.57043807208538 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.035814648494124 (22.096687139943242 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.705294894054532 (22.76616738550365 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.85314970649779 (22.127073977142572 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.218376874923706 (22.279250336810946 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.21833998709917 (22.24877623282373 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.392205031588674 (20.574821535497904 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.84878265671432 (21.061836376786232 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.235621865838766 (19.41823934018612 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.787886891514063 (20.818324107676744 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.06180731020868 (21.061811182647943 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.70091710984707 (21.85309736803174 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.944425420835614 (21.913989175111055 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.909620247781277 (20.787876235321164 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.540070628747344 (19.661816578358412 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.309674913063645 (22.4009826797992 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.026979824528098 (20.179161053150892 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 15.948519960045815 (16.009390510618687 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.42264803312719 (20.483519554138184 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.39223706535995 (20.54441732354462 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.605254881083965 (20.696563618257642 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.0617879293859 (21.21396721713245 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.70095681026578 (21.822701793164015 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.609649050980806 (21.761828338727355 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.966097611933947 (20.148713145405054 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.148758709430695 (20.240068417042494 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.21398751810193 (21.305296255275607 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.60968589782715 (21.700993664562702 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.974753191694617 (22.187804974615574 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.661782652139664 (19.905272617936134 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.76619539037347 (23.13142936863005 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.274869760498405,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.392193406820297 (20.39219437353313 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.6400755494833 (21.700948040932417 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.679331244900823 (23.70976749062538 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.787836465984583 (21.03132546134293 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.49666230753064 (23.587971044704318 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.970500513911247 (21.1531179882586 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 24.653243532404304 (24.77498851530254 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.29652639105916 (19.326961666345596 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.644461039453745 (22.76620214432478 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.692167500033975 (19.783477207645774 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.618595220148563 (23.83164699934423 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.092259055003524 (21.18356778845191 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.435805302113295 (23.618422776460648 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.357385301962495 (19.32695002667606 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.726992098614573 (20.78786459006369 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.96607530117035 (19.87476559355855 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 18.992199761793017 (19.174816265702248 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 18.99215422011912 (19.053026711568236 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.813941590487957 (19.844377836212516 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.974847132340074,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.922799801453948 (24.014107571914792 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.674908865243196 (22.766217602416873 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.909619292244315 (21.092235796153545 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.26606684923172 (19.32694031111896 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.118272982537746 (20.3008904568851 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.757666613906622 (20.90984880924225 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.3922002017498 (20.544380459934473 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.023901307955384 (20.115209074690938 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.00531250424683 (22.157493732869625 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.30970304273069 (22.370575534179807 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.94450402073562 (21.82276000827551 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.005310526117682 (21.91400275938213 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.882942013442516 (7.943813534453511 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.517734227702022,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.082838457077742 (5.1437099780887365 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.852526165544987 (7.882961440831423 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.091631660237908 (7.182939426973462 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.030754299834371 (7.061190545558929 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.908997679129243 (6.969870170578361 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 8.704733273014426,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 13.848424844443798 (13.81798859871924 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 14.944206213578582 (15.0050787050277 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 16.161583362147212 (16.22245585359633 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.513957837596536 (20.635700879618526 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.639466626569629 (7.60903038084507 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.0263465736061335 (6.087219065055251 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.239374088123441 (6.269810333848 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.243815803900361 (7.213379558175802 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.878570165485144,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 4.352354995906353 (4.382791241630912 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 8.40037664398551,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.848339237272739 (6.848340207710862 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.030742695555091,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.395964045077562 (7.45683653652668 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.3307274505496025 (6.361162725836039 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.569824244827032 (5.63069673627615 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.878554634749889 (7.000298647210002 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.7307714987546206,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.365534570068121 (7.335099294781685 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.5133274514228106 (6.604636188596487 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.304673722013831 (7.274238446727395 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.791673056781292 (7.822109302505851 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.848147524520755 (6.848146557807922 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.243812896311283 (7.335120663046837 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.422021646052599 (6.452457891777158 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.152480872347951 (7.213353363797069 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.4524345975369215 (6.452433627098799 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.88295366987586 (7.943826161324978 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 8.03511549346149 (8.095987984910607 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.6046236008405685 (6.635059846565127 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.782866293564439 (5.782865323126316 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 8.065579878166318 (8.035143632441759 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.274228746071458,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.335094446316361 (7.426403183490038 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.056798346340656 (6.117671804502606 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 8.065595420077443 (8.035159174352884 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.422048803418875 (6.452485049143434 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.721995757892728 (5.721996728330851 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.574215482920408 (6.635087974369526 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.787250768393278 (6.6655067559331656 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.300280530005693,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.913401555269957 (7.974274046719074 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.817700592800975 (6.787264347076416 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.208958214148879 (6.269830705597997 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 8.035156222060323 (8.126463988795877 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.553157161921263 (22.55315910279751 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.05740924552083 (20.148717982694507 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.000947415828705 (20.9705092292279 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.479070158675313 (19.509506404399872 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.00089987926185 (21.18351638317108 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.118291452527046 (20.36177947744727 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.548774603754282 (21.609646124765277 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.457468774169683 (21.64008430764079 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 18.68777433037758 (18.626902809366584 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.913994010537863 (22.127044819295406 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 18.353000786155462 (18.3834360614419 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.366133853793144 (21.487879807129502 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.331354839727283 (20.544408559799194 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.300892433151603 (20.422637416049838 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.127058412879705 (22.279240611940622 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.122740793973207 (21.39666409417987 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.76620990037918 (23.192316370084882 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.118308924138546 (20.24005390703678 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.279223181307316 (22.279222210869193 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.448713421821594 (19.600892709568143 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.553143553435802 (22.614015074446797 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.517728446051478 (7.4872922003269196 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 9.039521310478449 (9.100392831489444 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.73078796453774 (7.761224210262299 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.63946370780468 (7.669899953529239 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.8176947589963675,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.82209087908268 (7.822089908644557 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.756824225187302 (6.817696716636419 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.056798314675689,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.756833920255303 (6.787270165979862 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.634901063516736,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.848143646493554 (6.909015167504549 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.574215468019247 (6.604650747030973 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.848133923485875,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.5177332777529955 (7.57860479876399 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.5133274756371975 (6.543764691799879 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.8177199717611074,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 8.096003519371152 (8.187312256544828 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.452451091259718 (6.391579570248723 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.178534593433142 (6.2089708391577005 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.726385051384568 (6.756821297109127 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.665484439581633 (6.7263559605926275 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.969872128218412 (6.939435882493854 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.0611692406237125 (7.061170211061835 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.761201893910766 (7.882946876809001 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.448050133883953,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.578582478687167 (7.669891215860844 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.639472438022494 (7.822089912369847 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.243814826011658 (7.213377613574266 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.909010300412774 (6.939446546137333 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.426426488906145 (7.456862734630704 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.787235241383314 (6.878543008118868 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.630698665976524 (5.691570186987519 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.33510123193264 (7.365536507219076 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.182920977473259 (7.182921944186091 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.17852877266705 (6.148093497380614 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.604547129943967 (6.634983375668526 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.9394116178154945 (7.0307184141129255 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.569816470146179 (5.600252715870738 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.456856919452548 (7.487293165177107 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.787244949489832 (6.878553686663508 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.669901901856065 (7.9438271429389715 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.787267275154591 (6.848139766603708 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.304679557681084 (7.365552049130201 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.848739005625248 (20.94004580564797 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.366147451102734 (21.427020909264684 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.970473315566778 (21.061781082302332 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.75740801729262,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.540012465789914 (19.41826748289168 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.09224451892078 (21.274861993268132 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.722631860524416 (19.996559035032988 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.909631852060556 (20.970505313947797 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.609652888029814 (21.67052537947893 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.056792512536049 (6.087228758260608 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.539358906447887 (5.600231397897005 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.395983453840017,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.600238151848316,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.726390881463885 (6.817699618637562 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.852508671581745 (7.91338019259274 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.543762730434537 (6.574198005720973 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.639472449198365 (7.730781186372042 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.087222950533032 (6.178531687706709 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.356767598539591 (5.38720384426415 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 8.03514557890594 (8.035144608467817 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.33511483669281,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.787275029346347 (6.78727599978447 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.365510372444987 (7.426382863894105 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.456842351704836 (7.487278597429395 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.304673725739121 (7.274237480014563 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.274237489327788,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.482884433120489 (6.543755954131484 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.943860076367855 (8.004732567816973 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.152471173554659 (7.243779910728335 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.669901894405484 (7.761210631579161 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 15.278948714956641,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 14.457141982391477 (14.518014473840594 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 14.27455654554069 (14.335429036989808 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 14.365858485922217 (14.518038744106889 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 15.491963669657707 (15.552836161106825 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 15.309361727908254 (15.431107681244612 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 16.678981121629477 (16.739853613078594 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 15.735466260463 (15.70503001473844 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 14.061521239578724 (14.213701497763395 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 14.822401179000735 (14.822400208562613 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 14.427158938720822 (14.4271579682827 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 13.604963969439268 (13.72670798189938 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 12.874496011063457 (12.904932256788015 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 14.670203467831016 (14.761513175442815 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 15.157177578657866 (15.278923531994224 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 13.39196640253067 (13.483275139704347 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 12.326575750485063 (12.387447271496058 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 16.89206782542169 (17.044248083606362 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 15.887687241658568,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 13.818016717210412 (13.757145196199417 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 14.670180214568973 (14.73105270601809 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 13.604937775060534,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 14.548442967236042 (14.548443937674165 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 13.361444897949696,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 15.491995677351952 (15.46155846118927 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 13.483238374814391 (13.452802129089832 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 15.644090680405498 (15.674526926130056 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 14.609351331368089 (14.67022479325533 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 15.644159445539117 (15.796339703723788 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 13.117951046675444 (13.20925978384912 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.722599886357784 (19.60085490345955 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.153136380016804 (21.427060650661588 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.600883029401302 (19.783499533310533 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.070584930479527 (23.161894638091326 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 18.566090347245336 (18.718270605430007 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.148705376312137 (20.1182701010257 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.940052622929215 (21.000926084816456 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.118290467187762 (20.057417975738645 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.735802760347724 (22.76623803563416 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.366156177595258 (21.244411194697022 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.179158126935363 (20.300903109833598 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.9749043751508 (22.24883058667183 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.27481156028807 (21.48786430992186 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.39658660441637 (21.487895341590047 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.904610306024551 (5.93504655174911 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.239424511790276 (6.239423541352153 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.969873094931245 (7.000308370217681 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.904616115614772 (5.995924852788448 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 9.222148485481739,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.96548667550087 (5.9654876459389925 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.822083123028278,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.026354329660535 (6.056790575385094 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.122063061222434 (7.152499306946993 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 8.27860837802291 (8.278607411310077 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.635075367987156 (6.695947859436274 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.782867252826691,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.391574714332819 (6.513318726792932 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.478507729247212 (5.569815495982766 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 8.217739757150412 (8.24817600287497 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.517707079648972 (7.578579571098089 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.122020376846194 (7.213329114019871 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.48287764005363 (6.513313885778189 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.7871945928782225 (6.726323068141937 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.395972782745957 (7.3655365370213985 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.122044598683715 (7.122045569121838 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.639461763203144 (7.700334254652262 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.152489598840475,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.813300617039204 (5.813299646601081 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.543759820982814 (6.63506855815649 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.3959592115134 (7.487267948687077 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.387196073308587 (5.478504810482264 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.335109969601035 (7.304673723876476 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.600248834118247 (5.630685079842806 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.061176976189017 (7.213357234373689 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.939456228166819 (6.9698924738913774 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.122627397999167 (21.244372380897403 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.548761021345854 (21.518323805183172 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.87920243293047 (20.94007589481771 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.279249357059598 (22.370557127520442 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 16.587732518091798 (16.618168763816357 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 13.787561070173979 (13.878869807347655 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 14.852840343490243 (14.944147139787674 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.218350656330585 (22.309659393504262 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.822720231488347 (21.94446812197566 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.85315747372806 (21.944466210901737 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.061819933354855 (21.244436440989375 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.543742414563894 (6.604614906013012 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.213360112160444 (7.243796357885003 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 17.196405082941055 (17.257277574390173 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.030754337087274 (7.0916258580982685 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.161876253783703 (23.192313469946384 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 13.81797305867076 (13.878843612968922 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.57418442517519 (6.695929408073425 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.122065000236034 (7.091627787798643 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.12264971062541 (21.183522202074528 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.487300902605057,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.513309037312865 (6.482873762026429 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.182925833389163 (7.152489587664604 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.817699629813433 (6.8481358755379915 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.969892488792539 (7.0003287345170975 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 6.4828650541603565 (6.45242977887392 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.935047520324588 (5.904611274600029 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.243812885135412 (7.30468537658453 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.000319037586451,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 5.539377316832542 (5.569813562557101 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 7.243784766644239 (7.335093503817916 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.4922836702317 (22.46184645406902 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.570427365601063 (19.81391636095941 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.709755811840296,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.400986555963755,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.640113366767764 (21.73142210394144 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.72699404321611 (20.81830859184265 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.087858147919178 (20.0878591183573 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.86192055605352 (23.953228322789073 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.67053414322436 (21.731406634673476 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.727009566500783 (20.90962800756097 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.45746005512774 (21.548768792301416 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 18.931232281029224 (19.20515655167401 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.179161962121725 (20.179162932559848 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.457430008798838 (21.670482758432627 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.30530889518559 (21.45748818293214 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.879185950383544 (20.94005844183266 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.948763435706496 (22.94876149483025 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.213933343067765 (21.335678325966 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.20520599745214 (19.35738528519869 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.666125401854515 (20.72699692286551 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.45753177255392 (21.48796801827848 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.76621571369469 (22.82708820514381 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.874793704599142 (19.905228979885578 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.479118606075644 (19.570425402373075 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.101004729047418 (23.25318498723209 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.435803396627307 (23.61842087097466 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.605241315439343,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.122699176892638 (21.335753867402673 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.187973538413644 (22.279293892905116 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.057381134480238 (20.148690842092037 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.3661445453763 (21.335708299651742 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.548734862357378 (21.548730980604887 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 18.444295985624194 (18.53560472279787 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.035778794437647 (21.883598536252975 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.696601463481784 (20.81834644638002 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.64448237232864 (22.674918618053198 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.81832507252693 (20.940071996301413 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 18.535592122003436 (18.68777335062623 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 24.135867128148675 (24.196739619597793 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.26598446443677 (19.326858896762133 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.579197261482477 (21.640070723369718 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.335731549188495 (21.396604040637612 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.90961440652609 (20.940050652250648 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.21838466078043 (22.309692427515984 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.631296971812844 (19.813913475722075 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.544362971559167 (20.60523352213204 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.640100786462426 (21.640100782737136 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.522682124748826 (22.64442710764706 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.366131905466318 (21.54874937981367 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.518320947885513 (21.700937451794744 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 18.566024474799633 (18.535589195787907 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.466198951005936 (23.4357636757195 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.265475191175938 (19.417656419798732 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.18355905637145 (21.4270480517298 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.857567062601447 (22.88800427876413 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.05742285773158 (20.240038391202688 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.827076517045498 (22.91838719137013 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.609645158052444 (21.82269984483719 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.614085799083114 (22.735829811543226 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.30529340170324 (21.518345180898905 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.969992069527507 (21.061301777139306 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.82269793190062 (21.853133207187057 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.183557119220495 (21.274863915517926 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.18353676609695 (21.15310052037239 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.431424751877785 (22.461861968040466 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.435806311666965 (23.618422815576196 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 14.304966567084193 (14.304967537522316 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.757432252168655 (20.787868497893214 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.03577682375908 (22.127084590494633 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.248817006126046 (22.340125743299723 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.1923298984766,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.457446491345763 (21.33570247516036 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.06178705021739 (21.153095787391067 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.122665245085955 (21.213972041383386 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.709747007116675 (23.648873545229435 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.614047076553106 (22.73579108901322 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.38783991150558 (19.60089266113937 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.422634473070502 (20.574814731255174 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.757458420470357 (20.696586899459362 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.305335953831673 (21.244464432820678 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.848732233047485 (20.879168478772044 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.97485194914043 (21.853106966242194 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.10100375302136 (23.31405746936798 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.066197585314512 (22.218378813937306 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.2704387139529 (20.240003434941173 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.91400085762143 (22.005308624356985 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.461840648204088 (22.553148414939642 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.21397010795772 (21.427021887153387 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.666095353662968 (20.909585315734148 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.792278166860342 (21.914025083184242 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.887991750612855 (22.918428966775537 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.400992438197136 (22.40099050104618 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.82711341418326 (22.887985905632377 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.087874572724104 (20.24008097872138 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.461853260174394 (22.553162967786193 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 18.839957481250167 (18.900829968973994 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.5703363455832 (19.692080358043313 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.061819864436984 (21.24443539790809 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 18.048585010692477 (18.139893747866154 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.213994344696403 (21.335737386718392 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.692149080336094 (19.844329338520765 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.06616658717394 (22.096602832898498 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.300873016938567 (20.300872046500444 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.392225401476026 (20.48353316821158 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.705359736457467 (22.64447756111622 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.161817179992795 (23.19225245527923 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.022455878555775 (19.113765582442284 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.609654869884253 (21.70096360705793 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.605252960696816 (20.51394422352314 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.722628973424435 (19.722629943862557 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 18.596480103209615 (18.657353565096855 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.265923528000712 (19.47897530719638 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.757436107844114 (20.787873324006796 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 24.34889272414148 (24.50107298232615 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 18.87039564922452 (18.931268140673637 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.344533517956734 (23.527150021865964 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.218358423560858 (22.279230915009975 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.874790789559484 (20.087844509631395 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.731380477547646 (21.853126430884004 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.87477819621563 (19.996522208675742 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.974890779703856 (22.127074915915728 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.970512125641108 (21.000947400927544 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 19.23560924641788 (19.266047433018684 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.2444237601012 (21.335731526836753 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 22.461856173351407,\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.331332560628653 (20.300896314904094 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 20.48349147848785 (20.69654422812164 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 21.335718911141157 (21.335717944428325 with flow),\n",
       " Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 23.07061311043799 (23.13148656859994 with flow)]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "histsw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "98978708-58ba-4008-9c37-af6731285c97",
   "metadata": {},
   "outputs": [],
   "source": [
    "hall = bh.Histogram(bh.axis.Regular(25, 0.0, 500000.), metadata=\"Missing ET unweighted\")\n",
    "for h in hists:\n",
    "    hall = hall + h\n",
    "hwall = bh.Histogram(bh.axis.Regular(25, 0.0, 500000.), metadata=\"Missing ET weighted\")\n",
    "for hw in histsw:\n",
    "    hwall = hwall + hw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "1b38f41c-57ac-4e98-91be-15a99655a50a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 830934.0 (834733.0 with flow)"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hall"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "fc9fede3-99db-4f05-802c-e69b0094f734",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[StairsArtists(stairs=<matplotlib.patches.StepPatch object at 0x7f0d3532b890>, errorbar=None, legend_artist=None)]"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "hep.histplot(hall)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "f34f8e77-c460-4c6b-adb2-a5eddbd695c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Histogram(Regular(25, 0, 500000), storage=Double()) # Sum: 8889.4150157962 (8927.79501962848 with flow)"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hwall"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "b6a8a0f4-dc02-4b6e-9b69-9a5e2f2d60fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[StairsArtists(stairs=<matplotlib.patches.StepPatch object at 0x7f0d2b27a290>, errorbar=None, legend_artist=None)]"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "hep.histplot(hwall)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "ae7a1e55-3aa8-499b-8060-df7d0747480f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[StairsArtists(stairs=<matplotlib.patches.StepPatch object at 0x7f0d29178410>, errorbar=None, legend_artist=None)]"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "hep.histplot(hall, density=True)\n",
    "hep.histplot(hwall, density=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "793fc0f6-234d-4fad-b5d5-13e4b893c152",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1193737059.1120393"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(hwall*sew).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d1fd8532-20de-4ec6-b810-dce8282bd77f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
